
jpeg_compress_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000967c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a8c  0800991c  0800991c  0000a91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3a8  0800a3a8  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3a8  0800a3a8  0000b3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b0  0800a3b0  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b0  0800a3b0  0000b3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3b4  0800a3b4  0000b3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  24000000  0800a3b8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004026c  2400006c  0800a424  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240402d8  0800a424  0000c2d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e0a  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a7  00000000  00000000  00020ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00023650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1d  00000000  00000000  000244b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ab10  00000000  00000000  00024fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b71  00000000  00000000  0005fae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f90e  00000000  00000000  00074656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f3f64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004880  00000000  00000000  001f3fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001f8828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009904 	.word	0x08009904

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08009904 	.word	0x08009904

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b49      	ldr	r3, [pc, #292]	@ (80007ac <SystemInit+0x12c>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a48      	ldr	r2, [pc, #288]	@ (80007ac <SystemInit+0x12c>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b45      	ldr	r3, [pc, #276]	@ (80007ac <SystemInit+0x12c>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a44      	ldr	r2, [pc, #272]	@ (80007ac <SystemInit+0x12c>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b43      	ldr	r3, [pc, #268]	@ (80007b0 <SystemInit+0x130>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b40      	ldr	r3, [pc, #256]	@ (80007b0 <SystemInit+0x130>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a3e      	ldr	r2, [pc, #248]	@ (80007b0 <SystemInit+0x130>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b3d      	ldr	r3, [pc, #244]	@ (80007b4 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a3c      	ldr	r2, [pc, #240]	@ (80007b4 <SystemInit+0x134>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b3a      	ldr	r3, [pc, #232]	@ (80007b4 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b39      	ldr	r3, [pc, #228]	@ (80007b4 <SystemInit+0x134>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4938      	ldr	r1, [pc, #224]	@ (80007b4 <SystemInit+0x134>)
 80006d4:	4b38      	ldr	r3, [pc, #224]	@ (80007b8 <SystemInit+0x138>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b35      	ldr	r3, [pc, #212]	@ (80007b0 <SystemInit+0x130>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b32      	ldr	r3, [pc, #200]	@ (80007b0 <SystemInit+0x130>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a30      	ldr	r2, [pc, #192]	@ (80007b0 <SystemInit+0x130>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b2f      	ldr	r3, [pc, #188]	@ (80007b4 <SystemInit+0x134>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <SystemInit+0x134>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <SystemInit+0x134>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <SystemInit+0x134>)
 800070a:	4a2c      	ldr	r2, [pc, #176]	@ (80007bc <SystemInit+0x13c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <SystemInit+0x134>)
 8000710:	4a2b      	ldr	r2, [pc, #172]	@ (80007c0 <SystemInit+0x140>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <SystemInit+0x134>)
 8000716:	4a2b      	ldr	r2, [pc, #172]	@ (80007c4 <SystemInit+0x144>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <SystemInit+0x134>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <SystemInit+0x134>)
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <SystemInit+0x144>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <SystemInit+0x134>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <SystemInit+0x134>)
 800072e:	4a25      	ldr	r2, [pc, #148]	@ (80007c4 <SystemInit+0x144>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <SystemInit+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <SystemInit+0x134>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a1d      	ldr	r2, [pc, #116]	@ (80007b4 <SystemInit+0x134>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <SystemInit+0x134>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <SystemInit+0x148>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a1e      	ldr	r2, [pc, #120]	@ (80007c8 <SystemInit+0x148>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <SystemInit+0x14c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <SystemInit+0x150>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <SystemInit+0x154>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <SystemInit+0x134>)
 800076c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000770:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000774:	2b00      	cmp	r3, #0
 8000776:	d113      	bne.n	80007a0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <SystemInit+0x134>)
 800077a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800077e:	4a0d      	ldr	r2, [pc, #52]	@ (80007b4 <SystemInit+0x134>)
 8000780:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000784:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <SystemInit+0x158>)
 800078a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800078e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <SystemInit+0x134>)
 8000792:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000796:	4a07      	ldr	r2, [pc, #28]	@ (80007b4 <SystemInit+0x134>)
 8000798:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800079c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	52002000 	.word	0x52002000
 80007b4:	58024400 	.word	0x58024400
 80007b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007bc:	02020200 	.word	0x02020200
 80007c0:	01ff0000 	.word	0x01ff0000
 80007c4:	01010280 	.word	0x01010280
 80007c8:	580000c0 	.word	0x580000c0
 80007cc:	5c001000 	.word	0x5c001000
 80007d0:	ffff0000 	.word	0xffff0000
 80007d4:	51008108 	.word	0x51008108
 80007d8:	52004000 	.word	0x52004000

080007dc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <ExitRun0Mode+0x30>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	f023 0306 	bic.w	r3, r3, #6
 80007e8:	4a08      	ldr	r2, [pc, #32]	@ (800080c <ExitRun0Mode+0x30>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007f0:	bf00      	nop
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <ExitRun0Mode+0x30>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f9      	beq.n	80007f2 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	58024800 	.word	0x58024800

08000810 <read_matrix>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to read the matrix from the file
void read_matrix(const char *filename, int matrix[ROWS][COLS]) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
	FILE *file = fopen(filename, "r");
 800081a:	4918      	ldr	r1, [pc, #96]	@ (800087c <read_matrix+0x6c>)
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f007 f9c7 	bl	8007bb0 <fopen>
 8000822:	60f8      	str	r0, [r7, #12]
	if (file == NULL) {
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d102      	bne.n	8000830 <read_matrix+0x20>
		perror("Error opening file");
 800082a:	4815      	ldr	r0, [pc, #84]	@ (8000880 <read_matrix+0x70>)
 800082c:	f007 fb7a 	bl	8007f24 <perror>
	}

	for (int i = 0; i < ROWS; i++) {
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e017      	b.n	8000866 <read_matrix+0x56>
		for (int j = 0; j < COLS; j++) {
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	e00e      	b.n	800085a <read_matrix+0x4a>
			fscanf(file, "%d", &matrix[i][j]);
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	029b      	lsls	r3, r3, #10
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	441a      	add	r2, r3
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	461a      	mov	r2, r3
 800084c:	490d      	ldr	r1, [pc, #52]	@ (8000884 <read_matrix+0x74>)
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f007 f9b6 	bl	8007bc0 <fiscanf>
		for (int j = 0; j < COLS; j++) {
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	3301      	adds	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	2bff      	cmp	r3, #255	@ 0xff
 800085e:	dded      	ble.n	800083c <read_matrix+0x2c>
	for (int i = 0; i < ROWS; i++) {
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	3301      	adds	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	2bff      	cmp	r3, #255	@ 0xff
 800086a:	dde4      	ble.n	8000836 <read_matrix+0x26>
		}
	}

	fclose(file);
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f006 ff81 	bl	8007774 <fclose>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	0800991c 	.word	0x0800991c
 8000880:	08009920 	.word	0x08009920
 8000884:	08009934 	.word	0x08009934

08000888 <print_matrix>:

// Function to print the matrix
void print_matrix(int matrix[ROWS][COLS]) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < ROWS; i++) {
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e027      	b.n	80008e6 <print_matrix+0x5e>
		for (int j = 0; j < COLS; j++) {
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	e018      	b.n	80008ce <print_matrix+0x46>
			sprintf(TX_buf, "%d ", matrix[i][j]);  // Convert integer to string
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	029b      	lsls	r3, r3, #10
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	4413      	add	r3, r2
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4912      	ldr	r1, [pc, #72]	@ (80008f8 <print_matrix+0x70>)
 80008ae:	4813      	ldr	r0, [pc, #76]	@ (80008fc <print_matrix+0x74>)
 80008b0:	f007 f814 	bl	80078dc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)TX_buf, strlen(TX_buf), 10);  // Send over UART
 80008b4:	4811      	ldr	r0, [pc, #68]	@ (80008fc <print_matrix+0x74>)
 80008b6:	f7ff fd13 	bl	80002e0 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	230a      	movs	r3, #10
 80008c0:	490e      	ldr	r1, [pc, #56]	@ (80008fc <print_matrix+0x74>)
 80008c2:	480f      	ldr	r0, [pc, #60]	@ (8000900 <print_matrix+0x78>)
 80008c4:	f005 f996 	bl	8005bf4 <HAL_UART_Transmit>
		for (int j = 0; j < COLS; j++) {
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	2bff      	cmp	r3, #255	@ 0xff
 80008d2:	dde3      	ble.n	800089c <print_matrix+0x14>
		}
		HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 10);
 80008d4:	230a      	movs	r3, #10
 80008d6:	2202      	movs	r2, #2
 80008d8:	490a      	ldr	r1, [pc, #40]	@ (8000904 <print_matrix+0x7c>)
 80008da:	4809      	ldr	r0, [pc, #36]	@ (8000900 <print_matrix+0x78>)
 80008dc:	f005 f98a 	bl	8005bf4 <HAL_UART_Transmit>
	for (int i = 0; i < ROWS; i++) {
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	3301      	adds	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2bff      	cmp	r3, #255	@ 0xff
 80008ea:	ddd4      	ble.n	8000896 <print_matrix+0xe>
	}
}
 80008ec:	bf00      	nop
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08009938 	.word	0x08009938
 80008fc:	24000174 	.word	0x24000174
 8000900:	240000e0 	.word	0x240000e0
 8000904:	0800993c 	.word	0x0800993c

08000908 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 800090e:	f000 f945 	bl	8000b9c <MPU_Config>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000916:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000918:	bf00      	nop
 800091a:	4b29      	ldr	r3, [pc, #164]	@ (80009c0 <main+0xb8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d004      	beq.n	8000930 <main+0x28>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	2b00      	cmp	r3, #0
 800092e:	dcf4      	bgt.n	800091a <main+0x12>
		;
	if (timeout < 0) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	da01      	bge.n	800093a <main+0x32>
		Error_Handler();
 8000936:	f000 f95d 	bl	8000bf4 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800093a:	f000 fb25 	bl	8000f88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800093e:	f000 f849 	bl	80009d4 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000942:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <main+0xb8>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000948:	4a1d      	ldr	r2, [pc, #116]	@ (80009c0 <main+0xb8>)
 800094a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000952:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <main+0xb8>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fc4b 	bl	80021fc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000966:	2100      	movs	r1, #0
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fc61 	bl	8002230 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800096e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000972:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000974:	bf00      	nop
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <main+0xb8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800097e:	2b00      	cmp	r3, #0
 8000980:	d104      	bne.n	800098c <main+0x84>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	dcf4      	bgt.n	8000976 <main+0x6e>
		;
	if (timeout < 0) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	da01      	bge.n	8000996 <main+0x8e>
		Error_Handler();
 8000992:	f000 f92f 	bl	8000bf4 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000996:	f000 f8e7 	bl	8000b68 <MX_GPIO_Init>
	MX_JPEG_Init();
 800099a:	f000 f885 	bl	8000aa8 <MX_JPEG_Init>
	MX_USART2_UART_Init();
 800099e:	f000 f897 	bl	8000ad0 <MX_USART2_UART_Init>

	/* USER CODE BEGIN 2 */
	read_matrix("image_data.txt", image);
 80009a2:	4908      	ldr	r1, [pc, #32]	@ (80009c4 <main+0xbc>)
 80009a4:	4808      	ldr	r0, [pc, #32]	@ (80009c8 <main+0xc0>)
 80009a6:	f7ff ff33 	bl	8000810 <read_matrix>
	print_matrix(image);
 80009aa:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <main+0xbc>)
 80009ac:	f7ff ff6c 	bl	8000888 <print_matrix>
	HAL_UART_Transmit(&huart2, (uint8_t *)"Done!", 32, 10);
 80009b0:	230a      	movs	r3, #10
 80009b2:	2220      	movs	r2, #32
 80009b4:	4905      	ldr	r1, [pc, #20]	@ (80009cc <main+0xc4>)
 80009b6:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <main+0xc8>)
 80009b8:	f005 f91c 	bl	8005bf4 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <main+0xb4>
 80009c0:	58024400 	.word	0x58024400
 80009c4:	24000184 	.word	0x24000184
 80009c8:	08009940 	.word	0x08009940
 80009cc:	08009950 	.word	0x08009950
 80009d0:	240000e0 	.word	0x240000e0

080009d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	@ 0x70
 80009d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009de:	224c      	movs	r2, #76	@ 0x4c
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 fc8e 	bl	8008304 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2220      	movs	r2, #32
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f007 fc88 	bl	8008304 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009f4:	2004      	movs	r0, #4
 80009f6:	f002 fa41 	bl	8002e7c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a02:	4a27      	ldr	r2, [pc, #156]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a04:	f023 0301 	bic.w	r3, r3, #1
 8000a08:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a1c:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000a30:	bf00      	nop
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a3e:	d1f8      	bne.n	8000a32 <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2340      	movs	r3, #64	@ 0x40
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 fa6b 	bl	8002f30 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x90>
		Error_Handler();
 8000a60:	f000 f8c8 	bl	8000bf4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a64:	233f      	movs	r3, #63	@ 0x3f
 8000a66:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a78:	2340      	movs	r3, #64	@ 0x40
 8000a7a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 feab 	bl	80037e4 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xc4>
		Error_Handler();
 8000a94:	f000 f8ae 	bl	8000bf4 <Error_Handler>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	3770      	adds	r7, #112	@ 0x70
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	58000400 	.word	0x58000400
 8000aa4:	58024800 	.word	0x58024800

08000aa8 <MX_JPEG_Init>:
/**
 * @brief JPEG Initialization Function
 * @param None
 * @retval None
 */
static void MX_JPEG_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* USER CODE END JPEG_Init 0 */

	/* USER CODE BEGIN JPEG_Init 1 */

	/* USER CODE END JPEG_Init 1 */
	hjpeg.Instance = JPEG;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_JPEG_Init+0x20>)
 8000aae:	4a07      	ldr	r2, [pc, #28]	@ (8000acc <MX_JPEG_Init+0x24>)
 8000ab0:	601a      	str	r2, [r3, #0]
	if (HAL_JPEG_Init(&hjpeg) != HAL_OK) {
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_JPEG_Init+0x20>)
 8000ab4:	f001 fbd0 	bl	8002258 <HAL_JPEG_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_JPEG_Init+0x1a>
		Error_Handler();
 8000abe:	f000 f899 	bl	8000bf4 <Error_Handler>
	}
	/* USER CODE BEGIN JPEG_Init 2 */

	/* USER CODE END JPEG_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	24000088 	.word	0x24000088
 8000acc:	52003000 	.word	0x52003000

08000ad0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000ad6:	4a23      	ldr	r2, [pc, #140]	@ (8000b64 <MX_USART2_UART_Init+0x94>)
 8000ad8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000b18:	4811      	ldr	r0, [pc, #68]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b1a:	f005 f81b 	bl	8005b54 <HAL_UART_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000b24:	f000 f866 	bl	8000bf4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b2c:	f006 fd02 	bl	8007534 <HAL_UARTEx_SetTxFifoThreshold>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000b36:	f000 f85d 	bl	8000bf4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4808      	ldr	r0, [pc, #32]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b3e:	f006 fd37 	bl	80075b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000b48:	f000 f854 	bl	8000bf4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b4e:	f006 fcb8 	bl	80074c2 <HAL_UARTEx_DisableFifoMode>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000b58:	f000 f84c 	bl	8000bf4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	240000e0 	.word	0x240000e0
 8000b64:	40004400 	.word	0x40004400

08000b68 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <MX_GPIO_Init+0x30>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <MX_GPIO_Init+0x30>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_GPIO_Init+0x30>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	58024400 	.word	0x58024400

08000b9c <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000bae:	f000 fb99 	bl	80012e4 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bbe:	231f      	movs	r3, #31
 8000bc0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000bc2:	2387      	movs	r3, #135	@ 0x87
 8000bc4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bde:	463b      	mov	r3, r7
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fbb7 	bl	8001354 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000be6:	2004      	movs	r0, #4
 8000be8:	f000 fb94 	bl	8001314 <HAL_MPU_Enable>

}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <Error_Handler+0x8>

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_MspInit+0x30>)
 8000c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c0c:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_MspInit+0x30>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_MspInit+0x30>)
 8000c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	58024400 	.word	0x58024400

08000c34 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0b      	ldr	r2, [pc, #44]	@ (8000c70 <HAL_JPEG_MspInit+0x3c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d10e      	bne.n	8000c64 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8000c46:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <HAL_JPEG_MspInit+0x40>)
 8000c48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c4c:	4a09      	ldr	r2, [pc, #36]	@ (8000c74 <HAL_JPEG_MspInit+0x40>)
 8000c4e:	f043 0320 	orr.w	r3, r3, #32
 8000c52:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <HAL_JPEG_MspInit+0x40>)
 8000c58:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c5c:	f003 0320 	and.w	r3, r3, #32
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	52003000 	.word	0x52003000
 8000c74:	58024400 	.word	0x58024400

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	22c0      	movs	r2, #192	@ 0xc0
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f007 fb33 	bl	8008304 <memset>
  if(huart->Instance==USART2)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8000d4c <HAL_UART_MspInit+0xd4>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d14d      	bne.n	8000d44 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca8:	f04f 0202 	mov.w	r2, #2
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 f91c 	bl	8003efc <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cca:	f7ff ff93 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <HAL_UART_MspInit+0xd8>)
 8000cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cd4:	4a1e      	ldr	r2, [pc, #120]	@ (8000d50 <HAL_UART_MspInit+0xd8>)
 8000cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_UART_MspInit+0xd8>)
 8000ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_UART_MspInit+0xd8>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <HAL_UART_MspInit+0xd8>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <HAL_UART_MspInit+0xd8>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d22:	2307      	movs	r3, #7
 8000d24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4809      	ldr	r0, [pc, #36]	@ (8000d54 <HAL_UART_MspInit+0xdc>)
 8000d30:	f001 f8b4 	bl	8001e9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	2026      	movs	r0, #38	@ 0x26
 8000d3a:	f000 fa9e 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d3e:	2026      	movs	r0, #38	@ 0x26
 8000d40:	f000 fab5 	bl	80012ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d44:	bf00      	nop
 8000d46:	37e8      	adds	r7, #232	@ 0xe8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	58024400 	.word	0x58024400
 8000d54:	58020000 	.word	0x58020000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f95d 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <USART2_IRQHandler+0x10>)
 8000dbe:	f004 ffa7 	bl	8005d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	240000e0 	.word	0x240000e0

08000dcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e00a      	b.n	8000df4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dde:	f3af 8000 	nop.w
 8000de2:	4601      	mov	r1, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf0      	blt.n	8000dde <_read+0x12>
  }

  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e009      	b.n	8000e2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	60ba      	str	r2, [r7, #8]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf1      	blt.n	8000e18 <_write+0x12>
  }
  return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_close>:

int _close(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e66:	605a      	str	r2, [r3, #4]
  return 0;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_isatty>:

int _isatty(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_open>:

int _open(char *path, int flags, ...)
{
 8000ea6:	b40e      	push	{r1, r2, r3}
 8000ea8:	b480      	push	{r7}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	b003      	add	sp, #12
 8000ec0:	4770      	bx	lr
	...

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f007 fa54 	bl	80083a0 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	24080000 	.word	0x24080000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	24040184 	.word	0x24040184
 8000f2c:	240402d8 	.word	0x240402d8

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f6c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f34:	f7ff fc52 	bl	80007dc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f38:	f7ff fba2 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f007 fa23 	bl	80083ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fccf 	bl	8000908 <main>
  bx  lr
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f74:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000f78:	0800a3b8 	.word	0x0800a3b8
  ldr r2, =_sbss
 8000f7c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000f80:	240402d8 	.word	0x240402d8

08000f84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC3_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f000 f968 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f94:	f002 fddc 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <HAL_Init+0x68>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	4913      	ldr	r1, [pc, #76]	@ (8000ff4 <HAL_Init+0x6c>)
 8000fa6:	5ccb      	ldrb	r3, [r1, r3]
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_Init+0x68>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <HAL_Init+0x6c>)
 8000fbc:	5cd3      	ldrb	r3, [r2, r3]
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <HAL_Init+0x70>)
 8000fca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <HAL_Init+0x74>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f000 f814 	bl	8001000 <HAL_InitTick>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e002      	b.n	8000fe8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe2:	f7ff fe0d 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	08009964 	.word	0x08009964
 8000ff8:	24000004 	.word	0x24000004
 8000ffc:	24000000 	.word	0x24000000

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001008:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_InitTick+0x60>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e021      	b.n	8001058 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001014:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <HAL_InitTick+0x64>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <HAL_InitTick+0x60>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f94d 	bl	80012ca <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001048:	f000 f917 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	@ (8001068 <HAL_InitTick+0x68>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2400000c 	.word	0x2400000c
 8001064:	24000000 	.word	0x24000000
 8001068:	24000008 	.word	0x24000008

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2400000c 	.word	0x2400000c
 8001090:	24040188 	.word	0x24040188

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	24040188 	.word	0x24040188

080010ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <HAL_GetREVID+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0c1b      	lsrs	r3, r3, #16
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	5c001000 	.word	0x5c001000

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	05fa0000 	.word	0x05fa0000

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	@ (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff29 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff40 	bl	800110c <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff90 	bl	80011b8 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5f 	bl	8001164 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff33 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa4 	bl	8001220 <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012e8:	f3bf 8f5f 	dmb	sy
}
 80012ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012ee:	4b07      	ldr	r3, [pc, #28]	@ (800130c <HAL_MPU_Disable+0x28>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	4a06      	ldr	r2, [pc, #24]	@ (800130c <HAL_MPU_Disable+0x28>)
 80012f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_MPU_Disable+0x2c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	e000ed90 	.word	0xe000ed90

08001314 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800131c:	4a0b      	ldr	r2, [pc, #44]	@ (800134c <HAL_MPU_Enable+0x38>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_MPU_Enable+0x3c>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <HAL_MPU_Enable+0x3c>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001330:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001332:	f3bf 8f4f 	dsb	sy
}
 8001336:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001338:	f3bf 8f6f 	isb	sy
}
 800133c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed90 	.word	0xe000ed90
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	785a      	ldrb	r2, [r3, #1]
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001362:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_MPU_ConfigRegion+0x7c>)
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001370:	4a17      	ldr	r2, [pc, #92]	@ (80013d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7b1b      	ldrb	r3, [r3, #12]
 800137c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7adb      	ldrb	r3, [r3, #11]
 8001382:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001384:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7a9b      	ldrb	r3, [r3, #10]
 800138a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800138c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7b5b      	ldrb	r3, [r3, #13]
 8001392:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001394:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7b9b      	ldrb	r3, [r3, #14]
 800139a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800139c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7bdb      	ldrb	r3, [r3, #15]
 80013a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7a5b      	ldrb	r3, [r3, #9]
 80013aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7a1b      	ldrb	r3, [r3, #8]
 80013b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c0:	6113      	str	r3, [r2, #16]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed90 	.word	0xe000ed90

080013d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff fe5a 	bl	8001094 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e2dc      	b.n	80019a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d008      	beq.n	800140a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e2cd      	b.n	80019a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a76      	ldr	r2, [pc, #472]	@ (80015e8 <HAL_DMA_Abort+0x214>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d04a      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a74      	ldr	r2, [pc, #464]	@ (80015ec <HAL_DMA_Abort+0x218>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d045      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a73      	ldr	r2, [pc, #460]	@ (80015f0 <HAL_DMA_Abort+0x21c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d040      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a71      	ldr	r2, [pc, #452]	@ (80015f4 <HAL_DMA_Abort+0x220>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d03b      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a70      	ldr	r2, [pc, #448]	@ (80015f8 <HAL_DMA_Abort+0x224>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d036      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6e      	ldr	r2, [pc, #440]	@ (80015fc <HAL_DMA_Abort+0x228>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d031      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6d      	ldr	r2, [pc, #436]	@ (8001600 <HAL_DMA_Abort+0x22c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d02c      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a6b      	ldr	r2, [pc, #428]	@ (8001604 <HAL_DMA_Abort+0x230>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d027      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6a      	ldr	r2, [pc, #424]	@ (8001608 <HAL_DMA_Abort+0x234>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d022      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a68      	ldr	r2, [pc, #416]	@ (800160c <HAL_DMA_Abort+0x238>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01d      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a67      	ldr	r2, [pc, #412]	@ (8001610 <HAL_DMA_Abort+0x23c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d018      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a65      	ldr	r2, [pc, #404]	@ (8001614 <HAL_DMA_Abort+0x240>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a64      	ldr	r2, [pc, #400]	@ (8001618 <HAL_DMA_Abort+0x244>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d00e      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a62      	ldr	r2, [pc, #392]	@ (800161c <HAL_DMA_Abort+0x248>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d009      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a61      	ldr	r2, [pc, #388]	@ (8001620 <HAL_DMA_Abort+0x24c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d004      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001624 <HAL_DMA_Abort+0x250>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_DMA_Abort+0xda>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_DMA_Abort+0xdc>
 80014ae:	2300      	movs	r3, #0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 021e 	bic.w	r2, r2, #30
 80014c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e00a      	b.n	80014f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 020e 	bic.w	r2, r2, #14
 80014ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a3c      	ldr	r2, [pc, #240]	@ (80015e8 <HAL_DMA_Abort+0x214>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d072      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a3a      	ldr	r2, [pc, #232]	@ (80015ec <HAL_DMA_Abort+0x218>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d06d      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a39      	ldr	r2, [pc, #228]	@ (80015f0 <HAL_DMA_Abort+0x21c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d068      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a37      	ldr	r2, [pc, #220]	@ (80015f4 <HAL_DMA_Abort+0x220>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d063      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a36      	ldr	r2, [pc, #216]	@ (80015f8 <HAL_DMA_Abort+0x224>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d05e      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a34      	ldr	r2, [pc, #208]	@ (80015fc <HAL_DMA_Abort+0x228>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d059      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a33      	ldr	r2, [pc, #204]	@ (8001600 <HAL_DMA_Abort+0x22c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d054      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a31      	ldr	r2, [pc, #196]	@ (8001604 <HAL_DMA_Abort+0x230>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d04f      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a30      	ldr	r2, [pc, #192]	@ (8001608 <HAL_DMA_Abort+0x234>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d04a      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2e      	ldr	r2, [pc, #184]	@ (800160c <HAL_DMA_Abort+0x238>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d045      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a2d      	ldr	r2, [pc, #180]	@ (8001610 <HAL_DMA_Abort+0x23c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d040      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2b      	ldr	r2, [pc, #172]	@ (8001614 <HAL_DMA_Abort+0x240>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d03b      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2a      	ldr	r2, [pc, #168]	@ (8001618 <HAL_DMA_Abort+0x244>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d036      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a28      	ldr	r2, [pc, #160]	@ (800161c <HAL_DMA_Abort+0x248>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d031      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a27      	ldr	r2, [pc, #156]	@ (8001620 <HAL_DMA_Abort+0x24c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d02c      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a25      	ldr	r2, [pc, #148]	@ (8001624 <HAL_DMA_Abort+0x250>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d027      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a24      	ldr	r2, [pc, #144]	@ (8001628 <HAL_DMA_Abort+0x254>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d022      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a22      	ldr	r2, [pc, #136]	@ (800162c <HAL_DMA_Abort+0x258>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d01d      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <HAL_DMA_Abort+0x25c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d018      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001634 <HAL_DMA_Abort+0x260>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1e      	ldr	r2, [pc, #120]	@ (8001638 <HAL_DMA_Abort+0x264>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d00e      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1c      	ldr	r2, [pc, #112]	@ (800163c <HAL_DMA_Abort+0x268>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d009      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001640 <HAL_DMA_Abort+0x26c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d004      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	@ (8001644 <HAL_DMA_Abort+0x270>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d132      	bne.n	8001648 <HAL_DMA_Abort+0x274>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e031      	b.n	800164a <HAL_DMA_Abort+0x276>
 80015e6:	bf00      	nop
 80015e8:	40020010 	.word	0x40020010
 80015ec:	40020028 	.word	0x40020028
 80015f0:	40020040 	.word	0x40020040
 80015f4:	40020058 	.word	0x40020058
 80015f8:	40020070 	.word	0x40020070
 80015fc:	40020088 	.word	0x40020088
 8001600:	400200a0 	.word	0x400200a0
 8001604:	400200b8 	.word	0x400200b8
 8001608:	40020410 	.word	0x40020410
 800160c:	40020428 	.word	0x40020428
 8001610:	40020440 	.word	0x40020440
 8001614:	40020458 	.word	0x40020458
 8001618:	40020470 	.word	0x40020470
 800161c:	40020488 	.word	0x40020488
 8001620:	400204a0 	.word	0x400204a0
 8001624:	400204b8 	.word	0x400204b8
 8001628:	58025408 	.word	0x58025408
 800162c:	5802541c 	.word	0x5802541c
 8001630:	58025430 	.word	0x58025430
 8001634:	58025444 	.word	0x58025444
 8001638:	58025458 	.word	0x58025458
 800163c:	5802546c 	.word	0x5802546c
 8001640:	58025480 	.word	0x58025480
 8001644:	58025494 	.word	0x58025494
 8001648:	2300      	movs	r3, #0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800165c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6d      	ldr	r2, [pc, #436]	@ (8001818 <HAL_DMA_Abort+0x444>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d04a      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6b      	ldr	r2, [pc, #428]	@ (800181c <HAL_DMA_Abort+0x448>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d045      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6a      	ldr	r2, [pc, #424]	@ (8001820 <HAL_DMA_Abort+0x44c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d040      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a68      	ldr	r2, [pc, #416]	@ (8001824 <HAL_DMA_Abort+0x450>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d03b      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a67      	ldr	r2, [pc, #412]	@ (8001828 <HAL_DMA_Abort+0x454>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d036      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a65      	ldr	r2, [pc, #404]	@ (800182c <HAL_DMA_Abort+0x458>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d031      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a64      	ldr	r2, [pc, #400]	@ (8001830 <HAL_DMA_Abort+0x45c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d02c      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a62      	ldr	r2, [pc, #392]	@ (8001834 <HAL_DMA_Abort+0x460>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d027      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a61      	ldr	r2, [pc, #388]	@ (8001838 <HAL_DMA_Abort+0x464>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d022      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a5f      	ldr	r2, [pc, #380]	@ (800183c <HAL_DMA_Abort+0x468>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01d      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001840 <HAL_DMA_Abort+0x46c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d018      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a5c      	ldr	r2, [pc, #368]	@ (8001844 <HAL_DMA_Abort+0x470>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5b      	ldr	r2, [pc, #364]	@ (8001848 <HAL_DMA_Abort+0x474>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00e      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a59      	ldr	r2, [pc, #356]	@ (800184c <HAL_DMA_Abort+0x478>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d009      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a58      	ldr	r2, [pc, #352]	@ (8001850 <HAL_DMA_Abort+0x47c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d004      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a56      	ldr	r2, [pc, #344]	@ (8001854 <HAL_DMA_Abort+0x480>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d108      	bne.n	8001710 <HAL_DMA_Abort+0x33c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e007      	b.n	8001720 <HAL_DMA_Abort+0x34c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001720:	e013      	b.n	800174a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001722:	f7ff fcb7 	bl	8001094 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b05      	cmp	r3, #5
 800172e:	d90c      	bls.n	800174a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e12d      	b.n	80019a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1e5      	bne.n	8001722 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a2f      	ldr	r2, [pc, #188]	@ (8001818 <HAL_DMA_Abort+0x444>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d04a      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a2d      	ldr	r2, [pc, #180]	@ (800181c <HAL_DMA_Abort+0x448>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d045      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a2c      	ldr	r2, [pc, #176]	@ (8001820 <HAL_DMA_Abort+0x44c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d040      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2a      	ldr	r2, [pc, #168]	@ (8001824 <HAL_DMA_Abort+0x450>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d03b      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a29      	ldr	r2, [pc, #164]	@ (8001828 <HAL_DMA_Abort+0x454>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d036      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a27      	ldr	r2, [pc, #156]	@ (800182c <HAL_DMA_Abort+0x458>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d031      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a26      	ldr	r2, [pc, #152]	@ (8001830 <HAL_DMA_Abort+0x45c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d02c      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a24      	ldr	r2, [pc, #144]	@ (8001834 <HAL_DMA_Abort+0x460>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d027      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <HAL_DMA_Abort+0x464>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d022      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a21      	ldr	r2, [pc, #132]	@ (800183c <HAL_DMA_Abort+0x468>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01d      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a20      	ldr	r2, [pc, #128]	@ (8001840 <HAL_DMA_Abort+0x46c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d018      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001844 <HAL_DMA_Abort+0x470>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001848 <HAL_DMA_Abort+0x474>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00e      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <HAL_DMA_Abort+0x478>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d009      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001850 <HAL_DMA_Abort+0x47c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d004      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <HAL_DMA_Abort+0x480>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_DMA_Abort+0x426>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_DMA_Abort+0x428>
 80017fa:	2300      	movs	r3, #0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02b      	beq.n	8001858 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	223f      	movs	r2, #63	@ 0x3f
 8001810:	409a      	lsls	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	e02a      	b.n	800186e <HAL_DMA_Abort+0x49a>
 8001818:	40020010 	.word	0x40020010
 800181c:	40020028 	.word	0x40020028
 8001820:	40020040 	.word	0x40020040
 8001824:	40020058 	.word	0x40020058
 8001828:	40020070 	.word	0x40020070
 800182c:	40020088 	.word	0x40020088
 8001830:	400200a0 	.word	0x400200a0
 8001834:	400200b8 	.word	0x400200b8
 8001838:	40020410 	.word	0x40020410
 800183c:	40020428 	.word	0x40020428
 8001840:	40020440 	.word	0x40020440
 8001844:	40020458 	.word	0x40020458
 8001848:	40020470 	.word	0x40020470
 800184c:	40020488 	.word	0x40020488
 8001850:	400204a0 	.word	0x400204a0
 8001854:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a4f      	ldr	r2, [pc, #316]	@ (80019b0 <HAL_DMA_Abort+0x5dc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d072      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a4d      	ldr	r2, [pc, #308]	@ (80019b4 <HAL_DMA_Abort+0x5e0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d06d      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a4c      	ldr	r2, [pc, #304]	@ (80019b8 <HAL_DMA_Abort+0x5e4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d068      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a4a      	ldr	r2, [pc, #296]	@ (80019bc <HAL_DMA_Abort+0x5e8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d063      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a49      	ldr	r2, [pc, #292]	@ (80019c0 <HAL_DMA_Abort+0x5ec>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d05e      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a47      	ldr	r2, [pc, #284]	@ (80019c4 <HAL_DMA_Abort+0x5f0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d059      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a46      	ldr	r2, [pc, #280]	@ (80019c8 <HAL_DMA_Abort+0x5f4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d054      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a44      	ldr	r2, [pc, #272]	@ (80019cc <HAL_DMA_Abort+0x5f8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d04f      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a43      	ldr	r2, [pc, #268]	@ (80019d0 <HAL_DMA_Abort+0x5fc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d04a      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a41      	ldr	r2, [pc, #260]	@ (80019d4 <HAL_DMA_Abort+0x600>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d045      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a40      	ldr	r2, [pc, #256]	@ (80019d8 <HAL_DMA_Abort+0x604>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d040      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3e      	ldr	r2, [pc, #248]	@ (80019dc <HAL_DMA_Abort+0x608>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d03b      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a3d      	ldr	r2, [pc, #244]	@ (80019e0 <HAL_DMA_Abort+0x60c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d036      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a3b      	ldr	r2, [pc, #236]	@ (80019e4 <HAL_DMA_Abort+0x610>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d031      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a3a      	ldr	r2, [pc, #232]	@ (80019e8 <HAL_DMA_Abort+0x614>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d02c      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a38      	ldr	r2, [pc, #224]	@ (80019ec <HAL_DMA_Abort+0x618>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d027      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a37      	ldr	r2, [pc, #220]	@ (80019f0 <HAL_DMA_Abort+0x61c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d022      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a35      	ldr	r2, [pc, #212]	@ (80019f4 <HAL_DMA_Abort+0x620>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d01d      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a34      	ldr	r2, [pc, #208]	@ (80019f8 <HAL_DMA_Abort+0x624>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d018      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a32      	ldr	r2, [pc, #200]	@ (80019fc <HAL_DMA_Abort+0x628>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a31      	ldr	r2, [pc, #196]	@ (8001a00 <HAL_DMA_Abort+0x62c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00e      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2f      	ldr	r2, [pc, #188]	@ (8001a04 <HAL_DMA_Abort+0x630>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d009      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a08 <HAL_DMA_Abort+0x634>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d004      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2c      	ldr	r2, [pc, #176]	@ (8001a0c <HAL_DMA_Abort+0x638>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_DMA_Abort+0x58e>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_DMA_Abort+0x590>
 8001962:	2300      	movs	r3, #0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d015      	beq.n	8001994 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001970:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00c      	beq.n	8001994 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001984:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001988:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001992:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020010 	.word	0x40020010
 80019b4:	40020028 	.word	0x40020028
 80019b8:	40020040 	.word	0x40020040
 80019bc:	40020058 	.word	0x40020058
 80019c0:	40020070 	.word	0x40020070
 80019c4:	40020088 	.word	0x40020088
 80019c8:	400200a0 	.word	0x400200a0
 80019cc:	400200b8 	.word	0x400200b8
 80019d0:	40020410 	.word	0x40020410
 80019d4:	40020428 	.word	0x40020428
 80019d8:	40020440 	.word	0x40020440
 80019dc:	40020458 	.word	0x40020458
 80019e0:	40020470 	.word	0x40020470
 80019e4:	40020488 	.word	0x40020488
 80019e8:	400204a0 	.word	0x400204a0
 80019ec:	400204b8 	.word	0x400204b8
 80019f0:	58025408 	.word	0x58025408
 80019f4:	5802541c 	.word	0x5802541c
 80019f8:	58025430 	.word	0x58025430
 80019fc:	58025444 	.word	0x58025444
 8001a00:	58025458 	.word	0x58025458
 8001a04:	5802546c 	.word	0x5802546c
 8001a08:	58025480 	.word	0x58025480
 8001a0c:	58025494 	.word	0x58025494

08001a10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e237      	b.n	8001e92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d004      	beq.n	8001a38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e22c      	b.n	8001e92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a5c      	ldr	r2, [pc, #368]	@ (8001bb0 <HAL_DMA_Abort_IT+0x1a0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d04a      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb4 <HAL_DMA_Abort_IT+0x1a4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d045      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a59      	ldr	r2, [pc, #356]	@ (8001bb8 <HAL_DMA_Abort_IT+0x1a8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d040      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a58      	ldr	r2, [pc, #352]	@ (8001bbc <HAL_DMA_Abort_IT+0x1ac>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d03b      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a56      	ldr	r2, [pc, #344]	@ (8001bc0 <HAL_DMA_Abort_IT+0x1b0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d036      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a55      	ldr	r2, [pc, #340]	@ (8001bc4 <HAL_DMA_Abort_IT+0x1b4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d031      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a53      	ldr	r2, [pc, #332]	@ (8001bc8 <HAL_DMA_Abort_IT+0x1b8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d02c      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a52      	ldr	r2, [pc, #328]	@ (8001bcc <HAL_DMA_Abort_IT+0x1bc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d027      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a50      	ldr	r2, [pc, #320]	@ (8001bd0 <HAL_DMA_Abort_IT+0x1c0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d022      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd4 <HAL_DMA_Abort_IT+0x1c4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d01d      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1c8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d018      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a4c      	ldr	r2, [pc, #304]	@ (8001bdc <HAL_DMA_Abort_IT+0x1cc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d013      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a4a      	ldr	r2, [pc, #296]	@ (8001be0 <HAL_DMA_Abort_IT+0x1d0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00e      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a49      	ldr	r2, [pc, #292]	@ (8001be4 <HAL_DMA_Abort_IT+0x1d4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a47      	ldr	r2, [pc, #284]	@ (8001be8 <HAL_DMA_Abort_IT+0x1d8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d004      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a46      	ldr	r2, [pc, #280]	@ (8001bec <HAL_DMA_Abort_IT+0x1dc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_DMA_Abort_IT+0xcc>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_DMA_Abort_IT+0xce>
 8001adc:	2300      	movs	r3, #0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8086 	beq.w	8001bf0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb0 <HAL_DMA_Abort_IT+0x1a0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d04a      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2e      	ldr	r2, [pc, #184]	@ (8001bb4 <HAL_DMA_Abort_IT+0x1a4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d045      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb8 <HAL_DMA_Abort_IT+0x1a8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d040      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bbc <HAL_DMA_Abort_IT+0x1ac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d03b      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a29      	ldr	r2, [pc, #164]	@ (8001bc0 <HAL_DMA_Abort_IT+0x1b0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d036      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a28      	ldr	r2, [pc, #160]	@ (8001bc4 <HAL_DMA_Abort_IT+0x1b4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d031      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a26      	ldr	r2, [pc, #152]	@ (8001bc8 <HAL_DMA_Abort_IT+0x1b8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02c      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a25      	ldr	r2, [pc, #148]	@ (8001bcc <HAL_DMA_Abort_IT+0x1bc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d027      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a23      	ldr	r2, [pc, #140]	@ (8001bd0 <HAL_DMA_Abort_IT+0x1c0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d022      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a22      	ldr	r2, [pc, #136]	@ (8001bd4 <HAL_DMA_Abort_IT+0x1c4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d01d      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a20      	ldr	r2, [pc, #128]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1c8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d018      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bdc <HAL_DMA_Abort_IT+0x1cc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d013      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1d      	ldr	r2, [pc, #116]	@ (8001be0 <HAL_DMA_Abort_IT+0x1d0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00e      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1c      	ldr	r2, [pc, #112]	@ (8001be4 <HAL_DMA_Abort_IT+0x1d4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d009      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001be8 <HAL_DMA_Abort_IT+0x1d8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d004      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a19      	ldr	r2, [pc, #100]	@ (8001bec <HAL_DMA_Abort_IT+0x1dc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d108      	bne.n	8001b9e <HAL_DMA_Abort_IT+0x18e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e178      	b.n	8001e90 <HAL_DMA_Abort_IT+0x480>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e16f      	b.n	8001e90 <HAL_DMA_Abort_IT+0x480>
 8001bb0:	40020010 	.word	0x40020010
 8001bb4:	40020028 	.word	0x40020028
 8001bb8:	40020040 	.word	0x40020040
 8001bbc:	40020058 	.word	0x40020058
 8001bc0:	40020070 	.word	0x40020070
 8001bc4:	40020088 	.word	0x40020088
 8001bc8:	400200a0 	.word	0x400200a0
 8001bcc:	400200b8 	.word	0x400200b8
 8001bd0:	40020410 	.word	0x40020410
 8001bd4:	40020428 	.word	0x40020428
 8001bd8:	40020440 	.word	0x40020440
 8001bdc:	40020458 	.word	0x40020458
 8001be0:	40020470 	.word	0x40020470
 8001be4:	40020488 	.word	0x40020488
 8001be8:	400204a0 	.word	0x400204a0
 8001bec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 020e 	bic.w	r2, r2, #14
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a6c      	ldr	r2, [pc, #432]	@ (8001db8 <HAL_DMA_Abort_IT+0x3a8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04a      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6b      	ldr	r2, [pc, #428]	@ (8001dbc <HAL_DMA_Abort_IT+0x3ac>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d045      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a69      	ldr	r2, [pc, #420]	@ (8001dc0 <HAL_DMA_Abort_IT+0x3b0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d040      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a68      	ldr	r2, [pc, #416]	@ (8001dc4 <HAL_DMA_Abort_IT+0x3b4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d03b      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a66      	ldr	r2, [pc, #408]	@ (8001dc8 <HAL_DMA_Abort_IT+0x3b8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d036      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a65      	ldr	r2, [pc, #404]	@ (8001dcc <HAL_DMA_Abort_IT+0x3bc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d031      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a63      	ldr	r2, [pc, #396]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3c0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02c      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a62      	ldr	r2, [pc, #392]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3c4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d027      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a60      	ldr	r2, [pc, #384]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3c8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d022      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a5f      	ldr	r2, [pc, #380]	@ (8001ddc <HAL_DMA_Abort_IT+0x3cc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d01d      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a5d      	ldr	r2, [pc, #372]	@ (8001de0 <HAL_DMA_Abort_IT+0x3d0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d018      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a5c      	ldr	r2, [pc, #368]	@ (8001de4 <HAL_DMA_Abort_IT+0x3d4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001de8 <HAL_DMA_Abort_IT+0x3d8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00e      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a59      	ldr	r2, [pc, #356]	@ (8001dec <HAL_DMA_Abort_IT+0x3dc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d009      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a57      	ldr	r2, [pc, #348]	@ (8001df0 <HAL_DMA_Abort_IT+0x3e0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a56      	ldr	r2, [pc, #344]	@ (8001df4 <HAL_DMA_Abort_IT+0x3e4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d108      	bne.n	8001cb2 <HAL_DMA_Abort_IT+0x2a2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e007      	b.n	8001cc2 <HAL_DMA_Abort_IT+0x2b2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8001db8 <HAL_DMA_Abort_IT+0x3a8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d072      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8001dbc <HAL_DMA_Abort_IT+0x3ac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d06d      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a39      	ldr	r2, [pc, #228]	@ (8001dc0 <HAL_DMA_Abort_IT+0x3b0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d068      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a37      	ldr	r2, [pc, #220]	@ (8001dc4 <HAL_DMA_Abort_IT+0x3b4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d063      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a36      	ldr	r2, [pc, #216]	@ (8001dc8 <HAL_DMA_Abort_IT+0x3b8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d05e      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a34      	ldr	r2, [pc, #208]	@ (8001dcc <HAL_DMA_Abort_IT+0x3bc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d059      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a33      	ldr	r2, [pc, #204]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3c0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d054      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a31      	ldr	r2, [pc, #196]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3c4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d04f      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a30      	ldr	r2, [pc, #192]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3c8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d04a      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2e      	ldr	r2, [pc, #184]	@ (8001ddc <HAL_DMA_Abort_IT+0x3cc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d045      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001de0 <HAL_DMA_Abort_IT+0x3d0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d040      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2b      	ldr	r2, [pc, #172]	@ (8001de4 <HAL_DMA_Abort_IT+0x3d4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d03b      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001de8 <HAL_DMA_Abort_IT+0x3d8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d036      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a28      	ldr	r2, [pc, #160]	@ (8001dec <HAL_DMA_Abort_IT+0x3dc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d031      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a27      	ldr	r2, [pc, #156]	@ (8001df0 <HAL_DMA_Abort_IT+0x3e0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d02c      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a25      	ldr	r2, [pc, #148]	@ (8001df4 <HAL_DMA_Abort_IT+0x3e4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d027      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a24      	ldr	r2, [pc, #144]	@ (8001df8 <HAL_DMA_Abort_IT+0x3e8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d022      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a22      	ldr	r2, [pc, #136]	@ (8001dfc <HAL_DMA_Abort_IT+0x3ec>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01d      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <HAL_DMA_Abort_IT+0x3f0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d018      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	@ (8001e04 <HAL_DMA_Abort_IT+0x3f4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e08 <HAL_DMA_Abort_IT+0x3f8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00e      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1c      	ldr	r2, [pc, #112]	@ (8001e0c <HAL_DMA_Abort_IT+0x3fc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d009      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e10 <HAL_DMA_Abort_IT+0x400>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d004      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a19      	ldr	r2, [pc, #100]	@ (8001e14 <HAL_DMA_Abort_IT+0x404>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d132      	bne.n	8001e18 <HAL_DMA_Abort_IT+0x408>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e031      	b.n	8001e1a <HAL_DMA_Abort_IT+0x40a>
 8001db6:	bf00      	nop
 8001db8:	40020010 	.word	0x40020010
 8001dbc:	40020028 	.word	0x40020028
 8001dc0:	40020040 	.word	0x40020040
 8001dc4:	40020058 	.word	0x40020058
 8001dc8:	40020070 	.word	0x40020070
 8001dcc:	40020088 	.word	0x40020088
 8001dd0:	400200a0 	.word	0x400200a0
 8001dd4:	400200b8 	.word	0x400200b8
 8001dd8:	40020410 	.word	0x40020410
 8001ddc:	40020428 	.word	0x40020428
 8001de0:	40020440 	.word	0x40020440
 8001de4:	40020458 	.word	0x40020458
 8001de8:	40020470 	.word	0x40020470
 8001dec:	40020488 	.word	0x40020488
 8001df0:	400204a0 	.word	0x400204a0
 8001df4:	400204b8 	.word	0x400204b8
 8001df8:	58025408 	.word	0x58025408
 8001dfc:	5802541c 	.word	0x5802541c
 8001e00:	58025430 	.word	0x58025430
 8001e04:	58025444 	.word	0x58025444
 8001e08:	58025458 	.word	0x58025458
 8001e0c:	5802546c 	.word	0x5802546c
 8001e10:	58025480 	.word	0x58025480
 8001e14:	58025494 	.word	0x58025494
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d028      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00c      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001eaa:	4b89      	ldr	r3, [pc, #548]	@ (80020d0 <HAL_GPIO_Init+0x234>)
 8001eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eae:	e194      	b.n	80021da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8186 	beq.w	80021d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x44>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d017      	beq.n	8001f7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d123      	bne.n	8001fd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	69b9      	ldr	r1, [r7, #24]
 8001fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80e0 	beq.w	80021d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002014:	4b2f      	ldr	r3, [pc, #188]	@ (80020d4 <HAL_GPIO_Init+0x238>)
 8002016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800201a:	4a2e      	ldr	r2, [pc, #184]	@ (80020d4 <HAL_GPIO_Init+0x238>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002024:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <HAL_GPIO_Init+0x238>)
 8002026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002032:	4a29      	ldr	r2, [pc, #164]	@ (80020d8 <HAL_GPIO_Init+0x23c>)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a20      	ldr	r2, [pc, #128]	@ (80020dc <HAL_GPIO_Init+0x240>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d052      	beq.n	8002104 <HAL_GPIO_Init+0x268>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1f      	ldr	r2, [pc, #124]	@ (80020e0 <HAL_GPIO_Init+0x244>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d031      	beq.n	80020ca <HAL_GPIO_Init+0x22e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1e      	ldr	r2, [pc, #120]	@ (80020e4 <HAL_GPIO_Init+0x248>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <HAL_GPIO_Init+0x22a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a1d      	ldr	r2, [pc, #116]	@ (80020e8 <HAL_GPIO_Init+0x24c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d025      	beq.n	80020c2 <HAL_GPIO_Init+0x226>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a1c      	ldr	r2, [pc, #112]	@ (80020ec <HAL_GPIO_Init+0x250>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x222>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1b      	ldr	r2, [pc, #108]	@ (80020f0 <HAL_GPIO_Init+0x254>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x21e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1a      	ldr	r2, [pc, #104]	@ (80020f4 <HAL_GPIO_Init+0x258>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x21a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a19      	ldr	r2, [pc, #100]	@ (80020f8 <HAL_GPIO_Init+0x25c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x216>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <HAL_GPIO_Init+0x260>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x212>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <HAL_GPIO_Init+0x264>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x20e>
 80020a6:	2309      	movs	r3, #9
 80020a8:	e02d      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020aa:	230a      	movs	r3, #10
 80020ac:	e02b      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020ae:	2308      	movs	r3, #8
 80020b0:	e029      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020b2:	2307      	movs	r3, #7
 80020b4:	e027      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020b6:	2306      	movs	r3, #6
 80020b8:	e025      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e023      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020be:	2304      	movs	r3, #4
 80020c0:	e021      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020c2:	2303      	movs	r3, #3
 80020c4:	e01f      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e01d      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e01b      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020ce:	bf00      	nop
 80020d0:	58000080 	.word	0x58000080
 80020d4:	58024400 	.word	0x58024400
 80020d8:	58000400 	.word	0x58000400
 80020dc:	58020000 	.word	0x58020000
 80020e0:	58020400 	.word	0x58020400
 80020e4:	58020800 	.word	0x58020800
 80020e8:	58020c00 	.word	0x58020c00
 80020ec:	58021000 	.word	0x58021000
 80020f0:	58021400 	.word	0x58021400
 80020f4:	58021800 	.word	0x58021800
 80020f8:	58021c00 	.word	0x58021c00
 80020fc:	58022000 	.word	0x58022000
 8002100:	58022400 	.word	0x58022400
 8002104:	2300      	movs	r3, #0
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	f002 0203 	and.w	r2, r2, #3
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	4093      	lsls	r3, r2
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002116:	4938      	ldr	r1, [pc, #224]	@ (80021f8 <HAL_GPIO_Init+0x35c>)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800214a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002178:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	3301      	adds	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f47f ae63 	bne.w	8001eb0 <HAL_GPIO_Init+0x14>
  }
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	3724      	adds	r7, #36	@ 0x24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	58000400 	.word	0x58000400

080021fc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002204:	4a08      	ldr	r2, [pc, #32]	@ (8002228 <HAL_HSEM_FastTake+0x2c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3320      	adds	r3, #32
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	4a07      	ldr	r2, [pc, #28]	@ (800222c <HAL_HSEM_FastTake+0x30>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	58026400 	.word	0x58026400
 800222c:	80000300 	.word	0x80000300

08002230 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800223a:	4906      	ldr	r1, [pc, #24]	@ (8002254 <HAL_HSEM_Release+0x24>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	58026400 	.word	0x58026400

08002258 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e070      	b.n	800234c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fcd8 	bl	8000c34 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80022ba:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022da:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80022ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <HAL_JPEG_Init+0xfc>)
 80022f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a18      	ldr	r2, [pc, #96]	@ (8002358 <HAL_JPEG_Init+0x100>)
 80022f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fb37 	bl	8002978 <JPEG_Set_HuffEnc_Mem>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d004      	beq.n	800231a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e018      	b.n	800234c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002328:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	08009b14 	.word	0x08009b14
 8002358:	08009b54 	.word	0x08009b54

0800235c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800235c:	b480      	push	{r7}
 800235e:	b08b      	sub	sp, #44	@ 0x2c
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e020      	b.n	80023b6 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800237e:	6a3a      	ldr	r2, [r7, #32]
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	4413      	add	r3, r2
 8002384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002388:	d90f      	bls.n	80023aa <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e055      	b.n	800243a <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	440b      	add	r3, r1
 8002398:	3201      	adds	r2, #1
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]
      p++;
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	3301      	adds	r3, #1
 80023a2:	623b      	str	r3, [r7, #32]
      i--;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	3b01      	subs	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ee      	bne.n	800238e <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	3301      	adds	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b0f      	cmp	r3, #15
 80023ba:	d9db      	bls.n	8002374 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	4413      	add	r3, r2
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	617b      	str	r3, [r7, #20]
  p = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80023da:	e027      	b.n	800242c <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	601a      	str	r2, [r3, #0]
      p++;
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	3301      	adds	r3, #1
 80023ec:	623b      	str	r3, [r7, #32]
      code++;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3301      	adds	r3, #1
 80023f2:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	4413      	add	r3, r2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	4293      	cmp	r3, r2
 8002402:	d0eb      	beq.n	80023dc <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b1f      	cmp	r3, #31
 8002408:	d901      	bls.n	800240e <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e015      	b.n	800243a <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800240e:	2201      	movs	r2, #1
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	429a      	cmp	r2, r3
 800241a:	d301      	bcc.n	8002420 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e00c      	b.n	800243a <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	61bb      	str	r3, [r7, #24]
    si++;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	4413      	add	r3, r2
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1dd      	bne.n	80023f4 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	372c      	adds	r7, #44	@ 0x2c
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800244c:	af00      	add	r7, sp, #0
 800244e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002452:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002456:	6018      	str	r0, [r3, #0]
 8002458:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800245c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002460:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002462:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002466:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	f107 0308 	add.w	r3, r7, #8
 8002470:	f107 020c 	add.w	r2, r7, #12
 8002474:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8002478:	f7ff ff70 	bl	800235c <JPEG_Bits_To_SizeCodes>
 800247c:	4603      	mov	r3, r0
 800247e:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8002482:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800248a:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800248e:	e075      	b.n	800257c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8002496:	e067      	b.n	8002568 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8002498:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800249c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80024a6:	4413      	add	r3, r2
 80024a8:	3310      	adds	r3, #16
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80024b0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80024b8:	23a0      	movs	r3, #160	@ 0xa0
 80024ba:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80024be:	e021      	b.n	8002504 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80024c0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80024c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80024c6:	d103      	bne.n	80024d0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80024c8:	23a1      	movs	r3, #161	@ 0xa1
 80024ca:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80024ce:	e019      	b.n	8002504 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80024d0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80024de:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80024ea:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	461a      	mov	r2, r3
 80024f8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80024fc:	4413      	add	r3, r2
 80024fe:	3b01      	subs	r3, #1
 8002500:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002504:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002508:	2ba1      	cmp	r3, #161	@ 0xa1
 800250a:	d901      	bls.n	8002510 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800250c:	2301      	movs	r3, #1
 800250e:	e035      	b.n	800257c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002510:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002514:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002518:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800251c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002520:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002524:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800252e:	3328      	adds	r3, #40	@ 0x28
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002536:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800253a:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800253e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	3b01      	subs	r3, #1
 8002548:	b2d9      	uxtb	r1, r3
 800254a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800254e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002558:	4413      	add	r3, r2
 800255a:	460a      	mov	r2, r1
 800255c:	701a      	strb	r2, [r3, #0]
      k++;
 800255e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002562:	3301      	adds	r3, #1
 8002564:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8002568:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800256c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8002576:	429a      	cmp	r2, r3
 8002578:	d38e      	bcc.n	8002498 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800258c:	af00      	add	r7, sp, #0
 800258e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002592:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002596:	6018      	str	r0, [r3, #0]
 8002598:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800259c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80025a0:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80025a2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80025a6:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80025b0:	f107 0208 	add.w	r2, r7, #8
 80025b4:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 80025b8:	f7ff fed0 	bl	800235c <JPEG_Bits_To_SizeCodes>
 80025bc:	4603      	mov	r3, r0
 80025be:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 80025c2:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80025ca:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80025ce:	e048      	b.n	8002662 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 80025d6:	e03d      	b.n	8002654 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80025d8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80025dc:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80025e6:	4413      	add	r3, r2
 80025e8:	3310      	adds	r3, #16
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80025f0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80025f4:	2b0b      	cmp	r3, #11
 80025f6:	d901      	bls.n	80025fc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80025fc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002600:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8002604:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002608:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800260c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002610:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800261a:	3302      	adds	r3, #2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002622:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002626:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800262a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800262e:	4413      	add	r3, r2
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	3b01      	subs	r3, #1
 8002634:	b2d9      	uxtb	r1, r3
 8002636:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800263a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002644:	4413      	add	r3, r2
 8002646:	460a      	mov	r2, r1
 8002648:	701a      	strb	r2, [r3, #0]
      k++;
 800264a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800264e:	3301      	adds	r3, #1
 8002650:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8002654:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8002658:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800265c:	429a      	cmp	r2, r3
 800265e:	d3bb      	bcc.n	80025d8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b09a      	sub	sp, #104	@ 0x68
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	429a      	cmp	r2, r3
 8002684:	d106      	bne.n	8002694 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800268e:	3318      	adds	r3, #24
 8002690:	663b      	str	r3, [r7, #96]	@ 0x60
 8002692:	e00f      	b.n	80026b4 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d106      	bne.n	80026b0 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80026aa:	3318      	adds	r3, #24
 80026ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80026ae:	e001      	b.n	80026b4 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e059      	b.n	8002768 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d055      	beq.n	8002766 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	68b8      	ldr	r0, [r7, #8]
 80026c2:	f7ff ff60 	bl	8002586 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 80026cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 80026d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80026d8:	e046      	b.n	8002768 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 80026da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80026de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e0:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80026e4:	601a      	str	r2, [r3, #0]
    addressDef++;
 80026e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e8:	3304      	adds	r3, #4
 80026ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80026ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ee:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80026f2:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 80026f4:	230c      	movs	r3, #12
 80026f6:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 80026f8:	e032      	b.n	8002760 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 80026fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026fc:	3b01      	subs	r3, #1
 80026fe:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8002700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002702:	3b04      	subs	r3, #4
 8002704:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002706:	f107 0214 	add.w	r2, r7, #20
 800270a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800270c:	4413      	add	r3, r2
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002716:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002718:	3302      	adds	r3, #2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	3368      	adds	r3, #104	@ 0x68
 800271e:	443b      	add	r3, r7
 8002720:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800272a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800272c:	3b01      	subs	r3, #1
 800272e:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002730:	f107 0214 	add.w	r2, r7, #20
 8002734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002742:	3302      	adds	r3, #2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	3368      	adds	r3, #104	@ 0x68
 8002748:	443b      	add	r3, r7
 800274a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	4313      	orrs	r3, r2
 8002752:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002756:	041a      	lsls	r2, r3, #16
 8002758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800275a:	431a      	orrs	r2, r3
 800275c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800275e:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002762:	2b01      	cmp	r3, #1
 8002764:	d8c9      	bhi.n	80026fa <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3768      	adds	r7, #104	@ 0x68
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8002776:	af00      	add	r7, sp, #0
 8002778:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800277c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002780:	6018      	str	r0, [r3, #0]
 8002782:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002786:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800278a:	6019      	str	r1, [r3, #0]
 800278c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002790:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002794:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8002796:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800279a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80027aa:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d10c      	bne.n	80027ce <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80027b4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80027b8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80027c8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80027cc:	e01d      	b.n	800280a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80027ce:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80027d2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80027de:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80027e2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d10c      	bne.n	8002806 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80027ec:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80027f0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80027fc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002800:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002804:	e001      	b.n	800280a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0a8      	b.n	800295c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800280a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800280e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80a0 	beq.w	800295a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800281a:	f107 0214 	add.w	r2, r7, #20
 800281e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002822:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002826:	4611      	mov	r1, r2
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	f7ff fe0c 	bl	8002446 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800282e:	4603      	mov	r3, r0
 8002830:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8002834:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800283c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002840:	e08c      	b.n	800295c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8002842:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002846:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002850:	e00e      	b.n	8002870 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8002852:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002856:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800285a:	601a      	str	r2, [r3, #0]
      addressDef++;
 800285c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002860:	3304      	adds	r3, #4
 8002862:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8002866:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800286a:	3301      	adds	r3, #1
 800286c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002870:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002874:	2b02      	cmp	r3, #2
 8002876:	d9ec      	bls.n	8002852 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8002878:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800287c:	4a3a      	ldr	r2, [pc, #232]	@ (8002968 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800287e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002880:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002884:	3304      	adds	r3, #4
 8002886:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800288a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800288e:	4a37      	ldr	r2, [pc, #220]	@ (800296c <JPEG_Set_HuffAC_Mem+0x1fc>)
 8002890:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002892:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002896:	3304      	adds	r3, #4
 8002898:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800289c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80028a0:	4a33      	ldr	r2, [pc, #204]	@ (8002970 <JPEG_Set_HuffAC_Mem+0x200>)
 80028a2:	601a      	str	r2, [r3, #0]
    addressDef++;
 80028a4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80028a8:	3304      	adds	r3, #4
 80028aa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 80028ae:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80028b2:	4a30      	ldr	r2, [pc, #192]	@ (8002974 <JPEG_Set_HuffAC_Mem+0x204>)
 80028b4:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80028b6:	23a2      	movs	r3, #162	@ 0xa2
 80028b8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 80028bc:	e049      	b.n	8002952 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 80028be:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 80028c8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80028cc:	3b04      	subs	r3, #4
 80028ce:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80028d2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80028d6:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80028da:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80028de:	4413      	add	r3, r2
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80028e8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80028ec:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80028f0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80028f4:	3328      	adds	r3, #40	@ 0x28
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8002904:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002908:	3b01      	subs	r3, #1
 800290a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800290e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002912:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002916:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800291a:	4413      	add	r3, r2
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002924:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002928:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800292c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002930:	3328      	adds	r3, #40	@ 0x28
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002940:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002944:	041a      	lsls	r2, r3, #16
 8002946:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800294a:	431a      	orrs	r2, r3
 800294c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002950:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002952:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002956:	2b01      	cmp	r3, #1
 8002958:	d8b1      	bhi.n	80028be <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	0fd10fd0 	.word	0x0fd10fd0
 800296c:	0fd30fd2 	.word	0x0fd30fd2
 8002970:	0fd50fd4 	.word	0x0fd50fd4
 8002974:	0fd70fd6 	.word	0x0fd70fd6

08002978 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f84d 	bl	8002a20 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800298e:	461a      	mov	r2, r3
 8002990:	491f      	ldr	r1, [pc, #124]	@ (8002a10 <JPEG_Set_HuffEnc_Mem+0x98>)
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff feec 	bl	8002770 <JPEG_Set_HuffAC_Mem>
 8002998:	4603      	mov	r3, r0
 800299a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	e030      	b.n	8002a08 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80029ae:	461a      	mov	r2, r3
 80029b0:	4918      	ldr	r1, [pc, #96]	@ (8002a14 <JPEG_Set_HuffEnc_Mem+0x9c>)
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fedc 	bl	8002770 <JPEG_Set_HuffAC_Mem>
 80029b8:	4603      	mov	r3, r0
 80029ba:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	e020      	b.n	8002a08 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80029ce:	461a      	mov	r2, r3
 80029d0:	4911      	ldr	r1, [pc, #68]	@ (8002a18 <JPEG_Set_HuffEnc_Mem+0xa0>)
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff fe4a 	bl	800266c <JPEG_Set_HuffDC_Mem>
 80029d8:	4603      	mov	r3, r0
 80029da:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	e010      	b.n	8002a08 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80029ee:	461a      	mov	r2, r3
 80029f0:	490a      	ldr	r1, [pc, #40]	@ (8002a1c <JPEG_Set_HuffEnc_Mem+0xa4>)
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff fe3a 	bl	800266c <JPEG_Set_HuffDC_Mem>
 80029f8:	4603      	mov	r3, r0
 80029fa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	e000      	b.n	8002a08 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	080099ac 	.word	0x080099ac
 8002a14:	08009a60 	.word	0x08009a60
 8002a18:	08009974 	.word	0x08009974
 8002a1c:	08009990 	.word	0x08009990

08002a20 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b08b      	sub	sp, #44	@ 0x2c
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8002a28:	4b80      	ldr	r3, [pc, #512]	@ (8002c2c <JPEG_Set_Huff_DHTMem+0x20c>)
 8002a2a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8002a2c:	4b80      	ldr	r3, [pc, #512]	@ (8002c30 <JPEG_Set_Huff_DHTMem+0x210>)
 8002a2e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8002a30:	4b80      	ldr	r3, [pc, #512]	@ (8002c34 <JPEG_Set_Huff_DHTMem+0x214>)
 8002a32:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8002a34:	4b80      	ldr	r3, [pc, #512]	@ (8002c38 <JPEG_Set_Huff_DHTMem+0x218>)
 8002a36:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a40:	330c      	adds	r3, #12
 8002a42:	623b      	str	r3, [r7, #32]
  index = 16;
 8002a44:	2310      	movs	r3, #16
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a48:	e01d      	b.n	8002a86 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	3b02      	subs	r3, #2
 8002a58:	6979      	ldr	r1, [r7, #20]
 8002a5a:	5ccb      	ldrb	r3, [r1, r3]
 8002a5c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002a5e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	3b03      	subs	r3, #3
 8002a64:	6979      	ldr	r1, [r7, #20]
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002a6a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6e:	3a04      	subs	r2, #4
 8002a70:	6979      	ldr	r1, [r7, #20]
 8002a72:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002a74:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	601a      	str	r2, [r3, #0]
    address--;
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	3b04      	subs	r3, #4
 8002a7e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	3b04      	subs	r3, #4
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d8de      	bhi.n	8002a4a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a94:	3318      	adds	r3, #24
 8002a96:	623b      	str	r3, [r7, #32]
  index = 12;
 8002a98:	230c      	movs	r3, #12
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a9c:	e021      	b.n	8002ae2 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	7c1b      	ldrb	r3, [r3, #16]
 8002aa8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	3b02      	subs	r3, #2
 8002aae:	6979      	ldr	r1, [r7, #20]
 8002ab0:	440b      	add	r3, r1
 8002ab2:	7c1b      	ldrb	r3, [r3, #16]
 8002ab4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002ab6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	3b03      	subs	r3, #3
 8002abc:	6979      	ldr	r1, [r7, #20]
 8002abe:	440b      	add	r3, r1
 8002ac0:	7c1b      	ldrb	r3, [r3, #16]
 8002ac2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002ac4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac8:	3a04      	subs	r2, #4
 8002aca:	6979      	ldr	r1, [r7, #20]
 8002acc:	440a      	add	r2, r1
 8002ace:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002ad0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	601a      	str	r2, [r3, #0]
    address--;
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	3b04      	subs	r3, #4
 8002ada:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d8da      	bhi.n	8002a9e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002af0:	3328      	adds	r3, #40	@ 0x28
 8002af2:	623b      	str	r3, [r7, #32]
  index = 16;
 8002af4:	2310      	movs	r3, #16
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002af8:	e01d      	b.n	8002b36 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	3b01      	subs	r3, #1
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	3b02      	subs	r3, #2
 8002b08:	69f9      	ldr	r1, [r7, #28]
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002b0e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	3b03      	subs	r3, #3
 8002b14:	69f9      	ldr	r1, [r7, #28]
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002b1a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8002b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b1e:	3a04      	subs	r2, #4
 8002b20:	69f9      	ldr	r1, [r7, #28]
 8002b22:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002b24:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	601a      	str	r2, [r3, #0]
    address--;
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	3b04      	subs	r3, #4
 8002b2e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	3b04      	subs	r3, #4
 8002b34:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d8de      	bhi.n	8002afa <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002b44:	33cc      	adds	r3, #204	@ 0xcc
 8002b46:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c3c <JPEG_Set_Huff_DHTMem+0x21c>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	3b04      	subs	r3, #4
 8002b72:	623b      	str	r3, [r7, #32]
  index = 160;
 8002b74:	23a0      	movs	r3, #160	@ 0xa0
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002b78:	e021      	b.n	8002bbe <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	4413      	add	r3, r2
 8002b82:	7c1b      	ldrb	r3, [r3, #16]
 8002b84:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	3b02      	subs	r3, #2
 8002b8a:	69f9      	ldr	r1, [r7, #28]
 8002b8c:	440b      	add	r3, r1
 8002b8e:	7c1b      	ldrb	r3, [r3, #16]
 8002b90:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002b92:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	3b03      	subs	r3, #3
 8002b98:	69f9      	ldr	r1, [r7, #28]
 8002b9a:	440b      	add	r3, r1
 8002b9c:	7c1b      	ldrb	r3, [r3, #16]
 8002b9e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002ba0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba4:	3a04      	subs	r2, #4
 8002ba6:	69f9      	ldr	r1, [r7, #28]
 8002ba8:	440a      	add	r2, r1
 8002baa:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002bac:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	601a      	str	r2, [r3, #0]
    address--;
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	3b04      	subs	r3, #4
 8002bb6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d8da      	bhi.n	8002b7a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002bcc:	33cc      	adds	r3, #204	@ 0xcc
 8002bce:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	785b      	ldrb	r3, [r3, #1]
 8002bdc:	061a      	lsls	r2, r3, #24
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	041b      	lsls	r3, r3, #16
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002bfa:	33dc      	adds	r3, #220	@ 0xdc
 8002bfc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <JPEG_Set_Huff_DHTMem+0x21c>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	7bdb      	ldrb	r3, [r3, #15]
 8002c0c:	021a      	lsls	r2, r3, #8
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	7b92      	ldrb	r2, [r2, #14]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	3b04      	subs	r3, #4
 8002c24:	623b      	str	r3, [r7, #32]
  index = 12;
 8002c26:	230c      	movs	r3, #12
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002c2a:	e027      	b.n	8002c7c <JPEG_Set_Huff_DHTMem+0x25c>
 8002c2c:	080099ac 	.word	0x080099ac
 8002c30:	08009a60 	.word	0x08009a60
 8002c34:	08009974 	.word	0x08009974
 8002c38:	08009990 	.word	0x08009990
 8002c3c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	3301      	adds	r3, #1
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002c4a:	6939      	ldr	r1, [r7, #16]
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	440b      	add	r3, r1
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002c54:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	6939      	ldr	r1, [r7, #16]
 8002c5c:	5ccb      	ldrb	r3, [r1, r3]
 8002c5e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002c60:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8002c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c64:	3a02      	subs	r2, #2
 8002c66:	6939      	ldr	r1, [r7, #16]
 8002c68:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002c6a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	601a      	str	r2, [r3, #0]
    address--;
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	3b04      	subs	r3, #4
 8002c74:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	3b04      	subs	r3, #4
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d8de      	bhi.n	8002c40 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002c8a:	33dc      	adds	r3, #220	@ 0xdc
 8002c8c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	7c5b      	ldrb	r3, [r3, #17]
 8002c9a:	061a      	lsls	r2, r3, #24
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	7c1b      	ldrb	r3, [r3, #16]
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002cb8:	33e8      	adds	r3, #232	@ 0xe8
 8002cba:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b6d      	ldr	r3, [pc, #436]	@ (8002e78 <JPEG_Set_Huff_DHTMem+0x458>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	7edb      	ldrb	r3, [r3, #27]
 8002cca:	021a      	lsls	r2, r3, #8
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	7e92      	ldrb	r2, [r2, #26]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	3b04      	subs	r3, #4
 8002ce2:	623b      	str	r3, [r7, #32]
  index = 8;
 8002ce4:	2308      	movs	r3, #8
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ce8:	e021      	b.n	8002d2e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	3301      	adds	r3, #1
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	7c1b      	ldrb	r3, [r3, #16]
 8002cf4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002cf6:	6939      	ldr	r1, [r7, #16]
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3310      	adds	r3, #16
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002d02:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	3b01      	subs	r3, #1
 8002d08:	6939      	ldr	r1, [r7, #16]
 8002d0a:	440b      	add	r3, r1
 8002d0c:	7c1b      	ldrb	r3, [r3, #16]
 8002d0e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002d10:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8002d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d14:	3a02      	subs	r2, #2
 8002d16:	6939      	ldr	r1, [r7, #16]
 8002d18:	440a      	add	r2, r1
 8002d1a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002d1c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	601a      	str	r2, [r3, #0]
    address--;
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	3b04      	subs	r3, #4
 8002d26:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	3b04      	subs	r3, #4
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d8da      	bhi.n	8002cea <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002d3c:	33e8      	adds	r3, #232	@ 0xe8
 8002d3e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	061a      	lsls	r2, r3, #24
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002d6a:	33f8      	adds	r3, #248	@ 0xf8
 8002d6c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b41      	ldr	r3, [pc, #260]	@ (8002e78 <JPEG_Set_Huff_DHTMem+0x458>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	7bdb      	ldrb	r3, [r3, #15]
 8002d7c:	021a      	lsls	r2, r3, #8
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	7b92      	ldrb	r2, [r2, #14]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	3b04      	subs	r3, #4
 8002d94:	623b      	str	r3, [r7, #32]
  index = 12;
 8002d96:	230c      	movs	r3, #12
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002d9a:	e01d      	b.n	8002dd8 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	3301      	adds	r3, #1
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
 8002da4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	440b      	add	r3, r1
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002db0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	3b01      	subs	r3, #1
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	5ccb      	ldrb	r3, [r1, r3]
 8002dba:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002dbc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc0:	3a02      	subs	r2, #2
 8002dc2:	69b9      	ldr	r1, [r7, #24]
 8002dc4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002dc6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	601a      	str	r2, [r3, #0]
    address--;
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	3b04      	subs	r3, #4
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d8de      	bhi.n	8002d9c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002de6:	33f8      	adds	r3, #248	@ 0xf8
 8002de8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	7c5b      	ldrb	r3, [r3, #17]
 8002df6:	061a      	lsls	r2, r3, #24
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	7c1b      	ldrb	r3, [r3, #16]
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002e14:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002e18:	623b      	str	r3, [r7, #32]
  index = 160;
 8002e1a:	23a0      	movs	r3, #160	@ 0xa0
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002e1e:	e021      	b.n	8002e64 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	3301      	adds	r3, #1
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4413      	add	r3, r2
 8002e28:	7c1b      	ldrb	r3, [r3, #16]
 8002e2a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002e2c:	69b9      	ldr	r1, [r7, #24]
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	440b      	add	r3, r1
 8002e32:	3310      	adds	r3, #16
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002e38:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	69b9      	ldr	r1, [r7, #24]
 8002e40:	440b      	add	r3, r1
 8002e42:	7c1b      	ldrb	r3, [r3, #16]
 8002e44:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002e46:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4a:	3a02      	subs	r2, #2
 8002e4c:	69b9      	ldr	r1, [r7, #24]
 8002e4e:	440a      	add	r2, r1
 8002e50:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002e52:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	601a      	str	r2, [r3, #0]
    address--;
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	3b04      	subs	r3, #4
 8002e5c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	3b04      	subs	r3, #4
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d8da      	bhi.n	8002e20 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	372c      	adds	r7, #44	@ 0x2c
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	ffff0000 	.word	0xffff0000

08002e7c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e84:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	2b06      	cmp	r3, #6
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e90:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e040      	b.n	8002f24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e03e      	b.n	8002f24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ea6:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002eae:	491f      	ldr	r1, [pc, #124]	@ (8002f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002eb6:	f7fe f8ed 	bl	8001094 <HAL_GetTick>
 8002eba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ebc:	e009      	b.n	8002ed2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ebe:	f7fe f8e9 	bl	8001094 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ecc:	d901      	bls.n	8002ed2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e028      	b.n	8002f24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ed2:	4b16      	ldr	r3, [pc, #88]	@ (8002f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ede:	d1ee      	bne.n	8002ebe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b1e      	cmp	r3, #30
 8002ee4:	d008      	beq.n	8002ef8 <HAL_PWREx_ConfigSupply+0x7c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002eea:	d005      	beq.n	8002ef8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b1d      	cmp	r3, #29
 8002ef0:	d002      	beq.n	8002ef8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b2d      	cmp	r3, #45	@ 0x2d
 8002ef6:	d114      	bne.n	8002f22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ef8:	f7fe f8cc 	bl	8001094 <HAL_GetTick>
 8002efc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002efe:	e009      	b.n	8002f14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f00:	f7fe f8c8 	bl	8001094 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f0e:	d901      	bls.n	8002f14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e007      	b.n	8002f24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f20:	d1ee      	bne.n	8002f00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	58024800 	.word	0x58024800

08002f30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	@ 0x30
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f000 bc48 	b.w	80037d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8088 	beq.w	8003062 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f52:	4b99      	ldr	r3, [pc, #612]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f5c:	4b96      	ldr	r3, [pc, #600]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d007      	beq.n	8002f78 <HAL_RCC_OscConfig+0x48>
 8002f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6a:	2b18      	cmp	r3, #24
 8002f6c:	d111      	bne.n	8002f92 <HAL_RCC_OscConfig+0x62>
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d10c      	bne.n	8002f92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	4b8f      	ldr	r3, [pc, #572]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d06d      	beq.n	8003060 <HAL_RCC_OscConfig+0x130>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d169      	bne.n	8003060 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f000 bc21 	b.w	80037d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x7a>
 8002f9c:	4b86      	ldr	r3, [pc, #536]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a85      	ldr	r2, [pc, #532]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e02e      	b.n	8003008 <HAL_RCC_OscConfig+0xd8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x9c>
 8002fb2:	4b81      	ldr	r3, [pc, #516]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a80      	ldr	r2, [pc, #512]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002fb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b7e      	ldr	r3, [pc, #504]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a7d      	ldr	r2, [pc, #500]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002fc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e01d      	b.n	8003008 <HAL_RCC_OscConfig+0xd8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0xc0>
 8002fd6:	4b78      	ldr	r3, [pc, #480]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a77      	ldr	r2, [pc, #476]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002fdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b75      	ldr	r3, [pc, #468]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a74      	ldr	r2, [pc, #464]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e00b      	b.n	8003008 <HAL_RCC_OscConfig+0xd8>
 8002ff0:	4b71      	ldr	r3, [pc, #452]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a70      	ldr	r2, [pc, #448]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b6e      	ldr	r3, [pc, #440]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6d      	ldr	r2, [pc, #436]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d013      	beq.n	8003038 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe f840 	bl	8001094 <HAL_GetTick>
 8003014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003018:	f7fe f83c 	bl	8001094 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	@ 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e3d4      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800302a:	4b63      	ldr	r3, [pc, #396]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0xe8>
 8003036:	e014      	b.n	8003062 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe f82c 	bl	8001094 <HAL_GetTick>
 800303c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003040:	f7fe f828 	bl	8001094 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	@ 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e3c0      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003052:	4b59      	ldr	r3, [pc, #356]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x110>
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80ca 	beq.w	8003204 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003070:	4b51      	ldr	r3, [pc, #324]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003078:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800307a:	4b4f      	ldr	r3, [pc, #316]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <HAL_RCC_OscConfig+0x166>
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	2b18      	cmp	r3, #24
 800308a:	d156      	bne.n	800313a <HAL_RCC_OscConfig+0x20a>
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d151      	bne.n	800313a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003096:	4b48      	ldr	r3, [pc, #288]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_RCC_OscConfig+0x17e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e392      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030ae:	4b42      	ldr	r3, [pc, #264]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0219 	bic.w	r2, r3, #25
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	493f      	ldr	r1, [pc, #252]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fd ffe8 	bl	8001094 <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fd ffe4 	bl	8001094 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e37c      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030da:	4b37      	ldr	r3, [pc, #220]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e6:	f7fd ffe1 	bl	80010ac <HAL_GetREVID>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d817      	bhi.n	8003124 <HAL_RCC_OscConfig+0x1f4>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b40      	cmp	r3, #64	@ 0x40
 80030fa:	d108      	bne.n	800310e <HAL_RCC_OscConfig+0x1de>
 80030fc:	4b2e      	ldr	r3, [pc, #184]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003104:	4a2c      	ldr	r2, [pc, #176]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800310c:	e07a      	b.n	8003204 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310e:	4b2a      	ldr	r3, [pc, #168]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	031b      	lsls	r3, r3, #12
 800311c:	4926      	ldr	r1, [pc, #152]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003122:	e06f      	b.n	8003204 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	4921      	ldr	r1, [pc, #132]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003138:	e064      	b.n	8003204 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d047      	beq.n	80031d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003142:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 0219 	bic.w	r2, r3, #25
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	491a      	ldr	r1, [pc, #104]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fd ff9e 	bl	8001094 <HAL_GetTick>
 8003158:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315c:	f7fd ff9a 	bl	8001094 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e332      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800316e:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	f7fd ff97 	bl	80010ac <HAL_GetREVID>
 800317e:	4603      	mov	r3, r0
 8003180:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003184:	4293      	cmp	r3, r2
 8003186:	d819      	bhi.n	80031bc <HAL_RCC_OscConfig+0x28c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b40      	cmp	r3, #64	@ 0x40
 800318e:	d108      	bne.n	80031a2 <HAL_RCC_OscConfig+0x272>
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003198:	4a07      	ldr	r2, [pc, #28]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 800319a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800319e:	6053      	str	r3, [r2, #4]
 80031a0:	e030      	b.n	8003204 <HAL_RCC_OscConfig+0x2d4>
 80031a2:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	031b      	lsls	r3, r3, #12
 80031b0:	4901      	ldr	r1, [pc, #4]	@ (80031b8 <HAL_RCC_OscConfig+0x288>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]
 80031b6:	e025      	b.n	8003204 <HAL_RCC_OscConfig+0x2d4>
 80031b8:	58024400 	.word	0x58024400
 80031bc:	4b9a      	ldr	r3, [pc, #616]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	4997      	ldr	r1, [pc, #604]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
 80031d0:	e018      	b.n	8003204 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b95      	ldr	r3, [pc, #596]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a94      	ldr	r2, [pc, #592]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fd ff59 	bl	8001094 <HAL_GetTick>
 80031e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e6:	f7fd ff55 	bl	8001094 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e2ed      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031f8:	4b8b      	ldr	r3, [pc, #556]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80a9 	beq.w	8003364 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003212:	4b85      	ldr	r3, [pc, #532]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800321a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800321c:	4b82      	ldr	r3, [pc, #520]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d007      	beq.n	8003238 <HAL_RCC_OscConfig+0x308>
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b18      	cmp	r3, #24
 800322c:	d13a      	bne.n	80032a4 <HAL_RCC_OscConfig+0x374>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d135      	bne.n	80032a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003238:	4b7b      	ldr	r3, [pc, #492]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x320>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	2b80      	cmp	r3, #128	@ 0x80
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e2c1      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003250:	f7fd ff2c 	bl	80010ac <HAL_GetREVID>
 8003254:	4603      	mov	r3, r0
 8003256:	f241 0203 	movw	r2, #4099	@ 0x1003
 800325a:	4293      	cmp	r3, r2
 800325c:	d817      	bhi.n	800328e <HAL_RCC_OscConfig+0x35e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	2b20      	cmp	r3, #32
 8003264:	d108      	bne.n	8003278 <HAL_RCC_OscConfig+0x348>
 8003266:	4b70      	ldr	r3, [pc, #448]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800326e:	4a6e      	ldr	r2, [pc, #440]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 8003270:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003274:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003276:	e075      	b.n	8003364 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003278:	4b6b      	ldr	r3, [pc, #428]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	069b      	lsls	r3, r3, #26
 8003286:	4968      	ldr	r1, [pc, #416]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800328c:	e06a      	b.n	8003364 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800328e:	4b66      	ldr	r3, [pc, #408]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	061b      	lsls	r3, r3, #24
 800329c:	4962      	ldr	r1, [pc, #392]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032a2:	e05f      	b.n	8003364 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d042      	beq.n	8003332 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032ac:	4b5e      	ldr	r3, [pc, #376]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80032b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fd feec 	bl	8001094 <HAL_GetTick>
 80032bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032c0:	f7fd fee8 	bl	8001094 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e280      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032d2:	4b55      	ldr	r3, [pc, #340]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032de:	f7fd fee5 	bl	80010ac <HAL_GetREVID>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d817      	bhi.n	800331c <HAL_RCC_OscConfig+0x3ec>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d108      	bne.n	8003306 <HAL_RCC_OscConfig+0x3d6>
 80032f4:	4b4c      	ldr	r3, [pc, #304]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80032fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80032fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003302:	6053      	str	r3, [r2, #4]
 8003304:	e02e      	b.n	8003364 <HAL_RCC_OscConfig+0x434>
 8003306:	4b48      	ldr	r3, [pc, #288]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	069b      	lsls	r3, r3, #26
 8003314:	4944      	ldr	r1, [pc, #272]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
 800331a:	e023      	b.n	8003364 <HAL_RCC_OscConfig+0x434>
 800331c:	4b42      	ldr	r3, [pc, #264]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	493f      	ldr	r1, [pc, #252]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 800332c:	4313      	orrs	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
 8003330:	e018      	b.n	8003364 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003332:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a3c      	ldr	r2, [pc, #240]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 8003338:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800333c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fd fea9 	bl	8001094 <HAL_GetTick>
 8003342:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003346:	f7fd fea5 	bl	8001094 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e23d      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003358:	4b33      	ldr	r3, [pc, #204]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d036      	beq.n	80033de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d019      	beq.n	80033ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003378:	4b2b      	ldr	r3, [pc, #172]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 800337a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337c:	4a2a      	ldr	r2, [pc, #168]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fd fe86 	bl	8001094 <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338c:	f7fd fe82 	bl	8001094 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e21a      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800339e:	4b22      	ldr	r3, [pc, #136]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80033a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x45c>
 80033aa:	e018      	b.n	80033de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80033ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fd fe6c 	bl	8001094 <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fd fe68 	bl	8001094 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e200      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033d2:	4b15      	ldr	r3, [pc, #84]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d039      	beq.n	800345e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01c      	beq.n	800342c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 80033f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033fe:	f7fd fe49 	bl	8001094 <HAL_GetTick>
 8003402:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003406:	f7fd fe45 	bl	8001094 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1dd      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003418:	4b03      	ldr	r3, [pc, #12]	@ (8003428 <HAL_RCC_OscConfig+0x4f8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x4d6>
 8003424:	e01b      	b.n	800345e <HAL_RCC_OscConfig+0x52e>
 8003426:	bf00      	nop
 8003428:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800342c:	4b9b      	ldr	r3, [pc, #620]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a9a      	ldr	r2, [pc, #616]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003432:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003436:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003438:	f7fd fe2c 	bl	8001094 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003440:	f7fd fe28 	bl	8001094 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e1c0      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003452:	4b92      	ldr	r3, [pc, #584]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8081 	beq.w	800356e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800346c:	4b8c      	ldr	r3, [pc, #560]	@ (80036a0 <HAL_RCC_OscConfig+0x770>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a8b      	ldr	r2, [pc, #556]	@ (80036a0 <HAL_RCC_OscConfig+0x770>)
 8003472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003476:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003478:	f7fd fe0c 	bl	8001094 <HAL_GetTick>
 800347c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003480:	f7fd fe08 	bl	8001094 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	@ 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1a0      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003492:	4b83      	ldr	r3, [pc, #524]	@ (80036a0 <HAL_RCC_OscConfig+0x770>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d106      	bne.n	80034b4 <HAL_RCC_OscConfig+0x584>
 80034a6:	4b7d      	ldr	r3, [pc, #500]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	4a7c      	ldr	r2, [pc, #496]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b2:	e02d      	b.n	8003510 <HAL_RCC_OscConfig+0x5e0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10c      	bne.n	80034d6 <HAL_RCC_OscConfig+0x5a6>
 80034bc:	4b77      	ldr	r3, [pc, #476]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c0:	4a76      	ldr	r2, [pc, #472]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c8:	4b74      	ldr	r3, [pc, #464]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034cc:	4a73      	ldr	r2, [pc, #460]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034ce:	f023 0304 	bic.w	r3, r3, #4
 80034d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d4:	e01c      	b.n	8003510 <HAL_RCC_OscConfig+0x5e0>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5c8>
 80034de:	4b6f      	ldr	r3, [pc, #444]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e2:	4a6e      	ldr	r2, [pc, #440]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ea:	4b6c      	ldr	r3, [pc, #432]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ee:	4a6b      	ldr	r2, [pc, #428]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f6:	e00b      	b.n	8003510 <HAL_RCC_OscConfig+0x5e0>
 80034f8:	4b68      	ldr	r3, [pc, #416]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fc:	4a67      	ldr	r2, [pc, #412]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	6713      	str	r3, [r2, #112]	@ 0x70
 8003504:	4b65      	ldr	r3, [pc, #404]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003508:	4a64      	ldr	r2, [pc, #400]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 800350a:	f023 0304 	bic.w	r3, r3, #4
 800350e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d015      	beq.n	8003544 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003518:	f7fd fdbc 	bl	8001094 <HAL_GetTick>
 800351c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fd fdb8 	bl	8001094 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e14e      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003536:	4b59      	ldr	r3, [pc, #356]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ee      	beq.n	8003520 <HAL_RCC_OscConfig+0x5f0>
 8003542:	e014      	b.n	800356e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd fda6 	bl	8001094 <HAL_GetTick>
 8003548:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800354a:	e00a      	b.n	8003562 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7fd fda2 	bl	8001094 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e138      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003562:	4b4e      	ldr	r3, [pc, #312]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ee      	bne.n	800354c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 812d 	beq.w	80037d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003578:	4b48      	ldr	r3, [pc, #288]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003580:	2b18      	cmp	r3, #24
 8003582:	f000 80bd 	beq.w	8003700 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	2b02      	cmp	r3, #2
 800358c:	f040 809e 	bne.w	80036cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003590:	4b42      	ldr	r3, [pc, #264]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a41      	ldr	r2, [pc, #260]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800359a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd fd7a 	bl	8001094 <HAL_GetTick>
 80035a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fd fd76 	bl	8001094 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e10e      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035b6:	4b39      	ldr	r3, [pc, #228]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c2:	4b36      	ldr	r3, [pc, #216]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80035c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035c6:	4b37      	ldr	r3, [pc, #220]	@ (80036a4 <HAL_RCC_OscConfig+0x774>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	430a      	orrs	r2, r1
 80035d6:	4931      	ldr	r1, [pc, #196]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	628b      	str	r3, [r1, #40]	@ 0x28
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	3b01      	subs	r3, #1
 80035e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ea:	3b01      	subs	r3, #1
 80035ec:	025b      	lsls	r3, r3, #9
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	3b01      	subs	r3, #1
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	3b01      	subs	r3, #1
 8003606:	061b      	lsls	r3, r3, #24
 8003608:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800360c:	4923      	ldr	r1, [pc, #140]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 800360e:	4313      	orrs	r3, r2
 8003610:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003612:	4b22      	ldr	r3, [pc, #136]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	4a21      	ldr	r2, [pc, #132]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800361e:	4b1f      	ldr	r3, [pc, #124]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003622:	4b21      	ldr	r3, [pc, #132]	@ (80036a8 <HAL_RCC_OscConfig+0x778>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800362a:	00d2      	lsls	r2, r2, #3
 800362c:	491b      	ldr	r1, [pc, #108]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 800362e:	4313      	orrs	r3, r2
 8003630:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003632:	4b1a      	ldr	r3, [pc, #104]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	f023 020c 	bic.w	r2, r3, #12
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	4917      	ldr	r1, [pc, #92]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003640:	4313      	orrs	r3, r2
 8003642:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003644:	4b15      	ldr	r3, [pc, #84]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	f023 0202 	bic.w	r2, r3, #2
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003650:	4912      	ldr	r1, [pc, #72]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003652:	4313      	orrs	r3, r2
 8003654:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003656:	4b11      	ldr	r3, [pc, #68]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365a:	4a10      	ldr	r2, [pc, #64]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003660:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003662:	4b0e      	ldr	r3, [pc, #56]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003666:	4a0d      	ldr	r2, [pc, #52]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800366c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800366e:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003672:	4a0a      	ldr	r2, [pc, #40]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003678:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800367a:	4b08      	ldr	r3, [pc, #32]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	4a07      	ldr	r2, [pc, #28]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003686:	4b05      	ldr	r3, [pc, #20]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a04      	ldr	r2, [pc, #16]	@ (800369c <HAL_RCC_OscConfig+0x76c>)
 800368c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fd fcff 	bl	8001094 <HAL_GetTick>
 8003696:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003698:	e011      	b.n	80036be <HAL_RCC_OscConfig+0x78e>
 800369a:	bf00      	nop
 800369c:	58024400 	.word	0x58024400
 80036a0:	58024800 	.word	0x58024800
 80036a4:	fffffc0c 	.word	0xfffffc0c
 80036a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fd fcf2 	bl	8001094 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e08a      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036be:	4b47      	ldr	r3, [pc, #284]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x77c>
 80036ca:	e082      	b.n	80037d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b43      	ldr	r3, [pc, #268]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a42      	ldr	r2, [pc, #264]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 80036d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fd fcdc 	bl	8001094 <HAL_GetTick>
 80036dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fd fcd8 	bl	8001094 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e070      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036f2:	4b3a      	ldr	r3, [pc, #232]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x7b0>
 80036fe:	e068      	b.n	80037d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003700:	4b36      	ldr	r3, [pc, #216]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003706:	4b35      	ldr	r3, [pc, #212]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	2b01      	cmp	r3, #1
 8003712:	d031      	beq.n	8003778 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f003 0203 	and.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d12a      	bne.n	8003778 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d122      	bne.n	8003778 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d11a      	bne.n	8003778 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	0a5b      	lsrs	r3, r3, #9
 8003746:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d111      	bne.n	8003778 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003760:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d108      	bne.n	8003778 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	0e1b      	lsrs	r3, r3, #24
 800376a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003772:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e02b      	b.n	80037d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800377c:	4b17      	ldr	r3, [pc, #92]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 800377e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003780:	08db      	lsrs	r3, r3, #3
 8003782:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003786:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	429a      	cmp	r2, r3
 8003790:	d01f      	beq.n	80037d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003792:	4b12      	ldr	r3, [pc, #72]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	4a11      	ldr	r2, [pc, #68]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800379e:	f7fd fc79 	bl	8001094 <HAL_GetTick>
 80037a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80037a4:	bf00      	nop
 80037a6:	f7fd fc75 	bl	8001094 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d0f9      	beq.n	80037a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037b2:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 80037b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037b6:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <HAL_RCC_OscConfig+0x8b0>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037be:	00d2      	lsls	r2, r2, #3
 80037c0:	4906      	ldr	r1, [pc, #24]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80037c6:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	4a04      	ldr	r2, [pc, #16]	@ (80037dc <HAL_RCC_OscConfig+0x8ac>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3730      	adds	r7, #48	@ 0x30
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	58024400 	.word	0x58024400
 80037e0:	ffff0007 	.word	0xffff0007

080037e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e19c      	b.n	8003b32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003a24 <HAL_RCC_ClockConfig+0x240>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d910      	bls.n	8003828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b87      	ldr	r3, [pc, #540]	@ (8003a24 <HAL_RCC_ClockConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 020f 	bic.w	r2, r3, #15
 800380e:	4985      	ldr	r1, [pc, #532]	@ (8003a24 <HAL_RCC_ClockConfig+0x240>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b83      	ldr	r3, [pc, #524]	@ (8003a24 <HAL_RCC_ClockConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e184      	b.n	8003b32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	4b7b      	ldr	r3, [pc, #492]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003840:	429a      	cmp	r2, r3
 8003842:	d908      	bls.n	8003856 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003844:	4b78      	ldr	r3, [pc, #480]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	4975      	ldr	r1, [pc, #468]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003852:	4313      	orrs	r3, r2
 8003854:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d010      	beq.n	8003884 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	4b70      	ldr	r3, [pc, #448]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800386e:	429a      	cmp	r2, r3
 8003870:	d908      	bls.n	8003884 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003872:	4b6d      	ldr	r3, [pc, #436]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	496a      	ldr	r1, [pc, #424]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003880:	4313      	orrs	r3, r2
 8003882:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	d010      	beq.n	80038b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699a      	ldr	r2, [r3, #24]
 8003894:	4b64      	ldr	r3, [pc, #400]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800389c:	429a      	cmp	r2, r3
 800389e:	d908      	bls.n	80038b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038a0:	4b61      	ldr	r3, [pc, #388]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	495e      	ldr	r1, [pc, #376]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	4b59      	ldr	r3, [pc, #356]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d908      	bls.n	80038e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038ce:	4b56      	ldr	r3, [pc, #344]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	4953      	ldr	r1, [pc, #332]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d010      	beq.n	800390e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d908      	bls.n	800390e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f023 020f 	bic.w	r2, r3, #15
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4947      	ldr	r1, [pc, #284]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 800390a:	4313      	orrs	r3, r2
 800390c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d055      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800391a:	4b43      	ldr	r3, [pc, #268]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4940      	ldr	r1, [pc, #256]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003928:	4313      	orrs	r3, r2
 800392a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d107      	bne.n	8003944 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003934:	4b3c      	ldr	r3, [pc, #240]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d121      	bne.n	8003984 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0f6      	b.n	8003b32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d107      	bne.n	800395c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800394c:	4b36      	ldr	r3, [pc, #216]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d115      	bne.n	8003984 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0ea      	b.n	8003b32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003964:	4b30      	ldr	r3, [pc, #192]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0de      	b.n	8003b32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003974:	4b2c      	ldr	r3, [pc, #176]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0d6      	b.n	8003b32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003984:	4b28      	ldr	r3, [pc, #160]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f023 0207 	bic.w	r2, r3, #7
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4925      	ldr	r1, [pc, #148]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 8003992:	4313      	orrs	r3, r2
 8003994:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003996:	f7fd fb7d 	bl	8001094 <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399e:	f7fd fb79 	bl	8001094 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e0be      	b.n	8003b32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d1eb      	bne.n	800399e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	4b14      	ldr	r3, [pc, #80]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	429a      	cmp	r2, r3
 80039e0:	d208      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e2:	4b11      	ldr	r3, [pc, #68]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f023 020f 	bic.w	r2, r3, #15
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	490e      	ldr	r1, [pc, #56]	@ (8003a28 <HAL_RCC_ClockConfig+0x244>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_ClockConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d214      	bcs.n	8003a2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <HAL_RCC_ClockConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 020f 	bic.w	r2, r3, #15
 8003a0a:	4906      	ldr	r1, [pc, #24]	@ (8003a24 <HAL_RCC_ClockConfig+0x240>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <HAL_RCC_ClockConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e086      	b.n	8003b32 <HAL_RCC_ClockConfig+0x34e>
 8003a24:	52002000 	.word	0x52002000
 8003a28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d208      	bcs.n	8003a5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a48:	4b3c      	ldr	r3, [pc, #240]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	4939      	ldr	r1, [pc, #228]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d010      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	4b34      	ldr	r3, [pc, #208]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d208      	bcs.n	8003a88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a76:	4b31      	ldr	r3, [pc, #196]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	492e      	ldr	r1, [pc, #184]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	4b28      	ldr	r3, [pc, #160]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d208      	bcs.n	8003ab6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003aa4:	4b25      	ldr	r3, [pc, #148]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	4922      	ldr	r1, [pc, #136]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d010      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d208      	bcs.n	8003ae4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4917      	ldr	r1, [pc, #92]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ae4:	f000 f834 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b14      	ldr	r3, [pc, #80]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	4912      	ldr	r1, [pc, #72]	@ (8003b40 <HAL_RCC_ClockConfig+0x35c>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
 8003b00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b02:	4b0e      	ldr	r3, [pc, #56]	@ (8003b3c <HAL_RCC_ClockConfig+0x358>)
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b40 <HAL_RCC_ClockConfig+0x35c>)
 8003b0c:	5cd3      	ldrb	r3, [r2, r3]
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
 8003b18:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <HAL_RCC_ClockConfig+0x360>)
 8003b1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b48 <HAL_RCC_ClockConfig+0x364>)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b22:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <HAL_RCC_ClockConfig+0x368>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fd fa6a 	bl	8001000 <HAL_InitTick>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	58024400 	.word	0x58024400
 8003b40:	08009964 	.word	0x08009964
 8003b44:	24000004 	.word	0x24000004
 8003b48:	24000000 	.word	0x24000000
 8003b4c:	24000008 	.word	0x24000008

08003b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	@ 0x24
 8003b54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b56:	4bb3      	ldr	r3, [pc, #716]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b5e:	2b18      	cmp	r3, #24
 8003b60:	f200 8155 	bhi.w	8003e0e <HAL_RCC_GetSysClockFreq+0x2be>
 8003b64:	a201      	add	r2, pc, #4	@ (adr r2, 8003b6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003bd1 	.word	0x08003bd1
 8003b70:	08003e0f 	.word	0x08003e0f
 8003b74:	08003e0f 	.word	0x08003e0f
 8003b78:	08003e0f 	.word	0x08003e0f
 8003b7c:	08003e0f 	.word	0x08003e0f
 8003b80:	08003e0f 	.word	0x08003e0f
 8003b84:	08003e0f 	.word	0x08003e0f
 8003b88:	08003e0f 	.word	0x08003e0f
 8003b8c:	08003bf7 	.word	0x08003bf7
 8003b90:	08003e0f 	.word	0x08003e0f
 8003b94:	08003e0f 	.word	0x08003e0f
 8003b98:	08003e0f 	.word	0x08003e0f
 8003b9c:	08003e0f 	.word	0x08003e0f
 8003ba0:	08003e0f 	.word	0x08003e0f
 8003ba4:	08003e0f 	.word	0x08003e0f
 8003ba8:	08003e0f 	.word	0x08003e0f
 8003bac:	08003bfd 	.word	0x08003bfd
 8003bb0:	08003e0f 	.word	0x08003e0f
 8003bb4:	08003e0f 	.word	0x08003e0f
 8003bb8:	08003e0f 	.word	0x08003e0f
 8003bbc:	08003e0f 	.word	0x08003e0f
 8003bc0:	08003e0f 	.word	0x08003e0f
 8003bc4:	08003e0f 	.word	0x08003e0f
 8003bc8:	08003e0f 	.word	0x08003e0f
 8003bcc:	08003c03 	.word	0x08003c03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bd0:	4b94      	ldr	r3, [pc, #592]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bdc:	4b91      	ldr	r3, [pc, #580]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	4a90      	ldr	r2, [pc, #576]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003bee:	e111      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bf0:	4b8d      	ldr	r3, [pc, #564]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bf2:	61bb      	str	r3, [r7, #24]
      break;
 8003bf4:	e10e      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003bf6:	4b8d      	ldr	r3, [pc, #564]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bf8:	61bb      	str	r3, [r7, #24]
      break;
 8003bfa:	e10b      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003bfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bfe:	61bb      	str	r3, [r7, #24]
      break;
 8003c00:	e108      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c02:	4b88      	ldr	r3, [pc, #544]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c0c:	4b85      	ldr	r3, [pc, #532]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c18:	4b82      	ldr	r3, [pc, #520]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c22:	4b80      	ldr	r3, [pc, #512]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c26:	08db      	lsrs	r3, r3, #3
 8003c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80e1 	beq.w	8003e08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	f000 8083 	beq.w	8003d54 <HAL_RCC_GetSysClockFreq+0x204>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	f200 80a1 	bhi.w	8003d98 <HAL_RCC_GetSysClockFreq+0x248>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x114>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d056      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c62:	e099      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c64:	4b6f      	ldr	r3, [pc, #444]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d02d      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c70:	4b6c      	ldr	r3, [pc, #432]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	08db      	lsrs	r3, r3, #3
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	4a6b      	ldr	r2, [pc, #428]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	ee07 3a90 	vmov	s15, r3
 8003c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9a:	4b62      	ldr	r3, [pc, #392]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003e34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003cca:	e087      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003e38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cde:	4b51      	ldr	r3, [pc, #324]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003e34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d0e:	e065      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003e3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d22:	4b40      	ldr	r3, [pc, #256]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d36:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d52:	e043      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003e40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d66:	4b2f      	ldr	r3, [pc, #188]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d7a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003e34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d96:	e021      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003daa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dbe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003e34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dda:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ddc:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de0:	0a5b      	lsrs	r3, r3, #9
 8003de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003de6:	3301      	adds	r3, #1
 8003de8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	ee07 3a90 	vmov	s15, r3
 8003df0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e00:	ee17 3a90 	vmov	r3, s15
 8003e04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003e06:	e005      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
      break;
 8003e0c:	e002      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003e0e:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e10:	61bb      	str	r3, [r7, #24]
      break;
 8003e12:	bf00      	nop
  }

  return sysclockfreq;
 8003e14:	69bb      	ldr	r3, [r7, #24]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3724      	adds	r7, #36	@ 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	58024400 	.word	0x58024400
 8003e28:	03d09000 	.word	0x03d09000
 8003e2c:	003d0900 	.word	0x003d0900
 8003e30:	017d7840 	.word	0x017d7840
 8003e34:	46000000 	.word	0x46000000
 8003e38:	4c742400 	.word	0x4c742400
 8003e3c:	4a742400 	.word	0x4a742400
 8003e40:	4bbebc20 	.word	0x4bbebc20

08003e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e4a:	f7ff fe81 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	490f      	ldr	r1, [pc, #60]	@ (8003e98 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e5c:	5ccb      	ldrb	r3, [r1, r3]
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	fa22 f303 	lsr.w	r3, r2, r3
 8003e66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e68:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	4a09      	ldr	r2, [pc, #36]	@ (8003e98 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e72:	5cd3      	ldrb	r3, [r2, r3]
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7e:	4a07      	ldr	r2, [pc, #28]	@ (8003e9c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e82:	4a07      	ldr	r2, [pc, #28]	@ (8003ea0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e88:	4b04      	ldr	r3, [pc, #16]	@ (8003e9c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	58024400 	.word	0x58024400
 8003e98:	08009964 	.word	0x08009964
 8003e9c:	24000004 	.word	0x24000004
 8003ea0:	24000000 	.word	0x24000000

08003ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ea8:	f7ff ffcc 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	091b      	lsrs	r3, r3, #4
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4904      	ldr	r1, [pc, #16]	@ (8003ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	58024400 	.word	0x58024400
 8003ecc:	08009964 	.word	0x08009964

08003ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ed4:	f7ff ffb6 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4904      	ldr	r1, [pc, #16]	@ (8003ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	08009964 	.word	0x08009964

08003efc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f00:	b0ca      	sub	sp, #296	@ 0x128
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003f20:	2500      	movs	r5, #0
 8003f22:	ea54 0305 	orrs.w	r3, r4, r5
 8003f26:	d049      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f32:	d02f      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f38:	d828      	bhi.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f3e:	d01a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f44:	d822      	bhi.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f4e:	d007      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f50:	e01c      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f52:	4bb8      	ldr	r3, [pc, #736]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f56:	4ab7      	ldr	r2, [pc, #732]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f5e:	e01a      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	3308      	adds	r3, #8
 8003f66:	2102      	movs	r1, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 fc8f 	bl	800588c <RCCEx_PLL2_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f74:	e00f      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	3328      	adds	r3, #40	@ 0x28
 8003f7c:	2102      	movs	r1, #2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 fd36 	bl	80059f0 <RCCEx_PLL3_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f8a:	e004      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f92:	e000      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f9e:	4ba5      	ldr	r3, [pc, #660]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fac:	4aa1      	ldr	r2, [pc, #644]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fb2:	e003      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003fc8:	f04f 0900 	mov.w	r9, #0
 8003fcc:	ea58 0309 	orrs.w	r3, r8, r9
 8003fd0:	d047      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d82a      	bhi.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08003ff9 	.word	0x08003ff9
 8003fe8:	08004007 	.word	0x08004007
 8003fec:	0800401d 	.word	0x0800401d
 8003ff0:	0800403b 	.word	0x0800403b
 8003ff4:	0800403b 	.word	0x0800403b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff8:	4b8e      	ldr	r3, [pc, #568]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	4a8d      	ldr	r2, [pc, #564]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004004:	e01a      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400a:	3308      	adds	r3, #8
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f001 fc3c 	bl	800588c <RCCEx_PLL2_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800401a:	e00f      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	3328      	adds	r3, #40	@ 0x28
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f001 fce3 	bl	80059f0 <RCCEx_PLL3_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004030:	e004      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004038:	e000      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800403a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004044:	4b7b      	ldr	r3, [pc, #492]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004048:	f023 0107 	bic.w	r1, r3, #7
 800404c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004052:	4a78      	ldr	r2, [pc, #480]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004054:	430b      	orrs	r3, r1
 8004056:	6513      	str	r3, [r2, #80]	@ 0x50
 8004058:	e003      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800406e:	f04f 0b00 	mov.w	fp, #0
 8004072:	ea5a 030b 	orrs.w	r3, sl, fp
 8004076:	d04c      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004082:	d030      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004088:	d829      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800408a:	2bc0      	cmp	r3, #192	@ 0xc0
 800408c:	d02d      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800408e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004090:	d825      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004092:	2b80      	cmp	r3, #128	@ 0x80
 8004094:	d018      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004096:	2b80      	cmp	r3, #128	@ 0x80
 8004098:	d821      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800409e:	2b40      	cmp	r3, #64	@ 0x40
 80040a0:	d007      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80040a2:	e01c      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a4:	4b63      	ldr	r3, [pc, #396]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	4a62      	ldr	r2, [pc, #392]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80040b0:	e01c      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b6:	3308      	adds	r3, #8
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f001 fbe6 	bl	800588c <RCCEx_PLL2_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80040c6:	e011      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	3328      	adds	r3, #40	@ 0x28
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 fc8d 	bl	80059f0 <RCCEx_PLL3_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80040dc:	e006      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040e4:	e002      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80040ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80040f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004102:	4a4c      	ldr	r2, [pc, #304]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004104:	430b      	orrs	r3, r1
 8004106:	6513      	str	r3, [r2, #80]	@ 0x50
 8004108:	e003      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800411e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004122:	2300      	movs	r3, #0
 8004124:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004128:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800412c:	460b      	mov	r3, r1
 800412e:	4313      	orrs	r3, r2
 8004130:	d053      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004136:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800413a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800413e:	d035      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004140:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004144:	d82e      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004146:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800414a:	d031      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800414c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004150:	d828      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004156:	d01a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004158:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800415c:	d822      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004162:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004166:	d007      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004168:	e01c      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416a:	4b32      	ldr	r3, [pc, #200]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	4a31      	ldr	r2, [pc, #196]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004174:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004176:	e01c      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417c:	3308      	adds	r3, #8
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f001 fb83 	bl	800588c <RCCEx_PLL2_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800418c:	e011      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800418e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004192:	3328      	adds	r3, #40	@ 0x28
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f001 fc2a 	bl	80059f0 <RCCEx_PLL3_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041a2:	e006      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041aa:	e002      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80041b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80041ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d0:	e003      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80041e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80041ea:	2300      	movs	r3, #0
 80041ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80041f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80041f4:	460b      	mov	r3, r1
 80041f6:	4313      	orrs	r3, r2
 80041f8:	d056      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004202:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004206:	d038      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800420c:	d831      	bhi.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800420e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004212:	d034      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004214:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004218:	d82b      	bhi.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800421a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800421e:	d01d      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004220:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004224:	d825      	bhi.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d006      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800422a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004230:	e01f      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004232:	bf00      	nop
 8004234:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004238:	4ba2      	ldr	r3, [pc, #648]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	4aa1      	ldr	r2, [pc, #644]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800423e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004244:	e01c      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	3308      	adds	r3, #8
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f001 fb1c 	bl	800588c <RCCEx_PLL2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800425a:	e011      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004260:	3328      	adds	r3, #40	@ 0x28
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f001 fbc3 	bl	80059f0 <RCCEx_PLL3_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004270:	e006      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004278:	e002      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800427e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10b      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004288:	4b8e      	ldr	r3, [pc, #568]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004294:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004298:	4a8a      	ldr	r2, [pc, #552]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429a:	430b      	orrs	r3, r1
 800429c:	6593      	str	r3, [r2, #88]	@ 0x58
 800429e:	e003      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80042b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80042be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	d03a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ce:	2b30      	cmp	r3, #48	@ 0x30
 80042d0:	d01f      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80042d2:	2b30      	cmp	r3, #48	@ 0x30
 80042d4:	d819      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d00c      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d815      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d019      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d111      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e6:	4b77      	ldr	r3, [pc, #476]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ea:	4a76      	ldr	r2, [pc, #472]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042f2:	e011      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	3308      	adds	r3, #8
 80042fa:	2102      	movs	r1, #2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 fac5 	bl	800588c <RCCEx_PLL2_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004308:	e006      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004310:	e002      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004320:	4b68      	ldr	r3, [pc, #416]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004324:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432e:	4a65      	ldr	r2, [pc, #404]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004330:	430b      	orrs	r3, r1
 8004332:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800434a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004354:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d051      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004368:	d035      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800436a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800436e:	d82e      	bhi.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004370:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004374:	d031      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004376:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800437a:	d828      	bhi.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800437c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004380:	d01a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004386:	d822      	bhi.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004390:	d007      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004392:	e01c      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004394:	4b4b      	ldr	r3, [pc, #300]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	4a4a      	ldr	r2, [pc, #296]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800439a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800439e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80043a0:	e01c      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a6:	3308      	adds	r3, #8
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 fa6e 	bl	800588c <RCCEx_PLL2_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80043b6:	e011      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043bc:	3328      	adds	r3, #40	@ 0x28
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f001 fb15 	bl	80059f0 <RCCEx_PLL3_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80043cc:	e006      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043d4:	e002      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80043da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043e4:	4b37      	ldr	r3, [pc, #220]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f2:	4a34      	ldr	r2, [pc, #208]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043f4:	430b      	orrs	r3, r1
 80043f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80043f8:	e003      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800440e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004412:	2300      	movs	r3, #0
 8004414:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004418:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800441c:	460b      	mov	r3, r1
 800441e:	4313      	orrs	r3, r2
 8004420:	d056      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800442c:	d033      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800442e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004432:	d82c      	bhi.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004434:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004438:	d02f      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800443a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800443e:	d826      	bhi.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004440:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004444:	d02b      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004446:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800444a:	d820      	bhi.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800444c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004450:	d012      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004452:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004456:	d81a      	bhi.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d022      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004460:	d115      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	3308      	adds	r3, #8
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f001 fa0e 	bl	800588c <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004476:	e015      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	3328      	adds	r3, #40	@ 0x28
 800447e:	2101      	movs	r1, #1
 8004480:	4618      	mov	r0, r3
 8004482:	f001 fab5 	bl	80059f0 <RCCEx_PLL3_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800448c:	e00a      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004496:	bf00      	nop
 8004498:	e004      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80044a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10d      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ba:	4a02      	ldr	r2, [pc, #8]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044bc:	430b      	orrs	r3, r1
 80044be:	6513      	str	r3, [r2, #80]	@ 0x50
 80044c0:	e006      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80044c2:	bf00      	nop
 80044c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80044dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	d055      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044fc:	d033      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80044fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004502:	d82c      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004508:	d02f      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800450a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800450e:	d826      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004510:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004514:	d02b      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004516:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800451a:	d820      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800451c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004520:	d012      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004522:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004526:	d81a      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d022      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800452c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004530:	d115      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004536:	3308      	adds	r3, #8
 8004538:	2101      	movs	r1, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f001 f9a6 	bl	800588c <RCCEx_PLL2_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004546:	e015      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454c:	3328      	adds	r3, #40	@ 0x28
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f001 fa4d 	bl	80059f0 <RCCEx_PLL3_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800455c:	e00a      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004564:	e006      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004566:	bf00      	nop
 8004568:	e004      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800457c:	4ba3      	ldr	r3, [pc, #652]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004580:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004588:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800458c:	4a9f      	ldr	r2, [pc, #636]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800458e:	430b      	orrs	r3, r1
 8004590:	6593      	str	r3, [r2, #88]	@ 0x58
 8004592:	e003      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004598:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800459c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80045a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80045b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045b6:	460b      	mov	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	d037      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80045bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c6:	d00e      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80045c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045cc:	d816      	bhi.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d018      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80045d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045d6:	d111      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4b8c      	ldr	r3, [pc, #560]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	4a8b      	ldr	r2, [pc, #556]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045e4:	e00f      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ea:	3308      	adds	r3, #8
 80045ec:	2101      	movs	r1, #1
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 f94c 	bl	800588c <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045fa:	e004      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004602:	e000      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800460e:	4b7f      	ldr	r3, [pc, #508]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004612:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461c:	4a7b      	ldr	r2, [pc, #492]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800461e:	430b      	orrs	r3, r1
 8004620:	6513      	str	r3, [r2, #80]	@ 0x50
 8004622:	e003      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004628:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800463c:	2300      	movs	r3, #0
 800463e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004642:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004646:	460b      	mov	r3, r1
 8004648:	4313      	orrs	r3, r2
 800464a:	d039      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800464c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004652:	2b03      	cmp	r3, #3
 8004654:	d81c      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004656:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004699 	.word	0x08004699
 8004660:	0800466d 	.word	0x0800466d
 8004664:	0800467b 	.word	0x0800467b
 8004668:	08004699 	.word	0x08004699
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800466c:	4b67      	ldr	r3, [pc, #412]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004670:	4a66      	ldr	r2, [pc, #408]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004678:	e00f      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	3308      	adds	r3, #8
 8004680:	2102      	movs	r1, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f001 f902 	bl	800588c <RCCEx_PLL2_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800468e:	e004      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004696:	e000      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80046a2:	4b5a      	ldr	r3, [pc, #360]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a6:	f023 0103 	bic.w	r1, r3, #3
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b0:	4a56      	ldr	r2, [pc, #344]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046b2:	430b      	orrs	r3, r1
 80046b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046b6:	e003      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80046cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80046da:	460b      	mov	r3, r1
 80046dc:	4313      	orrs	r3, r2
 80046de:	f000 809f 	beq.w	8004820 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046ee:	f7fc fcd1 	bl	8001094 <HAL_GetTick>
 80046f2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046f6:	e00b      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f8:	f7fc fccc 	bl	8001094 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b64      	cmp	r3, #100	@ 0x64
 8004706:	d903      	bls.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800470e:	e005      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004710:	4b3f      	ldr	r3, [pc, #252]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ed      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800471c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004720:	2b00      	cmp	r3, #0
 8004722:	d179      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004724:	4b39      	ldr	r3, [pc, #228]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004726:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004730:	4053      	eors	r3, r2
 8004732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004736:	2b00      	cmp	r3, #0
 8004738:	d015      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800473a:	4b34      	ldr	r3, [pc, #208]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004742:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004746:	4b31      	ldr	r3, [pc, #196]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474a:	4a30      	ldr	r2, [pc, #192]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800474c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004750:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004752:	4b2e      	ldr	r3, [pc, #184]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	4a2d      	ldr	r2, [pc, #180]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800475e:	4a2b      	ldr	r2, [pc, #172]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004760:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004764:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800476e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004772:	d118      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fc fc8e 	bl	8001094 <HAL_GetTick>
 8004778:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800477c:	e00d      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477e:	f7fc fc89 	bl	8001094 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004788:	1ad2      	subs	r2, r2, r3
 800478a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800478e:	429a      	cmp	r2, r3
 8004790:	d903      	bls.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004798:	e005      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800479a:	4b1c      	ldr	r3, [pc, #112]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0eb      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d129      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047be:	d10e      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80047c0:	4b12      	ldr	r3, [pc, #72]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047d0:	091a      	lsrs	r2, r3, #4
 80047d2:	4b10      	ldr	r3, [pc, #64]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	4a0d      	ldr	r2, [pc, #52]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047d8:	430b      	orrs	r3, r1
 80047da:	6113      	str	r3, [r2, #16]
 80047dc:	e005      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80047de:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	4a0a      	ldr	r2, [pc, #40]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047e8:	6113      	str	r3, [r2, #16]
 80047ea:	4b08      	ldr	r3, [pc, #32]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fa:	4a04      	ldr	r2, [pc, #16]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047fc:	430b      	orrs	r3, r1
 80047fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004800:	e00e      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800480a:	e009      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800480c:	58024400 	.word	0x58024400
 8004810:	58024800 	.word	0x58024800
 8004814:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f002 0301 	and.w	r3, r2, #1
 800482c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004836:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800483a:	460b      	mov	r3, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	f000 8089 	beq.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004848:	2b28      	cmp	r3, #40	@ 0x28
 800484a:	d86b      	bhi.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800484c:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	0800492d 	.word	0x0800492d
 8004858:	08004925 	.word	0x08004925
 800485c:	08004925 	.word	0x08004925
 8004860:	08004925 	.word	0x08004925
 8004864:	08004925 	.word	0x08004925
 8004868:	08004925 	.word	0x08004925
 800486c:	08004925 	.word	0x08004925
 8004870:	08004925 	.word	0x08004925
 8004874:	080048f9 	.word	0x080048f9
 8004878:	08004925 	.word	0x08004925
 800487c:	08004925 	.word	0x08004925
 8004880:	08004925 	.word	0x08004925
 8004884:	08004925 	.word	0x08004925
 8004888:	08004925 	.word	0x08004925
 800488c:	08004925 	.word	0x08004925
 8004890:	08004925 	.word	0x08004925
 8004894:	0800490f 	.word	0x0800490f
 8004898:	08004925 	.word	0x08004925
 800489c:	08004925 	.word	0x08004925
 80048a0:	08004925 	.word	0x08004925
 80048a4:	08004925 	.word	0x08004925
 80048a8:	08004925 	.word	0x08004925
 80048ac:	08004925 	.word	0x08004925
 80048b0:	08004925 	.word	0x08004925
 80048b4:	0800492d 	.word	0x0800492d
 80048b8:	08004925 	.word	0x08004925
 80048bc:	08004925 	.word	0x08004925
 80048c0:	08004925 	.word	0x08004925
 80048c4:	08004925 	.word	0x08004925
 80048c8:	08004925 	.word	0x08004925
 80048cc:	08004925 	.word	0x08004925
 80048d0:	08004925 	.word	0x08004925
 80048d4:	0800492d 	.word	0x0800492d
 80048d8:	08004925 	.word	0x08004925
 80048dc:	08004925 	.word	0x08004925
 80048e0:	08004925 	.word	0x08004925
 80048e4:	08004925 	.word	0x08004925
 80048e8:	08004925 	.word	0x08004925
 80048ec:	08004925 	.word	0x08004925
 80048f0:	08004925 	.word	0x08004925
 80048f4:	0800492d 	.word	0x0800492d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fc:	3308      	adds	r3, #8
 80048fe:	2101      	movs	r1, #1
 8004900:	4618      	mov	r0, r3
 8004902:	f000 ffc3 	bl	800588c <RCCEx_PLL2_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800490c:	e00f      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004912:	3328      	adds	r3, #40	@ 0x28
 8004914:	2101      	movs	r1, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f001 f86a 	bl	80059f0 <RCCEx_PLL3_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004922:	e004      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800492a:	e000      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800492c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800492e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004936:	4bbf      	ldr	r3, [pc, #764]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004944:	4abb      	ldr	r2, [pc, #748]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004946:	430b      	orrs	r3, r1
 8004948:	6553      	str	r3, [r2, #84]	@ 0x54
 800494a:	e003      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f002 0302 	and.w	r3, r2, #2
 8004960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800496a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	d041      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800497a:	2b05      	cmp	r3, #5
 800497c:	d824      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800497e:	a201      	add	r2, pc, #4	@ (adr r2, 8004984 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049d1 	.word	0x080049d1
 8004988:	0800499d 	.word	0x0800499d
 800498c:	080049b3 	.word	0x080049b3
 8004990:	080049d1 	.word	0x080049d1
 8004994:	080049d1 	.word	0x080049d1
 8004998:	080049d1 	.word	0x080049d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a0:	3308      	adds	r3, #8
 80049a2:	2101      	movs	r1, #1
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 ff71 	bl	800588c <RCCEx_PLL2_Config>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80049b0:	e00f      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	3328      	adds	r3, #40	@ 0x28
 80049b8:	2101      	movs	r1, #1
 80049ba:	4618      	mov	r0, r3
 80049bc:	f001 f818 	bl	80059f0 <RCCEx_PLL3_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80049c6:	e004      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ce:	e000      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80049d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80049da:	4b96      	ldr	r3, [pc, #600]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	f023 0107 	bic.w	r1, r3, #7
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049e8:	4a92      	ldr	r2, [pc, #584]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049ea:	430b      	orrs	r3, r1
 80049ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80049ee:	e003      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f002 0304 	and.w	r3, r2, #4
 8004a04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4313      	orrs	r3, r2
 8004a16:	d044      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	d825      	bhi.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004a24:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a79 	.word	0x08004a79
 8004a30:	08004a45 	.word	0x08004a45
 8004a34:	08004a5b 	.word	0x08004a5b
 8004a38:	08004a79 	.word	0x08004a79
 8004a3c:	08004a79 	.word	0x08004a79
 8004a40:	08004a79 	.word	0x08004a79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a48:	3308      	adds	r3, #8
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 ff1d 	bl	800588c <RCCEx_PLL2_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a58:	e00f      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	3328      	adds	r3, #40	@ 0x28
 8004a60:	2101      	movs	r1, #1
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 ffc4 	bl	80059f0 <RCCEx_PLL3_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a6e:	e004      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a76:	e000      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a82:	4b6c      	ldr	r3, [pc, #432]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a86:	f023 0107 	bic.w	r1, r3, #7
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a92:	4a68      	ldr	r2, [pc, #416]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a98:	e003      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	f002 0320 	and.w	r3, r2, #32
 8004aae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004abc:	460b      	mov	r3, r1
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	d055      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ace:	d033      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ad4:	d82c      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ada:	d02f      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae0:	d826      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ae2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ae6:	d02b      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004ae8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004aec:	d820      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004af2:	d012      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004af8:	d81a      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d022      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004afe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b02:	d115      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b08:	3308      	adds	r3, #8
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 febd 	bl	800588c <RCCEx_PLL2_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b18:	e015      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	3328      	adds	r3, #40	@ 0x28
 8004b20:	2102      	movs	r1, #2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 ff64 	bl	80059f0 <RCCEx_PLL3_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b2e:	e00a      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b36:	e006      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b38:	bf00      	nop
 8004b3a:	e004      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b3c:	bf00      	nop
 8004b3e:	e002      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b40:	bf00      	nop
 8004b42:	e000      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10b      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b4e:	4b39      	ldr	r3, [pc, #228]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5e:	4a35      	ldr	r2, [pc, #212]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b64:	e003      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	d058      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b9a:	d033      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004b9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004ba0:	d82c      	bhi.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba6:	d02f      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bac:	d826      	bhi.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004bae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bb2:	d02b      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004bb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bb8:	d820      	bhi.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004bba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bbe:	d012      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004bc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bc4:	d81a      	bhi.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d022      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bce:	d115      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fe57 	bl	800588c <RCCEx_PLL2_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004be4:	e015      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bea:	3328      	adds	r3, #40	@ 0x28
 8004bec:	2102      	movs	r1, #2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fefe 	bl	80059f0 <RCCEx_PLL3_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c02:	e006      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004c04:	bf00      	nop
 8004c06:	e004      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004c08:	bf00      	nop
 8004c0a:	e002      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004c0c:	bf00      	nop
 8004c0e:	e000      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10e      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c1a:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c2a:	4a02      	ldr	r2, [pc, #8]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c30:	e006      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004c32:	bf00      	nop
 8004c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c50:	2300      	movs	r3, #0
 8004c52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c56:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	d055      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c6c:	d033      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004c6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c72:	d82c      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c78:	d02f      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c7e:	d826      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c84:	d02b      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004c86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c8a:	d820      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c90:	d012      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004c92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c96:	d81a      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d022      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca0:	d115      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fdee 	bl	800588c <RCCEx_PLL2_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004cb6:	e015      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbc:	3328      	adds	r3, #40	@ 0x28
 8004cbe:	2102      	movs	r1, #2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fe95 	bl	80059f0 <RCCEx_PLL3_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ccc:	e00a      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cd4:	e006      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cd6:	bf00      	nop
 8004cd8:	e004      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cda:	bf00      	nop
 8004cdc:	e002      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cde:	bf00      	nop
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004cec:	4ba1      	ldr	r3, [pc, #644]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cfc:	4a9d      	ldr	r2, [pc, #628]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d02:	e003      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f002 0308 	and.w	r3, r2, #8
 8004d18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004d26:	460b      	mov	r3, r1
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	d01e      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3e:	3328      	adds	r3, #40	@ 0x28
 8004d40:	2102      	movs	r1, #2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fe54 	bl	80059f0 <RCCEx_PLL3_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d54:	4b87      	ldr	r3, [pc, #540]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d58:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d64:	4a83      	ldr	r2, [pc, #524]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d66:	430b      	orrs	r3, r1
 8004d68:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f002 0310 	and.w	r3, r2, #16
 8004d76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d80:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d01e      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d96:	d10c      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9c:	3328      	adds	r3, #40	@ 0x28
 8004d9e:	2102      	movs	r1, #2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fe25 	bl	80059f0 <RCCEx_PLL3_Config>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004db2:	4b70      	ldr	r3, [pc, #448]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dc2:	4a6c      	ldr	r2, [pc, #432]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004dd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004dde:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004de2:	460b      	mov	r3, r1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	d03e      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004df0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004df4:	d022      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004df6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dfa:	d81b      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e04:	d00b      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004e06:	e015      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fd3b 	bl	800588c <RCCEx_PLL2_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e1c:	e00f      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	3328      	adds	r3, #40	@ 0x28
 8004e24:	2102      	movs	r1, #2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fde2 	bl	80059f0 <RCCEx_PLL3_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e32:	e004      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e3a:	e000      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e46:	4b4b      	ldr	r3, [pc, #300]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e56:	4a47      	ldr	r2, [pc, #284]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e5c:	e003      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004e72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e74:	2300      	movs	r3, #0
 8004e76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e78:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	d03b      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e8e:	d01f      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004e90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e94:	d818      	bhi.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e9a:	d003      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004e9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ea0:	d007      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004ea2:	e011      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea4:	4b33      	ldr	r3, [pc, #204]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	4a32      	ldr	r2, [pc, #200]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004eb0:	e00f      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb6:	3328      	adds	r3, #40	@ 0x28
 8004eb8:	2101      	movs	r1, #1
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fd98 	bl	80059f0 <RCCEx_PLL3_Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ec6:	e004      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ece:	e000      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10b      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eda:	4b26      	ldr	r3, [pc, #152]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ede:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	4a22      	ldr	r2, [pc, #136]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ef0:	e003      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004f06:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f08:	2300      	movs	r3, #0
 8004f0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004f10:	460b      	mov	r3, r1
 8004f12:	4313      	orrs	r3, r2
 8004f14:	d034      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f24:	d007      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004f26:	e011      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f28:	4b12      	ldr	r3, [pc, #72]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	4a11      	ldr	r2, [pc, #68]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f34:	e00e      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fca4 	bl	800588c <RCCEx_PLL2_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f4a:	e003      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10d      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f5c:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f60:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f6a:	4a02      	ldr	r2, [pc, #8]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f70:	e006      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004f72:	bf00      	nop
 8004f74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f8e:	2300      	movs	r3, #0
 8004f90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f92:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f96:	460b      	mov	r3, r1
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	d00c      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa0:	3328      	adds	r3, #40	@ 0x28
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fd23 	bl	80059f0 <RCCEx_PLL3_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004fc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fc8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	d038      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fde:	d018      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004fe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fe4:	d811      	bhi.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fea:	d014      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff0:	d80b      	bhi.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d011      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ffa:	d106      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffc:	4bc3      	ldr	r3, [pc, #780]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005000:	4ac2      	ldr	r2, [pc, #776]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005008:	e008      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005010:	e004      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005012:	bf00      	nop
 8005014:	e002      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005016:	bf00      	nop
 8005018:	e000      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800501a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005024:	4bb9      	ldr	r3, [pc, #740]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005028:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800502c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005034:	4ab5      	ldr	r2, [pc, #724]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005036:	430b      	orrs	r3, r1
 8005038:	6553      	str	r3, [r2, #84]	@ 0x54
 800503a:	e003      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005050:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005052:	2300      	movs	r3, #0
 8005054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005056:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800505a:	460b      	mov	r3, r1
 800505c:	4313      	orrs	r3, r2
 800505e:	d009      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005060:	4baa      	ldr	r3, [pc, #680]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005064:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506e:	4aa7      	ldr	r2, [pc, #668]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005070:	430b      	orrs	r3, r1
 8005072:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005080:	653b      	str	r3, [r7, #80]	@ 0x50
 8005082:	2300      	movs	r3, #0
 8005084:	657b      	str	r3, [r7, #84]	@ 0x54
 8005086:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800508a:	460b      	mov	r3, r1
 800508c:	4313      	orrs	r3, r2
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005090:	4b9e      	ldr	r3, [pc, #632]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80050a0:	4a9a      	ldr	r2, [pc, #616]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050a2:	430b      	orrs	r3, r1
 80050a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80050b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050b4:	2300      	movs	r3, #0
 80050b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80050bc:	460b      	mov	r3, r1
 80050be:	4313      	orrs	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050c2:	4b92      	ldr	r3, [pc, #584]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d0:	4a8e      	ldr	r2, [pc, #568]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050d2:	430b      	orrs	r3, r1
 80050d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80050d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80050e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80050e4:	2300      	movs	r3, #0
 80050e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80050ec:	460b      	mov	r3, r1
 80050ee:	4313      	orrs	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050f2:	4b86      	ldr	r3, [pc, #536]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	4a85      	ldr	r2, [pc, #532]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050fc:	6113      	str	r3, [r2, #16]
 80050fe:	4b83      	ldr	r3, [pc, #524]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005100:	6919      	ldr	r1, [r3, #16]
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800510a:	4a80      	ldr	r2, [pc, #512]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800510c:	430b      	orrs	r3, r1
 800510e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800511c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800511e:	2300      	movs	r3, #0
 8005120:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005122:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005126:	460b      	mov	r3, r1
 8005128:	4313      	orrs	r3, r2
 800512a:	d009      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800512c:	4b77      	ldr	r3, [pc, #476]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800512e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005130:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513a:	4a74      	ldr	r2, [pc, #464]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800513c:	430b      	orrs	r3, r1
 800513e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800514c:	633b      	str	r3, [r7, #48]	@ 0x30
 800514e:	2300      	movs	r3, #0
 8005150:	637b      	str	r3, [r7, #52]	@ 0x34
 8005152:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005156:	460b      	mov	r3, r1
 8005158:	4313      	orrs	r3, r2
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800515c:	4b6b      	ldr	r3, [pc, #428]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800515e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005160:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800516c:	4a67      	ldr	r2, [pc, #412]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800516e:	430b      	orrs	r3, r1
 8005170:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517a:	2100      	movs	r1, #0
 800517c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005184:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005188:	460b      	mov	r3, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	d011      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	3308      	adds	r3, #8
 8005194:	2100      	movs	r1, #0
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fb78 	bl	800588c <RCCEx_PLL2_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80051a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	2100      	movs	r1, #0
 80051bc:	6239      	str	r1, [r7, #32]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051c8:	460b      	mov	r3, r1
 80051ca:	4313      	orrs	r3, r2
 80051cc:	d011      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d2:	3308      	adds	r3, #8
 80051d4:	2101      	movs	r1, #1
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fb58 	bl	800588c <RCCEx_PLL2_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80051e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80051f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	2100      	movs	r1, #0
 80051fc:	61b9      	str	r1, [r7, #24]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005208:	460b      	mov	r3, r1
 800520a:	4313      	orrs	r3, r2
 800520c:	d011      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800520e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005212:	3308      	adds	r3, #8
 8005214:	2102      	movs	r1, #2
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fb38 	bl	800588c <RCCEx_PLL2_Config>
 800521c:	4603      	mov	r3, r0
 800521e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800522e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	2100      	movs	r1, #0
 800523c:	6139      	str	r1, [r7, #16]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005248:	460b      	mov	r3, r1
 800524a:	4313      	orrs	r3, r2
 800524c:	d011      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005252:	3328      	adds	r3, #40	@ 0x28
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fbca 	bl	80059f0 <RCCEx_PLL3_Config>
 800525c:	4603      	mov	r3, r0
 800525e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800526e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	2100      	movs	r1, #0
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005288:	460b      	mov	r3, r1
 800528a:	4313      	orrs	r3, r2
 800528c:	d011      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800528e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005292:	3328      	adds	r3, #40	@ 0x28
 8005294:	2101      	movs	r1, #1
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fbaa 	bl	80059f0 <RCCEx_PLL3_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	2100      	movs	r1, #0
 80052bc:	6039      	str	r1, [r7, #0]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80052c8:	460b      	mov	r3, r1
 80052ca:	4313      	orrs	r3, r2
 80052cc:	d011      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d2:	3328      	adds	r3, #40	@ 0x28
 80052d4:	2102      	movs	r1, #2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fb8a 	bl	80059f0 <RCCEx_PLL3_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80052f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e000      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
}
 8005300:	4618      	mov	r0, r3
 8005302:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005306:	46bd      	mov	sp, r7
 8005308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800530c:	58024400 	.word	0x58024400

08005310 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005314:	f7fe fd96 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8005318:	4602      	mov	r2, r0
 800531a:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	4904      	ldr	r1, [pc, #16]	@ (8005338 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	58024400 	.word	0x58024400
 8005338:	08009964 	.word	0x08009964

0800533c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800533c:	b480      	push	{r7}
 800533e:	b089      	sub	sp, #36	@ 0x24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005344:	4ba1      	ldr	r3, [pc, #644]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800534e:	4b9f      	ldr	r3, [pc, #636]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	0b1b      	lsrs	r3, r3, #12
 8005354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005358:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800535a:	4b9c      	ldr	r3, [pc, #624]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535e:	091b      	lsrs	r3, r3, #4
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005366:	4b99      	ldr	r3, [pc, #612]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536a:	08db      	lsrs	r3, r3, #3
 800536c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8111 	beq.w	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b02      	cmp	r3, #2
 800538e:	f000 8083 	beq.w	8005498 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b02      	cmp	r3, #2
 8005396:	f200 80a1 	bhi.w	80054dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d056      	beq.n	8005454 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80053a6:	e099      	b.n	80054dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053a8:	4b88      	ldr	r3, [pc, #544]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d02d      	beq.n	8005410 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053b4:	4b85      	ldr	r3, [pc, #532]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	08db      	lsrs	r3, r3, #3
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	4a84      	ldr	r2, [pc, #528]	@ (80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
 80053c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053de:	4b7b      	ldr	r3, [pc, #492]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800540e:	e087      	b.n	8005520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800541e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005422:	4b6a      	ldr	r3, [pc, #424]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005432:	ed97 6a03 	vldr	s12, [r7, #12]
 8005436:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800543a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005452:	e065      	b.n	8005520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005466:	4b59      	ldr	r3, [pc, #356]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005476:	ed97 6a03 	vldr	s12, [r7, #12]
 800547a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800547e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800548a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005496:	e043      	b.n	8005520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80055e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80054a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054aa:	4b48      	ldr	r3, [pc, #288]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80054be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054da:	e021      	b.n	8005520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ee:	4b37      	ldr	r3, [pc, #220]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005502:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800551e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005520:	4b2a      	ldr	r3, [pc, #168]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005524:	0a5b      	lsrs	r3, r3, #9
 8005526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800553a:	edd7 6a07 	vldr	s13, [r7, #28]
 800553e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005546:	ee17 2a90 	vmov	r2, s15
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800554e:	4b1f      	ldr	r3, [pc, #124]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005558:	ee07 3a90 	vmov	s15, r3
 800555c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005568:	edd7 6a07 	vldr	s13, [r7, #28]
 800556c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005574:	ee17 2a90 	vmov	r2, s15
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800557c:	4b13      	ldr	r3, [pc, #76]	@ (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	0e1b      	lsrs	r3, r3, #24
 8005582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005596:	edd7 6a07 	vldr	s13, [r7, #28]
 800559a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800559e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a2:	ee17 2a90 	vmov	r2, s15
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80055aa:	e008      	b.n	80055be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	609a      	str	r2, [r3, #8]
}
 80055be:	bf00      	nop
 80055c0:	3724      	adds	r7, #36	@ 0x24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	58024400 	.word	0x58024400
 80055d0:	03d09000 	.word	0x03d09000
 80055d4:	46000000 	.word	0x46000000
 80055d8:	4c742400 	.word	0x4c742400
 80055dc:	4a742400 	.word	0x4a742400
 80055e0:	4bbebc20 	.word	0x4bbebc20

080055e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b089      	sub	sp, #36	@ 0x24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80055f6:	4b9f      	ldr	r3, [pc, #636]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fa:	0d1b      	lsrs	r3, r3, #20
 80055fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005600:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005602:	4b9c      	ldr	r3, [pc, #624]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800560e:	4b99      	ldr	r3, [pc, #612]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005612:	08db      	lsrs	r3, r3, #3
 8005614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005626:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8111 	beq.w	8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b02      	cmp	r3, #2
 8005636:	f000 8083 	beq.w	8005740 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b02      	cmp	r3, #2
 800563e:	f200 80a1 	bhi.w	8005784 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d056      	beq.n	80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800564e:	e099      	b.n	8005784 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005650:	4b88      	ldr	r3, [pc, #544]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d02d      	beq.n	80056b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800565c:	4b85      	ldr	r3, [pc, #532]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	08db      	lsrs	r3, r3, #3
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	4a84      	ldr	r2, [pc, #528]	@ (8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
 800566c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005686:	4b7b      	ldr	r3, [pc, #492]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005696:	ed97 6a03 	vldr	s12, [r7, #12]
 800569a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800587c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800569e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80056b6:	e087      	b.n	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80056c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056da:	ed97 6a03 	vldr	s12, [r7, #12]
 80056de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800587c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056fa:	e065      	b.n	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005706:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800570a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570e:	4b59      	ldr	r3, [pc, #356]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005722:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800587c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800573e:	e043      	b.n	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800574e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005752:	4b48      	ldr	r3, [pc, #288]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005762:	ed97 6a03 	vldr	s12, [r7, #12]
 8005766:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800587c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800576a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005782:	e021      	b.n	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005796:	4b37      	ldr	r3, [pc, #220]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800587c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80057c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057cc:	0a5b      	lsrs	r3, r3, #9
 80057ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ee:	ee17 2a90 	vmov	r2, s15
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80057f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fa:	0c1b      	lsrs	r3, r3, #16
 80057fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005808:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800580c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005810:	edd7 6a07 	vldr	s13, [r7, #28]
 8005814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800581c:	ee17 2a90 	vmov	r2, s15
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005824:	4b13      	ldr	r3, [pc, #76]	@ (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005828:	0e1b      	lsrs	r3, r3, #24
 800582a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005836:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800583a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800583e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800584a:	ee17 2a90 	vmov	r2, s15
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005852:	e008      	b.n	8005866 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	609a      	str	r2, [r3, #8]
}
 8005866:	bf00      	nop
 8005868:	3724      	adds	r7, #36	@ 0x24
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	58024400 	.word	0x58024400
 8005878:	03d09000 	.word	0x03d09000
 800587c:	46000000 	.word	0x46000000
 8005880:	4c742400 	.word	0x4c742400
 8005884:	4a742400 	.word	0x4a742400
 8005888:	4bbebc20 	.word	0x4bbebc20

0800588c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800589a:	4b53      	ldr	r3, [pc, #332]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 800589c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d101      	bne.n	80058aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e099      	b.n	80059de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80058aa:	4b4f      	ldr	r3, [pc, #316]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a4e      	ldr	r2, [pc, #312]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80058b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b6:	f7fb fbed 	bl	8001094 <HAL_GetTick>
 80058ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058bc:	e008      	b.n	80058d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80058be:	f7fb fbe9 	bl	8001094 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e086      	b.n	80059de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058d0:	4b45      	ldr	r3, [pc, #276]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f0      	bne.n	80058be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058dc:	4b42      	ldr	r3, [pc, #264]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80058de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	031b      	lsls	r3, r3, #12
 80058ea:	493f      	ldr	r1, [pc, #252]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	3b01      	subs	r3, #1
 8005900:	025b      	lsls	r3, r3, #9
 8005902:	b29b      	uxth	r3, r3
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	3b01      	subs	r3, #1
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	3b01      	subs	r3, #1
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005920:	4931      	ldr	r1, [pc, #196]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005922:	4313      	orrs	r3, r2
 8005924:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005926:	4b30      	ldr	r3, [pc, #192]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	492d      	ldr	r1, [pc, #180]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005934:	4313      	orrs	r3, r2
 8005936:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005938:	4b2b      	ldr	r3, [pc, #172]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 800593a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593c:	f023 0220 	bic.w	r2, r3, #32
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	4928      	ldr	r1, [pc, #160]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005946:	4313      	orrs	r3, r2
 8005948:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800594a:	4b27      	ldr	r3, [pc, #156]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	4a26      	ldr	r2, [pc, #152]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005950:	f023 0310 	bic.w	r3, r3, #16
 8005954:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005956:	4b24      	ldr	r3, [pc, #144]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800595a:	4b24      	ldr	r3, [pc, #144]	@ (80059ec <RCCEx_PLL2_Config+0x160>)
 800595c:	4013      	ands	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	69d2      	ldr	r2, [r2, #28]
 8005962:	00d2      	lsls	r2, r2, #3
 8005964:	4920      	ldr	r1, [pc, #128]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005966:	4313      	orrs	r3, r2
 8005968:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800596a:	4b1f      	ldr	r3, [pc, #124]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 800596c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596e:	4a1e      	ldr	r2, [pc, #120]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005970:	f043 0310 	orr.w	r3, r3, #16
 8005974:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800597c:	4b1a      	ldr	r3, [pc, #104]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	4a19      	ldr	r2, [pc, #100]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005982:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005986:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005988:	e00f      	b.n	80059aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d106      	bne.n	800599e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005990:	4b15      	ldr	r3, [pc, #84]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005994:	4a14      	ldr	r2, [pc, #80]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 8005996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800599a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800599c:	e005      	b.n	80059aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800599e:	4b12      	ldr	r3, [pc, #72]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80059a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a2:	4a11      	ldr	r2, [pc, #68]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80059a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059aa:	4b0f      	ldr	r3, [pc, #60]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a0e      	ldr	r2, [pc, #56]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80059b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b6:	f7fb fb6d 	bl	8001094 <HAL_GetTick>
 80059ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059bc:	e008      	b.n	80059d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059be:	f7fb fb69 	bl	8001094 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e006      	b.n	80059de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059d0:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <RCCEx_PLL2_Config+0x15c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	58024400 	.word	0x58024400
 80059ec:	ffff0007 	.word	0xffff0007

080059f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059fe:	4b53      	ldr	r3, [pc, #332]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d101      	bne.n	8005a0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e099      	b.n	8005b42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a4e      	ldr	r2, [pc, #312]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1a:	f7fb fb3b 	bl	8001094 <HAL_GetTick>
 8005a1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a20:	e008      	b.n	8005a34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a22:	f7fb fb37 	bl	8001094 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e086      	b.n	8005b42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a34:	4b45      	ldr	r3, [pc, #276]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f0      	bne.n	8005a22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a40:	4b42      	ldr	r3, [pc, #264]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	051b      	lsls	r3, r3, #20
 8005a4e:	493f      	ldr	r1, [pc, #252]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	025b      	lsls	r3, r3, #9
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	061b      	lsls	r3, r3, #24
 8005a80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a84:	4931      	ldr	r1, [pc, #196]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a8a:	4b30      	ldr	r3, [pc, #192]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	492d      	ldr	r1, [pc, #180]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	4928      	ldr	r1, [pc, #160]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005aae:	4b27      	ldr	r3, [pc, #156]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	4a26      	ldr	r2, [pc, #152]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005aba:	4b24      	ldr	r3, [pc, #144]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005abe:	4b24      	ldr	r3, [pc, #144]	@ (8005b50 <RCCEx_PLL3_Config+0x160>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	69d2      	ldr	r2, [r2, #28]
 8005ac6:	00d2      	lsls	r2, r2, #3
 8005ac8:	4920      	ldr	r1, [pc, #128]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ace:	4b1f      	ldr	r3, [pc, #124]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	4a19      	ldr	r2, [pc, #100]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005ae6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005aec:	e00f      	b.n	8005b0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d106      	bne.n	8005b02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005af4:	4b15      	ldr	r3, [pc, #84]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	4a14      	ldr	r2, [pc, #80]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005afa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005afe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b00:	e005      	b.n	8005b0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b02:	4b12      	ldr	r3, [pc, #72]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	4a11      	ldr	r2, [pc, #68]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005b08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a0e      	ldr	r2, [pc, #56]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fb fabb 	bl	8001094 <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b20:	e008      	b.n	8005b34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b22:	f7fb fab7 	bl	8001094 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e006      	b.n	8005b42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b34:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <RCCEx_PLL3_Config+0x15c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	ffff0007 	.word	0xffff0007

08005b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e042      	b.n	8005bec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d106      	bne.n	8005b7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7fb f87d 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2224      	movs	r2, #36	@ 0x24
 8005b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 fa14 	bl	8006fcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fca9 	bl	80064fc <UART_SetConfig>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e01b      	b.n	8005bec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 fa93 	bl	8007110 <UART_CheckIdleState>
 8005bea:	4603      	mov	r3, r0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08a      	sub	sp, #40	@ 0x28
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	4613      	mov	r3, r2
 8005c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d17b      	bne.n	8005d06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <HAL_UART_Transmit+0x26>
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e074      	b.n	8005d08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2221      	movs	r2, #33	@ 0x21
 8005c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c2e:	f7fb fa31 	bl	8001094 <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c4c:	d108      	bne.n	8005c60 <HAL_UART_Transmit+0x6c>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d104      	bne.n	8005c60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	e003      	b.n	8005c68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c68:	e030      	b.n	8005ccc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2200      	movs	r2, #0
 8005c72:	2180      	movs	r1, #128	@ 0x80
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f001 faf5 	bl	8007264 <UART_WaitOnFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e03d      	b.n	8005d08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ca0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	3302      	adds	r3, #2
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	e007      	b.n	8005cba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1c8      	bne.n	8005c6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2140      	movs	r1, #64	@ 0x40
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f001 fabe 	bl	8007264 <UART_WaitOnFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e006      	b.n	8005d08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
  }
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b0ba      	sub	sp, #232	@ 0xe8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005d3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005d3e:	4013      	ands	r3, r2
 8005d40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11b      	bne.n	8005d84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d015      	beq.n	8005d84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d105      	bne.n	8005d70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8393 	beq.w	80064a0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	4798      	blx	r3
      }
      return;
 8005d82:	e38d      	b.n	80064a0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8123 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005d92:	4b8d      	ldr	r3, [pc, #564]	@ (8005fc8 <HAL_UART_IRQHandler+0x2b8>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005d9e:	4b8b      	ldr	r3, [pc, #556]	@ (8005fcc <HAL_UART_IRQHandler+0x2bc>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8116 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d011      	beq.n	8005dd8 <HAL_UART_IRQHandler+0xc8>
 8005db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dce:	f043 0201 	orr.w	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d011      	beq.n	8005e08 <HAL_UART_IRQHandler+0xf8>
 8005de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00b      	beq.n	8005e08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2202      	movs	r2, #2
 8005df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfe:	f043 0204 	orr.w	r2, r3, #4
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d011      	beq.n	8005e38 <HAL_UART_IRQHandler+0x128>
 8005e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2204      	movs	r2, #4
 8005e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2e:	f043 0202 	orr.w	r2, r3, #2
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d017      	beq.n	8005e74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d105      	bne.n	8005e5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005e54:	4b5c      	ldr	r3, [pc, #368]	@ (8005fc8 <HAL_UART_IRQHandler+0x2b8>)
 8005e56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00b      	beq.n	8005e74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2208      	movs	r2, #8
 8005e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6a:	f043 0208 	orr.w	r2, r3, #8
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d012      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x196>
 8005e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00c      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e9c:	f043 0220 	orr.w	r2, r3, #32
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 82f9 	beq.w	80064a4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d013      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efa:	2b40      	cmp	r3, #64	@ 0x40
 8005efc:	d005      	beq.n	8005f0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d054      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 fa18 	bl	8007340 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1a:	2b40      	cmp	r3, #64	@ 0x40
 8005f1c:	d146      	bne.n	8005fac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3308      	adds	r3, #8
 8005f46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1d9      	bne.n	8005f1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d017      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f7a:	4a15      	ldr	r2, [pc, #84]	@ (8005fd0 <HAL_UART_IRQHandler+0x2c0>)
 8005f7c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fb fd43 	bl	8001a10 <HAL_DMA_Abort_IT>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d019      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa2:	e00f      	b.n	8005fc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fa93 	bl	80064d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005faa:	e00b      	b.n	8005fc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fa8f 	bl	80064d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb2:	e007      	b.n	8005fc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa8b 	bl	80064d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005fc2:	e26f      	b.n	80064a4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	bf00      	nop
    return;
 8005fc6:	e26d      	b.n	80064a4 <HAL_UART_IRQHandler+0x794>
 8005fc8:	10000001 	.word	0x10000001
 8005fcc:	04000120 	.word	0x04000120
 8005fd0:	0800740d 	.word	0x0800740d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	f040 8203 	bne.w	80063e4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 81fc 	beq.w	80063e4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 81f5 	beq.w	80063e4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2210      	movs	r2, #16
 8006000:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600c:	2b40      	cmp	r3, #64	@ 0x40
 800600e:	f040 816d 	bne.w	80062ec <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4aa4      	ldr	r2, [pc, #656]	@ (80062ac <HAL_UART_IRQHandler+0x59c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d068      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4aa1      	ldr	r2, [pc, #644]	@ (80062b0 <HAL_UART_IRQHandler+0x5a0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d061      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a9f      	ldr	r2, [pc, #636]	@ (80062b4 <HAL_UART_IRQHandler+0x5a4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d05a      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a9c      	ldr	r2, [pc, #624]	@ (80062b8 <HAL_UART_IRQHandler+0x5a8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d053      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a9a      	ldr	r2, [pc, #616]	@ (80062bc <HAL_UART_IRQHandler+0x5ac>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d04c      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a97      	ldr	r2, [pc, #604]	@ (80062c0 <HAL_UART_IRQHandler+0x5b0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d045      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a95      	ldr	r2, [pc, #596]	@ (80062c4 <HAL_UART_IRQHandler+0x5b4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d03e      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a92      	ldr	r2, [pc, #584]	@ (80062c8 <HAL_UART_IRQHandler+0x5b8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d037      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a90      	ldr	r2, [pc, #576]	@ (80062cc <HAL_UART_IRQHandler+0x5bc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d030      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a8d      	ldr	r2, [pc, #564]	@ (80062d0 <HAL_UART_IRQHandler+0x5c0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d029      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a8b      	ldr	r2, [pc, #556]	@ (80062d4 <HAL_UART_IRQHandler+0x5c4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d022      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a88      	ldr	r2, [pc, #544]	@ (80062d8 <HAL_UART_IRQHandler+0x5c8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01b      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a86      	ldr	r2, [pc, #536]	@ (80062dc <HAL_UART_IRQHandler+0x5cc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d014      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a83      	ldr	r2, [pc, #524]	@ (80062e0 <HAL_UART_IRQHandler+0x5d0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00d      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a81      	ldr	r2, [pc, #516]	@ (80062e4 <HAL_UART_IRQHandler+0x5d4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d006      	beq.n	80060f2 <HAL_UART_IRQHandler+0x3e2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a7e      	ldr	r2, [pc, #504]	@ (80062e8 <HAL_UART_IRQHandler+0x5d8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d106      	bne.n	8006100 <HAL_UART_IRQHandler+0x3f0>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	e005      	b.n	800610c <HAL_UART_IRQHandler+0x3fc>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006110:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 80ad 	beq.w	8006274 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006120:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006124:	429a      	cmp	r2, r3
 8006126:	f080 80a5 	bcs.w	8006274 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006130:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006140:	f000 8087 	beq.w	8006252 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006158:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800615c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800616e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006172:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800617a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1da      	bne.n	8006144 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3308      	adds	r3, #8
 8006194:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800619e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3308      	adds	r3, #8
 80061ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e1      	bne.n	800618e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3308      	adds	r3, #8
 80061d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3308      	adds	r3, #8
 80061ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e3      	bne.n	80061ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800621e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006220:	f023 0310 	bic.w	r3, r3, #16
 8006224:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006232:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006234:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006238:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e4      	bne.n	8006210 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800624c:	4618      	mov	r0, r3
 800624e:	f7fb f8c1 	bl	80013d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006264:	b29b      	uxth	r3, r3
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	b29b      	uxth	r3, r3
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f939 	bl	80064e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006272:	e119      	b.n	80064a8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800627a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800627e:	429a      	cmp	r2, r3
 8006280:	f040 8112 	bne.w	80064a8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006290:	f040 810a 	bne.w	80064a8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f91e 	bl	80064e4 <HAL_UARTEx_RxEventCallback>
      return;
 80062a8:	e0fe      	b.n	80064a8 <HAL_UART_IRQHandler+0x798>
 80062aa:	bf00      	nop
 80062ac:	40020010 	.word	0x40020010
 80062b0:	40020028 	.word	0x40020028
 80062b4:	40020040 	.word	0x40020040
 80062b8:	40020058 	.word	0x40020058
 80062bc:	40020070 	.word	0x40020070
 80062c0:	40020088 	.word	0x40020088
 80062c4:	400200a0 	.word	0x400200a0
 80062c8:	400200b8 	.word	0x400200b8
 80062cc:	40020410 	.word	0x40020410
 80062d0:	40020428 	.word	0x40020428
 80062d4:	40020440 	.word	0x40020440
 80062d8:	40020458 	.word	0x40020458
 80062dc:	40020470 	.word	0x40020470
 80062e0:	40020488 	.word	0x40020488
 80062e4:	400204a0 	.word	0x400204a0
 80062e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80cf 	beq.w	80064ac <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800630e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 80ca 	beq.w	80064ac <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800632c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800633a:	647b      	str	r3, [r7, #68]	@ 0x44
 800633c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006340:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e4      	bne.n	8006318 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3308      	adds	r3, #8
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	623b      	str	r3, [r7, #32]
   return(result);
 800635e:	6a3a      	ldr	r2, [r7, #32]
 8006360:	4b55      	ldr	r3, [pc, #340]	@ (80064b8 <HAL_UART_IRQHandler+0x7a8>)
 8006362:	4013      	ands	r3, r2
 8006364:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3308      	adds	r3, #8
 800636e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006372:	633a      	str	r2, [r7, #48]	@ 0x30
 8006374:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e3      	bne.n	800634e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0310 	bic.w	r3, r3, #16
 80063ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063bc:	61fb      	str	r3, [r7, #28]
 80063be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	69b9      	ldr	r1, [r7, #24]
 80063c2:	69fa      	ldr	r2, [r7, #28]
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	617b      	str	r3, [r7, #20]
   return(result);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e4      	bne.n	800639a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f881 	bl	80064e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063e2:	e063      	b.n	80064ac <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <HAL_UART_IRQHandler+0x6fe>
 80063f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d008      	beq.n	800640e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006404:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f001 f83d 	bl	8007486 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800640c:	e051      	b.n	80064b2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800640e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006416:	2b00      	cmp	r3, #0
 8006418:	d014      	beq.n	8006444 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800641a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006422:	2b00      	cmp	r3, #0
 8006424:	d105      	bne.n	8006432 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800642a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006436:	2b00      	cmp	r3, #0
 8006438:	d03a      	beq.n	80064b0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
    }
    return;
 8006442:	e035      	b.n	80064b0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <HAL_UART_IRQHandler+0x754>
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 ffe7 	bl	8007430 <UART_EndTransmit_IT>
    return;
 8006462:	e026      	b.n	80064b2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006468:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <HAL_UART_IRQHandler+0x774>
 8006470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006474:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 f816 	bl	80074ae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006482:	e016      	b.n	80064b2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006488:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d010      	beq.n	80064b2 <HAL_UART_IRQHandler+0x7a2>
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006494:	2b00      	cmp	r3, #0
 8006496:	da0c      	bge.n	80064b2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fffe 	bl	800749a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800649e:	e008      	b.n	80064b2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80064a0:	bf00      	nop
 80064a2:	e006      	b.n	80064b2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80064a4:	bf00      	nop
 80064a6:	e004      	b.n	80064b2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80064a8:	bf00      	nop
 80064aa:	e002      	b.n	80064b2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80064ac:	bf00      	nop
 80064ae:	e000      	b.n	80064b2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80064b0:	bf00      	nop
  }
}
 80064b2:	37e8      	adds	r7, #232	@ 0xe8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	effffffe 	.word	0xeffffffe

080064bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006500:	b092      	sub	sp, #72	@ 0x48
 8006502:	af00      	add	r7, sp, #0
 8006504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	431a      	orrs	r2, r3
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	431a      	orrs	r2, r3
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	4313      	orrs	r3, r2
 8006522:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4bbe      	ldr	r3, [pc, #760]	@ (8006824 <UART_SetConfig+0x328>)
 800652c:	4013      	ands	r3, r2
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006534:	430b      	orrs	r3, r1
 8006536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4ab3      	ldr	r2, [pc, #716]	@ (8006828 <UART_SetConfig+0x32c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006564:	4313      	orrs	r3, r2
 8006566:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	4baf      	ldr	r3, [pc, #700]	@ (800682c <UART_SetConfig+0x330>)
 8006570:	4013      	ands	r3, r2
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006578:	430b      	orrs	r3, r1
 800657a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006582:	f023 010f 	bic.w	r1, r3, #15
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4aa6      	ldr	r2, [pc, #664]	@ (8006830 <UART_SetConfig+0x334>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d177      	bne.n	800668c <UART_SetConfig+0x190>
 800659c:	4ba5      	ldr	r3, [pc, #660]	@ (8006834 <UART_SetConfig+0x338>)
 800659e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065a4:	2b28      	cmp	r3, #40	@ 0x28
 80065a6:	d86d      	bhi.n	8006684 <UART_SetConfig+0x188>
 80065a8:	a201      	add	r2, pc, #4	@ (adr r2, 80065b0 <UART_SetConfig+0xb4>)
 80065aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ae:	bf00      	nop
 80065b0:	08006655 	.word	0x08006655
 80065b4:	08006685 	.word	0x08006685
 80065b8:	08006685 	.word	0x08006685
 80065bc:	08006685 	.word	0x08006685
 80065c0:	08006685 	.word	0x08006685
 80065c4:	08006685 	.word	0x08006685
 80065c8:	08006685 	.word	0x08006685
 80065cc:	08006685 	.word	0x08006685
 80065d0:	0800665d 	.word	0x0800665d
 80065d4:	08006685 	.word	0x08006685
 80065d8:	08006685 	.word	0x08006685
 80065dc:	08006685 	.word	0x08006685
 80065e0:	08006685 	.word	0x08006685
 80065e4:	08006685 	.word	0x08006685
 80065e8:	08006685 	.word	0x08006685
 80065ec:	08006685 	.word	0x08006685
 80065f0:	08006665 	.word	0x08006665
 80065f4:	08006685 	.word	0x08006685
 80065f8:	08006685 	.word	0x08006685
 80065fc:	08006685 	.word	0x08006685
 8006600:	08006685 	.word	0x08006685
 8006604:	08006685 	.word	0x08006685
 8006608:	08006685 	.word	0x08006685
 800660c:	08006685 	.word	0x08006685
 8006610:	0800666d 	.word	0x0800666d
 8006614:	08006685 	.word	0x08006685
 8006618:	08006685 	.word	0x08006685
 800661c:	08006685 	.word	0x08006685
 8006620:	08006685 	.word	0x08006685
 8006624:	08006685 	.word	0x08006685
 8006628:	08006685 	.word	0x08006685
 800662c:	08006685 	.word	0x08006685
 8006630:	08006675 	.word	0x08006675
 8006634:	08006685 	.word	0x08006685
 8006638:	08006685 	.word	0x08006685
 800663c:	08006685 	.word	0x08006685
 8006640:	08006685 	.word	0x08006685
 8006644:	08006685 	.word	0x08006685
 8006648:	08006685 	.word	0x08006685
 800664c:	08006685 	.word	0x08006685
 8006650:	0800667d 	.word	0x0800667d
 8006654:	2301      	movs	r3, #1
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665a:	e222      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 800665c:	2304      	movs	r3, #4
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006662:	e21e      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006664:	2308      	movs	r3, #8
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666a:	e21a      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 800666c:	2310      	movs	r3, #16
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006672:	e216      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006674:	2320      	movs	r3, #32
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e212      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 800667c:	2340      	movs	r3, #64	@ 0x40
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e20e      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668a:	e20a      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a69      	ldr	r2, [pc, #420]	@ (8006838 <UART_SetConfig+0x33c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d130      	bne.n	80066f8 <UART_SetConfig+0x1fc>
 8006696:	4b67      	ldr	r3, [pc, #412]	@ (8006834 <UART_SetConfig+0x338>)
 8006698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	2b05      	cmp	r3, #5
 80066a0:	d826      	bhi.n	80066f0 <UART_SetConfig+0x1f4>
 80066a2:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <UART_SetConfig+0x1ac>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066c1 	.word	0x080066c1
 80066ac:	080066c9 	.word	0x080066c9
 80066b0:	080066d1 	.word	0x080066d1
 80066b4:	080066d9 	.word	0x080066d9
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	080066e9 	.word	0x080066e9
 80066c0:	2300      	movs	r3, #0
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c6:	e1ec      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e1e8      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d6:	e1e4      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066de:	e1e0      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80066e0:	2320      	movs	r3, #32
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e1dc      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80066e8:	2340      	movs	r3, #64	@ 0x40
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e1d8      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80066f0:	2380      	movs	r3, #128	@ 0x80
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f6:	e1d4      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a4f      	ldr	r2, [pc, #316]	@ (800683c <UART_SetConfig+0x340>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d130      	bne.n	8006764 <UART_SetConfig+0x268>
 8006702:	4b4c      	ldr	r3, [pc, #304]	@ (8006834 <UART_SetConfig+0x338>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b05      	cmp	r3, #5
 800670c:	d826      	bhi.n	800675c <UART_SetConfig+0x260>
 800670e:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <UART_SetConfig+0x218>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	0800672d 	.word	0x0800672d
 8006718:	08006735 	.word	0x08006735
 800671c:	0800673d 	.word	0x0800673d
 8006720:	08006745 	.word	0x08006745
 8006724:	0800674d 	.word	0x0800674d
 8006728:	08006755 	.word	0x08006755
 800672c:	2300      	movs	r3, #0
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006732:	e1b6      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006734:	2304      	movs	r3, #4
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673a:	e1b2      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 800673c:	2308      	movs	r3, #8
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006742:	e1ae      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006744:	2310      	movs	r3, #16
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674a:	e1aa      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 800674c:	2320      	movs	r3, #32
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006752:	e1a6      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006754:	2340      	movs	r3, #64	@ 0x40
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e1a2      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 800675c:	2380      	movs	r3, #128	@ 0x80
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006762:	e19e      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a35      	ldr	r2, [pc, #212]	@ (8006840 <UART_SetConfig+0x344>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d130      	bne.n	80067d0 <UART_SetConfig+0x2d4>
 800676e:	4b31      	ldr	r3, [pc, #196]	@ (8006834 <UART_SetConfig+0x338>)
 8006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b05      	cmp	r3, #5
 8006778:	d826      	bhi.n	80067c8 <UART_SetConfig+0x2cc>
 800677a:	a201      	add	r2, pc, #4	@ (adr r2, 8006780 <UART_SetConfig+0x284>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	08006799 	.word	0x08006799
 8006784:	080067a1 	.word	0x080067a1
 8006788:	080067a9 	.word	0x080067a9
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067b9 	.word	0x080067b9
 8006794:	080067c1 	.word	0x080067c1
 8006798:	2300      	movs	r3, #0
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679e:	e180      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80067a0:	2304      	movs	r3, #4
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a6:	e17c      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80067a8:	2308      	movs	r3, #8
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ae:	e178      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80067b0:	2310      	movs	r3, #16
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b6:	e174      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80067b8:	2320      	movs	r3, #32
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e170      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80067c0:	2340      	movs	r3, #64	@ 0x40
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e16c      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80067c8:	2380      	movs	r3, #128	@ 0x80
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ce:	e168      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006844 <UART_SetConfig+0x348>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d142      	bne.n	8006860 <UART_SetConfig+0x364>
 80067da:	4b16      	ldr	r3, [pc, #88]	@ (8006834 <UART_SetConfig+0x338>)
 80067dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b05      	cmp	r3, #5
 80067e4:	d838      	bhi.n	8006858 <UART_SetConfig+0x35c>
 80067e6:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <UART_SetConfig+0x2f0>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006805 	.word	0x08006805
 80067f0:	0800680d 	.word	0x0800680d
 80067f4:	08006815 	.word	0x08006815
 80067f8:	0800681d 	.word	0x0800681d
 80067fc:	08006849 	.word	0x08006849
 8006800:	08006851 	.word	0x08006851
 8006804:	2300      	movs	r3, #0
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e14a      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 800680c:	2304      	movs	r3, #4
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e146      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006814:	2308      	movs	r3, #8
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e142      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 800681c:	2310      	movs	r3, #16
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006822:	e13e      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006824:	cfff69f3 	.word	0xcfff69f3
 8006828:	58000c00 	.word	0x58000c00
 800682c:	11fff4ff 	.word	0x11fff4ff
 8006830:	40011000 	.word	0x40011000
 8006834:	58024400 	.word	0x58024400
 8006838:	40004400 	.word	0x40004400
 800683c:	40004800 	.word	0x40004800
 8006840:	40004c00 	.word	0x40004c00
 8006844:	40005000 	.word	0x40005000
 8006848:	2320      	movs	r3, #32
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684e:	e128      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006850:	2340      	movs	r3, #64	@ 0x40
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006856:	e124      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006858:	2380      	movs	r3, #128	@ 0x80
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685e:	e120      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4acb      	ldr	r2, [pc, #812]	@ (8006b94 <UART_SetConfig+0x698>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d176      	bne.n	8006958 <UART_SetConfig+0x45c>
 800686a:	4bcb      	ldr	r3, [pc, #812]	@ (8006b98 <UART_SetConfig+0x69c>)
 800686c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800686e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006872:	2b28      	cmp	r3, #40	@ 0x28
 8006874:	d86c      	bhi.n	8006950 <UART_SetConfig+0x454>
 8006876:	a201      	add	r2, pc, #4	@ (adr r2, 800687c <UART_SetConfig+0x380>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	08006921 	.word	0x08006921
 8006880:	08006951 	.word	0x08006951
 8006884:	08006951 	.word	0x08006951
 8006888:	08006951 	.word	0x08006951
 800688c:	08006951 	.word	0x08006951
 8006890:	08006951 	.word	0x08006951
 8006894:	08006951 	.word	0x08006951
 8006898:	08006951 	.word	0x08006951
 800689c:	08006929 	.word	0x08006929
 80068a0:	08006951 	.word	0x08006951
 80068a4:	08006951 	.word	0x08006951
 80068a8:	08006951 	.word	0x08006951
 80068ac:	08006951 	.word	0x08006951
 80068b0:	08006951 	.word	0x08006951
 80068b4:	08006951 	.word	0x08006951
 80068b8:	08006951 	.word	0x08006951
 80068bc:	08006931 	.word	0x08006931
 80068c0:	08006951 	.word	0x08006951
 80068c4:	08006951 	.word	0x08006951
 80068c8:	08006951 	.word	0x08006951
 80068cc:	08006951 	.word	0x08006951
 80068d0:	08006951 	.word	0x08006951
 80068d4:	08006951 	.word	0x08006951
 80068d8:	08006951 	.word	0x08006951
 80068dc:	08006939 	.word	0x08006939
 80068e0:	08006951 	.word	0x08006951
 80068e4:	08006951 	.word	0x08006951
 80068e8:	08006951 	.word	0x08006951
 80068ec:	08006951 	.word	0x08006951
 80068f0:	08006951 	.word	0x08006951
 80068f4:	08006951 	.word	0x08006951
 80068f8:	08006951 	.word	0x08006951
 80068fc:	08006941 	.word	0x08006941
 8006900:	08006951 	.word	0x08006951
 8006904:	08006951 	.word	0x08006951
 8006908:	08006951 	.word	0x08006951
 800690c:	08006951 	.word	0x08006951
 8006910:	08006951 	.word	0x08006951
 8006914:	08006951 	.word	0x08006951
 8006918:	08006951 	.word	0x08006951
 800691c:	08006949 	.word	0x08006949
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006926:	e0bc      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006928:	2304      	movs	r3, #4
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692e:	e0b8      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006930:	2308      	movs	r3, #8
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006936:	e0b4      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006938:	2310      	movs	r3, #16
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693e:	e0b0      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006940:	2320      	movs	r3, #32
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006946:	e0ac      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006948:	2340      	movs	r3, #64	@ 0x40
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694e:	e0a8      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006950:	2380      	movs	r3, #128	@ 0x80
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006956:	e0a4      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a8f      	ldr	r2, [pc, #572]	@ (8006b9c <UART_SetConfig+0x6a0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d130      	bne.n	80069c4 <UART_SetConfig+0x4c8>
 8006962:	4b8d      	ldr	r3, [pc, #564]	@ (8006b98 <UART_SetConfig+0x69c>)
 8006964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	2b05      	cmp	r3, #5
 800696c:	d826      	bhi.n	80069bc <UART_SetConfig+0x4c0>
 800696e:	a201      	add	r2, pc, #4	@ (adr r2, 8006974 <UART_SetConfig+0x478>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	0800698d 	.word	0x0800698d
 8006978:	08006995 	.word	0x08006995
 800697c:	0800699d 	.word	0x0800699d
 8006980:	080069a5 	.word	0x080069a5
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069b5 	.word	0x080069b5
 800698c:	2300      	movs	r3, #0
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006992:	e086      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006994:	2304      	movs	r3, #4
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699a:	e082      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 800699c:	2308      	movs	r3, #8
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a2:	e07e      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80069a4:	2310      	movs	r3, #16
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069aa:	e07a      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80069ac:	2320      	movs	r3, #32
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b2:	e076      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80069b4:	2340      	movs	r3, #64	@ 0x40
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ba:	e072      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80069bc:	2380      	movs	r3, #128	@ 0x80
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c2:	e06e      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a75      	ldr	r2, [pc, #468]	@ (8006ba0 <UART_SetConfig+0x6a4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d130      	bne.n	8006a30 <UART_SetConfig+0x534>
 80069ce:	4b72      	ldr	r3, [pc, #456]	@ (8006b98 <UART_SetConfig+0x69c>)
 80069d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	2b05      	cmp	r3, #5
 80069d8:	d826      	bhi.n	8006a28 <UART_SetConfig+0x52c>
 80069da:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <UART_SetConfig+0x4e4>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	080069f9 	.word	0x080069f9
 80069e4:	08006a01 	.word	0x08006a01
 80069e8:	08006a09 	.word	0x08006a09
 80069ec:	08006a11 	.word	0x08006a11
 80069f0:	08006a19 	.word	0x08006a19
 80069f4:	08006a21 	.word	0x08006a21
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fe:	e050      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a00:	2304      	movs	r3, #4
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a06:	e04c      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a08:	2308      	movs	r3, #8
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0e:	e048      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a10:	2310      	movs	r3, #16
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a16:	e044      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a18:	2320      	movs	r3, #32
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1e:	e040      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a20:	2340      	movs	r3, #64	@ 0x40
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a26:	e03c      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a28:	2380      	movs	r3, #128	@ 0x80
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2e:	e038      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a5b      	ldr	r2, [pc, #364]	@ (8006ba4 <UART_SetConfig+0x6a8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d130      	bne.n	8006a9c <UART_SetConfig+0x5a0>
 8006a3a:	4b57      	ldr	r3, [pc, #348]	@ (8006b98 <UART_SetConfig+0x69c>)
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	d826      	bhi.n	8006a94 <UART_SetConfig+0x598>
 8006a46:	a201      	add	r2, pc, #4	@ (adr r2, 8006a4c <UART_SetConfig+0x550>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006a65 	.word	0x08006a65
 8006a50:	08006a6d 	.word	0x08006a6d
 8006a54:	08006a75 	.word	0x08006a75
 8006a58:	08006a7d 	.word	0x08006a7d
 8006a5c:	08006a85 	.word	0x08006a85
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	2302      	movs	r3, #2
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6a:	e01a      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a72:	e016      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a74:	2308      	movs	r3, #8
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7a:	e012      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a82:	e00e      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a84:	2320      	movs	r3, #32
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8a:	e00a      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a8c:	2340      	movs	r3, #64	@ 0x40
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a92:	e006      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a94:	2380      	movs	r3, #128	@ 0x80
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9a:	e002      	b.n	8006aa2 <UART_SetConfig+0x5a6>
 8006a9c:	2380      	movs	r3, #128	@ 0x80
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8006ba4 <UART_SetConfig+0x6a8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	f040 80f8 	bne.w	8006c9e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006aae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	dc46      	bgt.n	8006b44 <UART_SetConfig+0x648>
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	f2c0 8082 	blt.w	8006bc0 <UART_SetConfig+0x6c4>
 8006abc:	3b02      	subs	r3, #2
 8006abe:	2b1e      	cmp	r3, #30
 8006ac0:	d87e      	bhi.n	8006bc0 <UART_SetConfig+0x6c4>
 8006ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac8 <UART_SetConfig+0x5cc>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006b4b 	.word	0x08006b4b
 8006acc:	08006bc1 	.word	0x08006bc1
 8006ad0:	08006b53 	.word	0x08006b53
 8006ad4:	08006bc1 	.word	0x08006bc1
 8006ad8:	08006bc1 	.word	0x08006bc1
 8006adc:	08006bc1 	.word	0x08006bc1
 8006ae0:	08006b63 	.word	0x08006b63
 8006ae4:	08006bc1 	.word	0x08006bc1
 8006ae8:	08006bc1 	.word	0x08006bc1
 8006aec:	08006bc1 	.word	0x08006bc1
 8006af0:	08006bc1 	.word	0x08006bc1
 8006af4:	08006bc1 	.word	0x08006bc1
 8006af8:	08006bc1 	.word	0x08006bc1
 8006afc:	08006bc1 	.word	0x08006bc1
 8006b00:	08006b73 	.word	0x08006b73
 8006b04:	08006bc1 	.word	0x08006bc1
 8006b08:	08006bc1 	.word	0x08006bc1
 8006b0c:	08006bc1 	.word	0x08006bc1
 8006b10:	08006bc1 	.word	0x08006bc1
 8006b14:	08006bc1 	.word	0x08006bc1
 8006b18:	08006bc1 	.word	0x08006bc1
 8006b1c:	08006bc1 	.word	0x08006bc1
 8006b20:	08006bc1 	.word	0x08006bc1
 8006b24:	08006bc1 	.word	0x08006bc1
 8006b28:	08006bc1 	.word	0x08006bc1
 8006b2c:	08006bc1 	.word	0x08006bc1
 8006b30:	08006bc1 	.word	0x08006bc1
 8006b34:	08006bc1 	.word	0x08006bc1
 8006b38:	08006bc1 	.word	0x08006bc1
 8006b3c:	08006bc1 	.word	0x08006bc1
 8006b40:	08006bb3 	.word	0x08006bb3
 8006b44:	2b40      	cmp	r3, #64	@ 0x40
 8006b46:	d037      	beq.n	8006bb8 <UART_SetConfig+0x6bc>
 8006b48:	e03a      	b.n	8006bc0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b4a:	f7fe fbe1 	bl	8005310 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b50:	e03c      	b.n	8006bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fbf0 	bl	800533c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b60:	e034      	b.n	8006bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b62:	f107 0318 	add.w	r3, r7, #24
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fd3c 	bl	80055e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b70:	e02c      	b.n	8006bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b72:	4b09      	ldr	r3, [pc, #36]	@ (8006b98 <UART_SetConfig+0x69c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d016      	beq.n	8006bac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b7e:	4b06      	ldr	r3, [pc, #24]	@ (8006b98 <UART_SetConfig+0x69c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	08db      	lsrs	r3, r3, #3
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	4a07      	ldr	r2, [pc, #28]	@ (8006ba8 <UART_SetConfig+0x6ac>)
 8006b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b90:	e01c      	b.n	8006bcc <UART_SetConfig+0x6d0>
 8006b92:	bf00      	nop
 8006b94:	40011400 	.word	0x40011400
 8006b98:	58024400 	.word	0x58024400
 8006b9c:	40007800 	.word	0x40007800
 8006ba0:	40007c00 	.word	0x40007c00
 8006ba4:	58000c00 	.word	0x58000c00
 8006ba8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006bac:	4b9d      	ldr	r3, [pc, #628]	@ (8006e24 <UART_SetConfig+0x928>)
 8006bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bb0:	e00c      	b.n	8006bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bb2:	4b9d      	ldr	r3, [pc, #628]	@ (8006e28 <UART_SetConfig+0x92c>)
 8006bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bb6:	e009      	b.n	8006bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bbe:	e005      	b.n	8006bcc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006bca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 81de 	beq.w	8006f90 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd8:	4a94      	ldr	r2, [pc, #592]	@ (8006e2c <UART_SetConfig+0x930>)
 8006bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bde:	461a      	mov	r2, r3
 8006be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006be6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	4413      	add	r3, r2
 8006bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d305      	bcc.n	8006c04 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d903      	bls.n	8006c0c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c0a:	e1c1      	b.n	8006f90 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c0e:	2200      	movs	r2, #0
 8006c10:	60bb      	str	r3, [r7, #8]
 8006c12:	60fa      	str	r2, [r7, #12]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	4a84      	ldr	r2, [pc, #528]	@ (8006e2c <UART_SetConfig+0x930>)
 8006c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2200      	movs	r2, #0
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c2e:	f7f9 fbaf 	bl	8000390 <__aeabi_uldivmod>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4610      	mov	r0, r2
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f04f 0200 	mov.w	r2, #0
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	020b      	lsls	r3, r1, #8
 8006c44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c48:	0202      	lsls	r2, r0, #8
 8006c4a:	6979      	ldr	r1, [r7, #20]
 8006c4c:	6849      	ldr	r1, [r1, #4]
 8006c4e:	0849      	lsrs	r1, r1, #1
 8006c50:	2000      	movs	r0, #0
 8006c52:	460c      	mov	r4, r1
 8006c54:	4605      	mov	r5, r0
 8006c56:	eb12 0804 	adds.w	r8, r2, r4
 8006c5a:	eb43 0905 	adc.w	r9, r3, r5
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	469a      	mov	sl, r3
 8006c66:	4693      	mov	fp, r2
 8006c68:	4652      	mov	r2, sl
 8006c6a:	465b      	mov	r3, fp
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	4649      	mov	r1, r9
 8006c70:	f7f9 fb8e 	bl	8000390 <__aeabi_uldivmod>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4613      	mov	r3, r2
 8006c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c82:	d308      	bcc.n	8006c96 <UART_SetConfig+0x79a>
 8006c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c8a:	d204      	bcs.n	8006c96 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c92:	60da      	str	r2, [r3, #12]
 8006c94:	e17c      	b.n	8006f90 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c9c:	e178      	b.n	8006f90 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ca6:	f040 80c5 	bne.w	8006e34 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006caa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	dc48      	bgt.n	8006d44 <UART_SetConfig+0x848>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	db7b      	blt.n	8006dae <UART_SetConfig+0x8b2>
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d879      	bhi.n	8006dae <UART_SetConfig+0x8b2>
 8006cba:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc0 <UART_SetConfig+0x7c4>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006d4b 	.word	0x08006d4b
 8006cc4:	08006d53 	.word	0x08006d53
 8006cc8:	08006daf 	.word	0x08006daf
 8006ccc:	08006daf 	.word	0x08006daf
 8006cd0:	08006d5b 	.word	0x08006d5b
 8006cd4:	08006daf 	.word	0x08006daf
 8006cd8:	08006daf 	.word	0x08006daf
 8006cdc:	08006daf 	.word	0x08006daf
 8006ce0:	08006d6b 	.word	0x08006d6b
 8006ce4:	08006daf 	.word	0x08006daf
 8006ce8:	08006daf 	.word	0x08006daf
 8006cec:	08006daf 	.word	0x08006daf
 8006cf0:	08006daf 	.word	0x08006daf
 8006cf4:	08006daf 	.word	0x08006daf
 8006cf8:	08006daf 	.word	0x08006daf
 8006cfc:	08006daf 	.word	0x08006daf
 8006d00:	08006d7b 	.word	0x08006d7b
 8006d04:	08006daf 	.word	0x08006daf
 8006d08:	08006daf 	.word	0x08006daf
 8006d0c:	08006daf 	.word	0x08006daf
 8006d10:	08006daf 	.word	0x08006daf
 8006d14:	08006daf 	.word	0x08006daf
 8006d18:	08006daf 	.word	0x08006daf
 8006d1c:	08006daf 	.word	0x08006daf
 8006d20:	08006daf 	.word	0x08006daf
 8006d24:	08006daf 	.word	0x08006daf
 8006d28:	08006daf 	.word	0x08006daf
 8006d2c:	08006daf 	.word	0x08006daf
 8006d30:	08006daf 	.word	0x08006daf
 8006d34:	08006daf 	.word	0x08006daf
 8006d38:	08006daf 	.word	0x08006daf
 8006d3c:	08006daf 	.word	0x08006daf
 8006d40:	08006da1 	.word	0x08006da1
 8006d44:	2b40      	cmp	r3, #64	@ 0x40
 8006d46:	d02e      	beq.n	8006da6 <UART_SetConfig+0x8aa>
 8006d48:	e031      	b.n	8006dae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d4a:	f7fd f8ab 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8006d4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d50:	e033      	b.n	8006dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d52:	f7fd f8bd 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 8006d56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d58:	e02f      	b.n	8006dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe faec 	bl	800533c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d68:	e027      	b.n	8006dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d6a:	f107 0318 	add.w	r3, r7, #24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fc38 	bl	80055e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d78:	e01f      	b.n	8006dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e30 <UART_SetConfig+0x934>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d009      	beq.n	8006d9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d86:	4b2a      	ldr	r3, [pc, #168]	@ (8006e30 <UART_SetConfig+0x934>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	08db      	lsrs	r3, r3, #3
 8006d8c:	f003 0303 	and.w	r3, r3, #3
 8006d90:	4a24      	ldr	r2, [pc, #144]	@ (8006e24 <UART_SetConfig+0x928>)
 8006d92:	fa22 f303 	lsr.w	r3, r2, r3
 8006d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d98:	e00f      	b.n	8006dba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d9a:	4b22      	ldr	r3, [pc, #136]	@ (8006e24 <UART_SetConfig+0x928>)
 8006d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d9e:	e00c      	b.n	8006dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006da0:	4b21      	ldr	r3, [pc, #132]	@ (8006e28 <UART_SetConfig+0x92c>)
 8006da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da4:	e009      	b.n	8006dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dac:	e005      	b.n	8006dba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80e7 	beq.w	8006f90 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	4a19      	ldr	r2, [pc, #100]	@ (8006e2c <UART_SetConfig+0x930>)
 8006dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dd4:	005a      	lsls	r2, r3, #1
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	441a      	add	r2, r3
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d916      	bls.n	8006e1c <UART_SetConfig+0x920>
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006df4:	d212      	bcs.n	8006e1c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f023 030f 	bic.w	r3, r3, #15
 8006dfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e02:	085b      	lsrs	r3, r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006e18:	60da      	str	r2, [r3, #12]
 8006e1a:	e0b9      	b.n	8006f90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e22:	e0b5      	b.n	8006f90 <UART_SetConfig+0xa94>
 8006e24:	03d09000 	.word	0x03d09000
 8006e28:	003d0900 	.word	0x003d0900
 8006e2c:	08009b94 	.word	0x08009b94
 8006e30:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e34:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e38:	2b20      	cmp	r3, #32
 8006e3a:	dc49      	bgt.n	8006ed0 <UART_SetConfig+0x9d4>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	db7c      	blt.n	8006f3a <UART_SetConfig+0xa3e>
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d87a      	bhi.n	8006f3a <UART_SetConfig+0xa3e>
 8006e44:	a201      	add	r2, pc, #4	@ (adr r2, 8006e4c <UART_SetConfig+0x950>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006ed7 	.word	0x08006ed7
 8006e50:	08006edf 	.word	0x08006edf
 8006e54:	08006f3b 	.word	0x08006f3b
 8006e58:	08006f3b 	.word	0x08006f3b
 8006e5c:	08006ee7 	.word	0x08006ee7
 8006e60:	08006f3b 	.word	0x08006f3b
 8006e64:	08006f3b 	.word	0x08006f3b
 8006e68:	08006f3b 	.word	0x08006f3b
 8006e6c:	08006ef7 	.word	0x08006ef7
 8006e70:	08006f3b 	.word	0x08006f3b
 8006e74:	08006f3b 	.word	0x08006f3b
 8006e78:	08006f3b 	.word	0x08006f3b
 8006e7c:	08006f3b 	.word	0x08006f3b
 8006e80:	08006f3b 	.word	0x08006f3b
 8006e84:	08006f3b 	.word	0x08006f3b
 8006e88:	08006f3b 	.word	0x08006f3b
 8006e8c:	08006f07 	.word	0x08006f07
 8006e90:	08006f3b 	.word	0x08006f3b
 8006e94:	08006f3b 	.word	0x08006f3b
 8006e98:	08006f3b 	.word	0x08006f3b
 8006e9c:	08006f3b 	.word	0x08006f3b
 8006ea0:	08006f3b 	.word	0x08006f3b
 8006ea4:	08006f3b 	.word	0x08006f3b
 8006ea8:	08006f3b 	.word	0x08006f3b
 8006eac:	08006f3b 	.word	0x08006f3b
 8006eb0:	08006f3b 	.word	0x08006f3b
 8006eb4:	08006f3b 	.word	0x08006f3b
 8006eb8:	08006f3b 	.word	0x08006f3b
 8006ebc:	08006f3b 	.word	0x08006f3b
 8006ec0:	08006f3b 	.word	0x08006f3b
 8006ec4:	08006f3b 	.word	0x08006f3b
 8006ec8:	08006f3b 	.word	0x08006f3b
 8006ecc:	08006f2d 	.word	0x08006f2d
 8006ed0:	2b40      	cmp	r3, #64	@ 0x40
 8006ed2:	d02e      	beq.n	8006f32 <UART_SetConfig+0xa36>
 8006ed4:	e031      	b.n	8006f3a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ed6:	f7fc ffe5 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8006eda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006edc:	e033      	b.n	8006f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ede:	f7fc fff7 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 8006ee2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ee4:	e02f      	b.n	8006f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe fa26 	bl	800533c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef4:	e027      	b.n	8006f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ef6:	f107 0318 	add.w	r3, r7, #24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fb72 	bl	80055e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f04:	e01f      	b.n	8006f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f06:	4b2d      	ldr	r3, [pc, #180]	@ (8006fbc <UART_SetConfig+0xac0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d009      	beq.n	8006f26 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f12:	4b2a      	ldr	r3, [pc, #168]	@ (8006fbc <UART_SetConfig+0xac0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	08db      	lsrs	r3, r3, #3
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	4a28      	ldr	r2, [pc, #160]	@ (8006fc0 <UART_SetConfig+0xac4>)
 8006f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f24:	e00f      	b.n	8006f46 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006f26:	4b26      	ldr	r3, [pc, #152]	@ (8006fc0 <UART_SetConfig+0xac4>)
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f2a:	e00c      	b.n	8006f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f2c:	4b25      	ldr	r3, [pc, #148]	@ (8006fc4 <UART_SetConfig+0xac8>)
 8006f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f30:	e009      	b.n	8006f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f38:	e005      	b.n	8006f46 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f44:	bf00      	nop
    }

    if (pclk != 0U)
 8006f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d021      	beq.n	8006f90 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f50:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc8 <UART_SetConfig+0xacc>)
 8006f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f56:	461a      	mov	r2, r3
 8006f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	441a      	add	r2, r3
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	2b0f      	cmp	r3, #15
 8006f74:	d909      	bls.n	8006f8a <UART_SetConfig+0xa8e>
 8006f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f7c:	d205      	bcs.n	8006f8a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60da      	str	r2, [r3, #12]
 8006f88:	e002      	b.n	8006f90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3748      	adds	r7, #72	@ 0x48
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fba:	bf00      	nop
 8006fbc:	58024400 	.word	0x58024400
 8006fc0:	03d09000 	.word	0x03d09000
 8006fc4:	003d0900 	.word	0x003d0900
 8006fc8:	08009b94 	.word	0x08009b94

08006fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01a      	beq.n	80070e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ca:	d10a      	bne.n	80070e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  }
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b098      	sub	sp, #96	@ 0x60
 8007114:	af02      	add	r7, sp, #8
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007120:	f7f9 ffb8 	bl	8001094 <HAL_GetTick>
 8007124:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b08      	cmp	r3, #8
 8007132:	d12f      	bne.n	8007194 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007134:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800713c:	2200      	movs	r2, #0
 800713e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f88e 	bl	8007264 <UART_WaitOnFlagUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d022      	beq.n	8007194 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800715c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007162:	653b      	str	r3, [r7, #80]	@ 0x50
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800716c:	647b      	str	r3, [r7, #68]	@ 0x44
 800716e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800717a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e6      	bne.n	800714e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e063      	b.n	800725c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d149      	bne.n	8007236 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071aa:	2200      	movs	r2, #0
 80071ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f857 	bl	8007264 <UART_WaitOnFlagUntilTimeout>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d03c      	beq.n	8007236 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	623b      	str	r3, [r7, #32]
   return(result);
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071da:	633b      	str	r3, [r7, #48]	@ 0x30
 80071dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e6      	bne.n	80071bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3308      	adds	r3, #8
 80071f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f023 0301 	bic.w	r3, r3, #1
 8007204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3308      	adds	r3, #8
 800720c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800720e:	61fa      	str	r2, [r7, #28]
 8007210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	69b9      	ldr	r1, [r7, #24]
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	617b      	str	r3, [r7, #20]
   return(result);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e5      	bne.n	80071ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e012      	b.n	800725c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3758      	adds	r7, #88	@ 0x58
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007274:	e04f      	b.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800727c:	d04b      	beq.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800727e:	f7f9 ff09 	bl	8001094 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	429a      	cmp	r2, r3
 800728c:	d302      	bcc.n	8007294 <UART_WaitOnFlagUntilTimeout+0x30>
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e04e      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0304 	and.w	r3, r3, #4
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d037      	beq.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b80      	cmp	r3, #128	@ 0x80
 80072aa:	d034      	beq.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b40      	cmp	r3, #64	@ 0x40
 80072b0:	d031      	beq.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d110      	bne.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2208      	movs	r2, #8
 80072c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f839 	bl	8007340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2208      	movs	r2, #8
 80072d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e029      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072f0:	d111      	bne.n	8007316 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 f81f 	bl	8007340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e00f      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	4013      	ands	r3, r2
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	429a      	cmp	r2, r3
 8007324:	bf0c      	ite	eq
 8007326:	2301      	moveq	r3, #1
 8007328:	2300      	movne	r3, #0
 800732a:	b2db      	uxtb	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	429a      	cmp	r2, r3
 8007332:	d0a0      	beq.n	8007276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007340:	b480      	push	{r7}
 8007342:	b095      	sub	sp, #84	@ 0x54
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800735c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007366:	643b      	str	r3, [r7, #64]	@ 0x40
 8007368:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800736c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e6      	bne.n	8007348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3308      	adds	r3, #8
 8007380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	61fb      	str	r3, [r7, #28]
   return(result);
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	4b1e      	ldr	r3, [pc, #120]	@ (8007408 <UART_EndRxTransfer+0xc8>)
 800738e:	4013      	ands	r3, r2
 8007390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800739a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800739c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e5      	bne.n	800737a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d118      	bne.n	80073e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f023 0310 	bic.w	r3, r3, #16
 80073ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6979      	ldr	r1, [r7, #20]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	613b      	str	r3, [r7, #16]
   return(result);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e6      	bne.n	80073b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073fc:	bf00      	nop
 80073fe:	3754      	adds	r7, #84	@ 0x54
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	effffffe 	.word	0xeffffffe

0800740c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff f854 	bl	80064d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	60bb      	str	r3, [r7, #8]
   return(result);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6979      	ldr	r1, [r7, #20]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	613b      	str	r3, [r7, #16]
   return(result);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e6      	bne.n	8007438 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff f81f 	bl	80064bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800747e:	bf00      	nop
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b085      	sub	sp, #20
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e027      	b.n	8007528 <HAL_UARTEx_DisableFifoMode+0x66>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2224      	movs	r2, #36	@ 0x24
 80074e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0201 	bic.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007506:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007548:	2302      	movs	r3, #2
 800754a:	e02d      	b.n	80075a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2224      	movs	r2, #36	@ 0x24
 8007558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0201 	bic.w	r2, r2, #1
 8007572:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f84f 	bl	800762c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d101      	bne.n	80075c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075c4:	2302      	movs	r3, #2
 80075c6:	e02d      	b.n	8007624 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2224      	movs	r2, #36	@ 0x24
 80075d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0201 	bic.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f811 	bl	800762c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007638:	2b00      	cmp	r3, #0
 800763a:	d108      	bne.n	800764e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800764c:	e031      	b.n	80076b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800764e:	2310      	movs	r3, #16
 8007650:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007652:	2310      	movs	r3, #16
 8007654:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	0e5b      	lsrs	r3, r3, #25
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f003 0307 	and.w	r3, r3, #7
 8007664:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	0f5b      	lsrs	r3, r3, #29
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 0307 	and.w	r3, r3, #7
 8007674:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	7b3a      	ldrb	r2, [r7, #12]
 800767a:	4911      	ldr	r1, [pc, #68]	@ (80076c0 <UARTEx_SetNbDataToProcess+0x94>)
 800767c:	5c8a      	ldrb	r2, [r1, r2]
 800767e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007682:	7b3a      	ldrb	r2, [r7, #12]
 8007684:	490f      	ldr	r1, [pc, #60]	@ (80076c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007686:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007688:	fb93 f3f2 	sdiv	r3, r3, r2
 800768c:	b29a      	uxth	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	7b7a      	ldrb	r2, [r7, #13]
 8007698:	4909      	ldr	r1, [pc, #36]	@ (80076c0 <UARTEx_SetNbDataToProcess+0x94>)
 800769a:	5c8a      	ldrb	r2, [r1, r2]
 800769c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076a0:	7b7a      	ldrb	r2, [r7, #13]
 80076a2:	4908      	ldr	r1, [pc, #32]	@ (80076c4 <UARTEx_SetNbDataToProcess+0x98>)
 80076a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80076b2:	bf00      	nop
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	08009bac 	.word	0x08009bac
 80076c4:	08009bb4 	.word	0x08009bb4

080076c8 <_fclose_r>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4605      	mov	r5, r0
 80076cc:	460c      	mov	r4, r1
 80076ce:	b1b1      	cbz	r1, 80076fe <_fclose_r+0x36>
 80076d0:	b118      	cbz	r0, 80076da <_fclose_r+0x12>
 80076d2:	6a03      	ldr	r3, [r0, #32]
 80076d4:	b90b      	cbnz	r3, 80076da <_fclose_r+0x12>
 80076d6:	f000 f9ff 	bl	8007ad8 <__sinit>
 80076da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076dc:	07de      	lsls	r6, r3, #31
 80076de:	d405      	bmi.n	80076ec <_fclose_r+0x24>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	0598      	lsls	r0, r3, #22
 80076e4:	d402      	bmi.n	80076ec <_fclose_r+0x24>
 80076e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076e8:	f000 fe86 	bl	80083f8 <__retarget_lock_acquire_recursive>
 80076ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f0:	b943      	cbnz	r3, 8007704 <_fclose_r+0x3c>
 80076f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076f4:	07d9      	lsls	r1, r3, #31
 80076f6:	d402      	bmi.n	80076fe <_fclose_r+0x36>
 80076f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076fa:	f000 fe7e 	bl	80083fa <__retarget_lock_release_recursive>
 80076fe:	2600      	movs	r6, #0
 8007700:	4630      	mov	r0, r6
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	4621      	mov	r1, r4
 8007706:	4628      	mov	r0, r5
 8007708:	f000 f83c 	bl	8007784 <__sflush_r>
 800770c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800770e:	4606      	mov	r6, r0
 8007710:	b133      	cbz	r3, 8007720 <_fclose_r+0x58>
 8007712:	6a21      	ldr	r1, [r4, #32]
 8007714:	4628      	mov	r0, r5
 8007716:	4798      	blx	r3
 8007718:	2800      	cmp	r0, #0
 800771a:	bfb8      	it	lt
 800771c:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8007720:	89a3      	ldrh	r3, [r4, #12]
 8007722:	061a      	lsls	r2, r3, #24
 8007724:	d503      	bpl.n	800772e <_fclose_r+0x66>
 8007726:	6921      	ldr	r1, [r4, #16]
 8007728:	4628      	mov	r0, r5
 800772a:	f000 fe67 	bl	80083fc <_free_r>
 800772e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007730:	b141      	cbz	r1, 8007744 <_fclose_r+0x7c>
 8007732:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007736:	4299      	cmp	r1, r3
 8007738:	d002      	beq.n	8007740 <_fclose_r+0x78>
 800773a:	4628      	mov	r0, r5
 800773c:	f000 fe5e 	bl	80083fc <_free_r>
 8007740:	2300      	movs	r3, #0
 8007742:	6363      	str	r3, [r4, #52]	@ 0x34
 8007744:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007746:	b121      	cbz	r1, 8007752 <_fclose_r+0x8a>
 8007748:	4628      	mov	r0, r5
 800774a:	f000 fe57 	bl	80083fc <_free_r>
 800774e:	2300      	movs	r3, #0
 8007750:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007752:	f000 f963 	bl	8007a1c <__sfp_lock_acquire>
 8007756:	2300      	movs	r3, #0
 8007758:	81a3      	strh	r3, [r4, #12]
 800775a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800775c:	07db      	lsls	r3, r3, #31
 800775e:	d402      	bmi.n	8007766 <_fclose_r+0x9e>
 8007760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007762:	f000 fe4a 	bl	80083fa <__retarget_lock_release_recursive>
 8007766:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007768:	f000 fe45 	bl	80083f6 <__retarget_lock_close_recursive>
 800776c:	f000 f95c 	bl	8007a28 <__sfp_lock_release>
 8007770:	e7c6      	b.n	8007700 <_fclose_r+0x38>
	...

08007774 <fclose>:
 8007774:	4b02      	ldr	r3, [pc, #8]	@ (8007780 <fclose+0xc>)
 8007776:	4601      	mov	r1, r0
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	f7ff bfa5 	b.w	80076c8 <_fclose_r>
 800777e:	bf00      	nop
 8007780:	2400001c 	.word	0x2400001c

08007784 <__sflush_r>:
 8007784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800778c:	0716      	lsls	r6, r2, #28
 800778e:	4605      	mov	r5, r0
 8007790:	460c      	mov	r4, r1
 8007792:	d454      	bmi.n	800783e <__sflush_r+0xba>
 8007794:	684b      	ldr	r3, [r1, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	dc02      	bgt.n	80077a0 <__sflush_r+0x1c>
 800779a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	dd48      	ble.n	8007832 <__sflush_r+0xae>
 80077a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077a2:	2e00      	cmp	r6, #0
 80077a4:	d045      	beq.n	8007832 <__sflush_r+0xae>
 80077a6:	2300      	movs	r3, #0
 80077a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077ac:	682f      	ldr	r7, [r5, #0]
 80077ae:	6a21      	ldr	r1, [r4, #32]
 80077b0:	602b      	str	r3, [r5, #0]
 80077b2:	d030      	beq.n	8007816 <__sflush_r+0x92>
 80077b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	0759      	lsls	r1, r3, #29
 80077ba:	d505      	bpl.n	80077c8 <__sflush_r+0x44>
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	1ad2      	subs	r2, r2, r3
 80077c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077c2:	b10b      	cbz	r3, 80077c8 <__sflush_r+0x44>
 80077c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	2300      	movs	r3, #0
 80077ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077cc:	6a21      	ldr	r1, [r4, #32]
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b0      	blx	r6
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	d106      	bne.n	80077e6 <__sflush_r+0x62>
 80077d8:	6829      	ldr	r1, [r5, #0]
 80077da:	291d      	cmp	r1, #29
 80077dc:	d82b      	bhi.n	8007836 <__sflush_r+0xb2>
 80077de:	4a2a      	ldr	r2, [pc, #168]	@ (8007888 <__sflush_r+0x104>)
 80077e0:	410a      	asrs	r2, r1
 80077e2:	07d6      	lsls	r6, r2, #31
 80077e4:	d427      	bmi.n	8007836 <__sflush_r+0xb2>
 80077e6:	2200      	movs	r2, #0
 80077e8:	6062      	str	r2, [r4, #4]
 80077ea:	04d9      	lsls	r1, r3, #19
 80077ec:	6922      	ldr	r2, [r4, #16]
 80077ee:	6022      	str	r2, [r4, #0]
 80077f0:	d504      	bpl.n	80077fc <__sflush_r+0x78>
 80077f2:	1c42      	adds	r2, r0, #1
 80077f4:	d101      	bne.n	80077fa <__sflush_r+0x76>
 80077f6:	682b      	ldr	r3, [r5, #0]
 80077f8:	b903      	cbnz	r3, 80077fc <__sflush_r+0x78>
 80077fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80077fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077fe:	602f      	str	r7, [r5, #0]
 8007800:	b1b9      	cbz	r1, 8007832 <__sflush_r+0xae>
 8007802:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007806:	4299      	cmp	r1, r3
 8007808:	d002      	beq.n	8007810 <__sflush_r+0x8c>
 800780a:	4628      	mov	r0, r5
 800780c:	f000 fdf6 	bl	80083fc <_free_r>
 8007810:	2300      	movs	r3, #0
 8007812:	6363      	str	r3, [r4, #52]	@ 0x34
 8007814:	e00d      	b.n	8007832 <__sflush_r+0xae>
 8007816:	2301      	movs	r3, #1
 8007818:	4628      	mov	r0, r5
 800781a:	47b0      	blx	r6
 800781c:	4602      	mov	r2, r0
 800781e:	1c50      	adds	r0, r2, #1
 8007820:	d1c9      	bne.n	80077b6 <__sflush_r+0x32>
 8007822:	682b      	ldr	r3, [r5, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0c6      	beq.n	80077b6 <__sflush_r+0x32>
 8007828:	2b1d      	cmp	r3, #29
 800782a:	d001      	beq.n	8007830 <__sflush_r+0xac>
 800782c:	2b16      	cmp	r3, #22
 800782e:	d11e      	bne.n	800786e <__sflush_r+0xea>
 8007830:	602f      	str	r7, [r5, #0]
 8007832:	2000      	movs	r0, #0
 8007834:	e022      	b.n	800787c <__sflush_r+0xf8>
 8007836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800783a:	b21b      	sxth	r3, r3
 800783c:	e01b      	b.n	8007876 <__sflush_r+0xf2>
 800783e:	690f      	ldr	r7, [r1, #16]
 8007840:	2f00      	cmp	r7, #0
 8007842:	d0f6      	beq.n	8007832 <__sflush_r+0xae>
 8007844:	0793      	lsls	r3, r2, #30
 8007846:	680e      	ldr	r6, [r1, #0]
 8007848:	bf08      	it	eq
 800784a:	694b      	ldreq	r3, [r1, #20]
 800784c:	600f      	str	r7, [r1, #0]
 800784e:	bf18      	it	ne
 8007850:	2300      	movne	r3, #0
 8007852:	eba6 0807 	sub.w	r8, r6, r7
 8007856:	608b      	str	r3, [r1, #8]
 8007858:	f1b8 0f00 	cmp.w	r8, #0
 800785c:	dde9      	ble.n	8007832 <__sflush_r+0xae>
 800785e:	6a21      	ldr	r1, [r4, #32]
 8007860:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007862:	4643      	mov	r3, r8
 8007864:	463a      	mov	r2, r7
 8007866:	4628      	mov	r0, r5
 8007868:	47b0      	blx	r6
 800786a:	2800      	cmp	r0, #0
 800786c:	dc08      	bgt.n	8007880 <__sflush_r+0xfc>
 800786e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007876:	81a3      	strh	r3, [r4, #12]
 8007878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800787c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007880:	4407      	add	r7, r0
 8007882:	eba8 0800 	sub.w	r8, r8, r0
 8007886:	e7e7      	b.n	8007858 <__sflush_r+0xd4>
 8007888:	dfbffffe 	.word	0xdfbffffe

0800788c <_fflush_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	690b      	ldr	r3, [r1, #16]
 8007890:	4605      	mov	r5, r0
 8007892:	460c      	mov	r4, r1
 8007894:	b913      	cbnz	r3, 800789c <_fflush_r+0x10>
 8007896:	2500      	movs	r5, #0
 8007898:	4628      	mov	r0, r5
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	b118      	cbz	r0, 80078a6 <_fflush_r+0x1a>
 800789e:	6a03      	ldr	r3, [r0, #32]
 80078a0:	b90b      	cbnz	r3, 80078a6 <_fflush_r+0x1a>
 80078a2:	f000 f919 	bl	8007ad8 <__sinit>
 80078a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f3      	beq.n	8007896 <_fflush_r+0xa>
 80078ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078b0:	07d0      	lsls	r0, r2, #31
 80078b2:	d404      	bmi.n	80078be <_fflush_r+0x32>
 80078b4:	0599      	lsls	r1, r3, #22
 80078b6:	d402      	bmi.n	80078be <_fflush_r+0x32>
 80078b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078ba:	f000 fd9d 	bl	80083f8 <__retarget_lock_acquire_recursive>
 80078be:	4628      	mov	r0, r5
 80078c0:	4621      	mov	r1, r4
 80078c2:	f7ff ff5f 	bl	8007784 <__sflush_r>
 80078c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078c8:	07da      	lsls	r2, r3, #31
 80078ca:	4605      	mov	r5, r0
 80078cc:	d4e4      	bmi.n	8007898 <_fflush_r+0xc>
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	059b      	lsls	r3, r3, #22
 80078d2:	d4e1      	bmi.n	8007898 <_fflush_r+0xc>
 80078d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d6:	f000 fd90 	bl	80083fa <__retarget_lock_release_recursive>
 80078da:	e7dd      	b.n	8007898 <_fflush_r+0xc>

080078dc <siprintf>:
 80078dc:	b40e      	push	{r1, r2, r3}
 80078de:	b500      	push	{lr}
 80078e0:	b09c      	sub	sp, #112	@ 0x70
 80078e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80078e4:	9002      	str	r0, [sp, #8]
 80078e6:	9006      	str	r0, [sp, #24]
 80078e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078ec:	4809      	ldr	r0, [pc, #36]	@ (8007914 <siprintf+0x38>)
 80078ee:	9107      	str	r1, [sp, #28]
 80078f0:	9104      	str	r1, [sp, #16]
 80078f2:	4909      	ldr	r1, [pc, #36]	@ (8007918 <siprintf+0x3c>)
 80078f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f8:	9105      	str	r1, [sp, #20]
 80078fa:	6800      	ldr	r0, [r0, #0]
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	a902      	add	r1, sp, #8
 8007900:	f000 fe22 	bl	8008548 <_svfiprintf_r>
 8007904:	9b02      	ldr	r3, [sp, #8]
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
 800790a:	b01c      	add	sp, #112	@ 0x70
 800790c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007910:	b003      	add	sp, #12
 8007912:	4770      	bx	lr
 8007914:	2400001c 	.word	0x2400001c
 8007918:	ffff0208 	.word	0xffff0208

0800791c <std>:
 800791c:	2300      	movs	r3, #0
 800791e:	b510      	push	{r4, lr}
 8007920:	4604      	mov	r4, r0
 8007922:	e9c0 3300 	strd	r3, r3, [r0]
 8007926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800792a:	6083      	str	r3, [r0, #8]
 800792c:	8181      	strh	r1, [r0, #12]
 800792e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007930:	81c2      	strh	r2, [r0, #14]
 8007932:	6183      	str	r3, [r0, #24]
 8007934:	4619      	mov	r1, r3
 8007936:	2208      	movs	r2, #8
 8007938:	305c      	adds	r0, #92	@ 0x5c
 800793a:	f000 fce3 	bl	8008304 <memset>
 800793e:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <std+0x58>)
 8007940:	6263      	str	r3, [r4, #36]	@ 0x24
 8007942:	4b0d      	ldr	r3, [pc, #52]	@ (8007978 <std+0x5c>)
 8007944:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007946:	4b0d      	ldr	r3, [pc, #52]	@ (800797c <std+0x60>)
 8007948:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800794a:	4b0d      	ldr	r3, [pc, #52]	@ (8007980 <std+0x64>)
 800794c:	6323      	str	r3, [r4, #48]	@ 0x30
 800794e:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <std+0x68>)
 8007950:	6224      	str	r4, [r4, #32]
 8007952:	429c      	cmp	r4, r3
 8007954:	d006      	beq.n	8007964 <std+0x48>
 8007956:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800795a:	4294      	cmp	r4, r2
 800795c:	d002      	beq.n	8007964 <std+0x48>
 800795e:	33d0      	adds	r3, #208	@ 0xd0
 8007960:	429c      	cmp	r4, r3
 8007962:	d105      	bne.n	8007970 <std+0x54>
 8007964:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800796c:	f000 bd42 	b.w	80083f4 <__retarget_lock_init_recursive>
 8007970:	bd10      	pop	{r4, pc}
 8007972:	bf00      	nop
 8007974:	08009229 	.word	0x08009229
 8007978:	0800924b 	.word	0x0800924b
 800797c:	08009283 	.word	0x08009283
 8007980:	080092a7 	.word	0x080092a7
 8007984:	2404018c 	.word	0x2404018c

08007988 <stdio_exit_handler>:
 8007988:	4a02      	ldr	r2, [pc, #8]	@ (8007994 <stdio_exit_handler+0xc>)
 800798a:	4903      	ldr	r1, [pc, #12]	@ (8007998 <stdio_exit_handler+0x10>)
 800798c:	4803      	ldr	r0, [pc, #12]	@ (800799c <stdio_exit_handler+0x14>)
 800798e:	f000 b92b 	b.w	8007be8 <_fwalk_sglue>
 8007992:	bf00      	nop
 8007994:	24000010 	.word	0x24000010
 8007998:	0800788d 	.word	0x0800788d
 800799c:	24000020 	.word	0x24000020

080079a0 <cleanup_stdio>:
 80079a0:	6841      	ldr	r1, [r0, #4]
 80079a2:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <cleanup_stdio+0x34>)
 80079a4:	4299      	cmp	r1, r3
 80079a6:	b510      	push	{r4, lr}
 80079a8:	4604      	mov	r4, r0
 80079aa:	d001      	beq.n	80079b0 <cleanup_stdio+0x10>
 80079ac:	f7ff ff6e 	bl	800788c <_fflush_r>
 80079b0:	68a1      	ldr	r1, [r4, #8]
 80079b2:	4b09      	ldr	r3, [pc, #36]	@ (80079d8 <cleanup_stdio+0x38>)
 80079b4:	4299      	cmp	r1, r3
 80079b6:	d002      	beq.n	80079be <cleanup_stdio+0x1e>
 80079b8:	4620      	mov	r0, r4
 80079ba:	f7ff ff67 	bl	800788c <_fflush_r>
 80079be:	68e1      	ldr	r1, [r4, #12]
 80079c0:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <cleanup_stdio+0x3c>)
 80079c2:	4299      	cmp	r1, r3
 80079c4:	d004      	beq.n	80079d0 <cleanup_stdio+0x30>
 80079c6:	4620      	mov	r0, r4
 80079c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079cc:	f7ff bf5e 	b.w	800788c <_fflush_r>
 80079d0:	bd10      	pop	{r4, pc}
 80079d2:	bf00      	nop
 80079d4:	2404018c 	.word	0x2404018c
 80079d8:	240401f4 	.word	0x240401f4
 80079dc:	2404025c 	.word	0x2404025c

080079e0 <global_stdio_init.part.0>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a10 <global_stdio_init.part.0+0x30>)
 80079e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007a14 <global_stdio_init.part.0+0x34>)
 80079e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a18 <global_stdio_init.part.0+0x38>)
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	4620      	mov	r0, r4
 80079ec:	2200      	movs	r2, #0
 80079ee:	2104      	movs	r1, #4
 80079f0:	f7ff ff94 	bl	800791c <std>
 80079f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079f8:	2201      	movs	r2, #1
 80079fa:	2109      	movs	r1, #9
 80079fc:	f7ff ff8e 	bl	800791c <std>
 8007a00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a04:	2202      	movs	r2, #2
 8007a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0a:	2112      	movs	r1, #18
 8007a0c:	f7ff bf86 	b.w	800791c <std>
 8007a10:	240402c4 	.word	0x240402c4
 8007a14:	2404018c 	.word	0x2404018c
 8007a18:	08007989 	.word	0x08007989

08007a1c <__sfp_lock_acquire>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	@ (8007a24 <__sfp_lock_acquire+0x8>)
 8007a1e:	f000 bceb 	b.w	80083f8 <__retarget_lock_acquire_recursive>
 8007a22:	bf00      	nop
 8007a24:	240402c9 	.word	0x240402c9

08007a28 <__sfp_lock_release>:
 8007a28:	4801      	ldr	r0, [pc, #4]	@ (8007a30 <__sfp_lock_release+0x8>)
 8007a2a:	f000 bce6 	b.w	80083fa <__retarget_lock_release_recursive>
 8007a2e:	bf00      	nop
 8007a30:	240402c9 	.word	0x240402c9

08007a34 <__sfp>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	4607      	mov	r7, r0
 8007a38:	f7ff fff0 	bl	8007a1c <__sfp_lock_acquire>
 8007a3c:	4b23      	ldr	r3, [pc, #140]	@ (8007acc <__sfp+0x98>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	b90b      	cbnz	r3, 8007a46 <__sfp+0x12>
 8007a42:	f7ff ffcd 	bl	80079e0 <global_stdio_init.part.0>
 8007a46:	4e22      	ldr	r6, [pc, #136]	@ (8007ad0 <__sfp+0x9c>)
 8007a48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	d50f      	bpl.n	8007a70 <__sfp+0x3c>
 8007a50:	6835      	ldr	r5, [r6, #0]
 8007a52:	2d00      	cmp	r5, #0
 8007a54:	d137      	bne.n	8007ac6 <__sfp+0x92>
 8007a56:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f000 fe92 	bl	8008784 <_malloc_r>
 8007a60:	4604      	mov	r4, r0
 8007a62:	bb28      	cbnz	r0, 8007ab0 <__sfp+0x7c>
 8007a64:	6030      	str	r0, [r6, #0]
 8007a66:	f7ff ffdf 	bl	8007a28 <__sfp_lock_release>
 8007a6a:	230c      	movs	r3, #12
 8007a6c:	603b      	str	r3, [r7, #0]
 8007a6e:	e01b      	b.n	8007aa8 <__sfp+0x74>
 8007a70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a74:	b9d5      	cbnz	r5, 8007aac <__sfp+0x78>
 8007a76:	4b17      	ldr	r3, [pc, #92]	@ (8007ad4 <__sfp+0xa0>)
 8007a78:	60e3      	str	r3, [r4, #12]
 8007a7a:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a7e:	6665      	str	r5, [r4, #100]	@ 0x64
 8007a80:	f000 fcb8 	bl	80083f4 <__retarget_lock_init_recursive>
 8007a84:	f7ff ffd0 	bl	8007a28 <__sfp_lock_release>
 8007a88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a90:	6025      	str	r5, [r4, #0]
 8007a92:	61a5      	str	r5, [r4, #24]
 8007a94:	2208      	movs	r2, #8
 8007a96:	4629      	mov	r1, r5
 8007a98:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8007a9c:	f000 fc32 	bl	8008304 <memset>
 8007aa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8007aa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aac:	3468      	adds	r4, #104	@ 0x68
 8007aae:	e7cd      	b.n	8007a4c <__sfp+0x18>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	6005      	str	r5, [r0, #0]
 8007ab4:	6043      	str	r3, [r0, #4]
 8007ab6:	300c      	adds	r0, #12
 8007ab8:	60a0      	str	r0, [r4, #8]
 8007aba:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f000 fc20 	bl	8008304 <memset>
 8007ac4:	6034      	str	r4, [r6, #0]
 8007ac6:	6836      	ldr	r6, [r6, #0]
 8007ac8:	e7be      	b.n	8007a48 <__sfp+0x14>
 8007aca:	bf00      	nop
 8007acc:	240402c4 	.word	0x240402c4
 8007ad0:	24000010 	.word	0x24000010
 8007ad4:	ffff0001 	.word	0xffff0001

08007ad8 <__sinit>:
 8007ad8:	b510      	push	{r4, lr}
 8007ada:	4604      	mov	r4, r0
 8007adc:	f7ff ff9e 	bl	8007a1c <__sfp_lock_acquire>
 8007ae0:	6a23      	ldr	r3, [r4, #32]
 8007ae2:	b11b      	cbz	r3, 8007aec <__sinit+0x14>
 8007ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ae8:	f7ff bf9e 	b.w	8007a28 <__sfp_lock_release>
 8007aec:	4b04      	ldr	r3, [pc, #16]	@ (8007b00 <__sinit+0x28>)
 8007aee:	6223      	str	r3, [r4, #32]
 8007af0:	4b04      	ldr	r3, [pc, #16]	@ (8007b04 <__sinit+0x2c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1f5      	bne.n	8007ae4 <__sinit+0xc>
 8007af8:	f7ff ff72 	bl	80079e0 <global_stdio_init.part.0>
 8007afc:	e7f2      	b.n	8007ae4 <__sinit+0xc>
 8007afe:	bf00      	nop
 8007b00:	080079a1 	.word	0x080079a1
 8007b04:	240402c4 	.word	0x240402c4

08007b08 <_fopen_r>:
 8007b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	aa01      	add	r2, sp, #4
 8007b10:	4606      	mov	r6, r0
 8007b12:	f001 fbf7 	bl	8009304 <__sflags>
 8007b16:	4605      	mov	r5, r0
 8007b18:	b1b0      	cbz	r0, 8007b48 <_fopen_r+0x40>
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f7ff ff8a 	bl	8007a34 <__sfp>
 8007b20:	4604      	mov	r4, r0
 8007b22:	b188      	cbz	r0, 8007b48 <_fopen_r+0x40>
 8007b24:	4639      	mov	r1, r7
 8007b26:	9a01      	ldr	r2, [sp, #4]
 8007b28:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f000 fc13 	bl	8008358 <_open_r>
 8007b32:	1e07      	subs	r7, r0, #0
 8007b34:	da0c      	bge.n	8007b50 <_fopen_r+0x48>
 8007b36:	f7ff ff71 	bl	8007a1c <__sfp_lock_acquire>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	f000 fc59 	bl	80083f6 <__retarget_lock_close_recursive>
 8007b44:	f7ff ff70 	bl	8007a28 <__sfp_lock_release>
 8007b48:	2400      	movs	r4, #0
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	b003      	add	sp, #12
 8007b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b52:	07db      	lsls	r3, r3, #31
 8007b54:	d405      	bmi.n	8007b62 <_fopen_r+0x5a>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	0598      	lsls	r0, r3, #22
 8007b5a:	d402      	bmi.n	8007b62 <_fopen_r+0x5a>
 8007b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b5e:	f000 fc4b 	bl	80083f8 <__retarget_lock_acquire_recursive>
 8007b62:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba0 <_fopen_r+0x98>)
 8007b64:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b66:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba4 <_fopen_r+0x9c>)
 8007b68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b6a:	b22d      	sxth	r5, r5
 8007b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba8 <_fopen_r+0xa0>)
 8007b6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b70:	05e9      	lsls	r1, r5, #23
 8007b72:	4b0e      	ldr	r3, [pc, #56]	@ (8007bac <_fopen_r+0xa4>)
 8007b74:	81e7      	strh	r7, [r4, #14]
 8007b76:	81a5      	strh	r5, [r4, #12]
 8007b78:	6224      	str	r4, [r4, #32]
 8007b7a:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b7c:	d505      	bpl.n	8007b8a <_fopen_r+0x82>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	2200      	movs	r2, #0
 8007b82:	4621      	mov	r1, r4
 8007b84:	4630      	mov	r0, r6
 8007b86:	f000 f82d 	bl	8007be4 <_fseek_r>
 8007b8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b8c:	07da      	lsls	r2, r3, #31
 8007b8e:	d4dc      	bmi.n	8007b4a <_fopen_r+0x42>
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	059b      	lsls	r3, r3, #22
 8007b94:	d4d9      	bmi.n	8007b4a <_fopen_r+0x42>
 8007b96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b98:	f000 fc2f 	bl	80083fa <__retarget_lock_release_recursive>
 8007b9c:	e7d5      	b.n	8007b4a <_fopen_r+0x42>
 8007b9e:	bf00      	nop
 8007ba0:	08009229 	.word	0x08009229
 8007ba4:	0800924b 	.word	0x0800924b
 8007ba8:	08009283 	.word	0x08009283
 8007bac:	080092a7 	.word	0x080092a7

08007bb0 <fopen>:
 8007bb0:	4b02      	ldr	r3, [pc, #8]	@ (8007bbc <fopen+0xc>)
 8007bb2:	460a      	mov	r2, r1
 8007bb4:	4601      	mov	r1, r0
 8007bb6:	6818      	ldr	r0, [r3, #0]
 8007bb8:	f7ff bfa6 	b.w	8007b08 <_fopen_r>
 8007bbc:	2400001c 	.word	0x2400001c

08007bc0 <fiscanf>:
 8007bc0:	b40e      	push	{r1, r2, r3}
 8007bc2:	b503      	push	{r0, r1, lr}
 8007bc4:	4601      	mov	r1, r0
 8007bc6:	ab03      	add	r3, sp, #12
 8007bc8:	4805      	ldr	r0, [pc, #20]	@ (8007be0 <fiscanf+0x20>)
 8007bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bce:	6800      	ldr	r0, [r0, #0]
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	f001 f981 	bl	8008ed8 <_vfiscanf_r>
 8007bd6:	b002      	add	sp, #8
 8007bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bdc:	b003      	add	sp, #12
 8007bde:	4770      	bx	lr
 8007be0:	2400001c 	.word	0x2400001c

08007be4 <_fseek_r>:
 8007be4:	f000 b81e 	b.w	8007c24 <_fseeko_r>

08007be8 <_fwalk_sglue>:
 8007be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bec:	4607      	mov	r7, r0
 8007bee:	4688      	mov	r8, r1
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8007bfc:	d505      	bpl.n	8007c0a <_fwalk_sglue+0x22>
 8007bfe:	6824      	ldr	r4, [r4, #0]
 8007c00:	2c00      	cmp	r4, #0
 8007c02:	d1f7      	bne.n	8007bf4 <_fwalk_sglue+0xc>
 8007c04:	4630      	mov	r0, r6
 8007c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c0a:	89ab      	ldrh	r3, [r5, #12]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d907      	bls.n	8007c20 <_fwalk_sglue+0x38>
 8007c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c14:	3301      	adds	r3, #1
 8007c16:	d003      	beq.n	8007c20 <_fwalk_sglue+0x38>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	47c0      	blx	r8
 8007c1e:	4306      	orrs	r6, r0
 8007c20:	3568      	adds	r5, #104	@ 0x68
 8007c22:	e7e9      	b.n	8007bf8 <_fwalk_sglue+0x10>

08007c24 <_fseeko_r>:
 8007c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c28:	460c      	mov	r4, r1
 8007c2a:	4690      	mov	r8, r2
 8007c2c:	461e      	mov	r6, r3
 8007c2e:	4605      	mov	r5, r0
 8007c30:	b118      	cbz	r0, 8007c3a <_fseeko_r+0x16>
 8007c32:	6a03      	ldr	r3, [r0, #32]
 8007c34:	b90b      	cbnz	r3, 8007c3a <_fseeko_r+0x16>
 8007c36:	f7ff ff4f 	bl	8007ad8 <__sinit>
 8007c3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c3c:	07d9      	lsls	r1, r3, #31
 8007c3e:	d405      	bmi.n	8007c4c <_fseeko_r+0x28>
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	059a      	lsls	r2, r3, #22
 8007c44:	d402      	bmi.n	8007c4c <_fseeko_r+0x28>
 8007c46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c48:	f000 fbd6 	bl	80083f8 <__retarget_lock_acquire_recursive>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 8007c52:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8007c56:	d103      	bne.n	8007c60 <_fseeko_r+0x3c>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f7ff fe16 	bl	800788c <_fflush_r>
 8007c60:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 8007c64:	f1b9 0f00 	cmp.w	r9, #0
 8007c68:	d102      	bne.n	8007c70 <_fseeko_r+0x4c>
 8007c6a:	231d      	movs	r3, #29
 8007c6c:	602b      	str	r3, [r5, #0]
 8007c6e:	e058      	b.n	8007d22 <_fseeko_r+0xfe>
 8007c70:	2e01      	cmp	r6, #1
 8007c72:	d03a      	beq.n	8007cea <_fseeko_r+0xc6>
 8007c74:	f036 0302 	bics.w	r3, r6, #2
 8007c78:	d162      	bne.n	8007d40 <_fseeko_r+0x11c>
 8007c7a:	6923      	ldr	r3, [r4, #16]
 8007c7c:	b91b      	cbnz	r3, 8007c86 <_fseeko_r+0x62>
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4628      	mov	r0, r5
 8007c82:	f000 f88c 	bl	8007d9e <__smakebuf_r>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f7ff fdff 	bl	800788c <_fflush_r>
 8007c8e:	4607      	mov	r7, r0
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d146      	bne.n	8007d22 <_fseeko_r+0xfe>
 8007c94:	6a21      	ldr	r1, [r4, #32]
 8007c96:	4633      	mov	r3, r6
 8007c98:	4642      	mov	r2, r8
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47c8      	blx	r9
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d03f      	beq.n	8007d22 <_fseeko_r+0xfe>
 8007ca2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ca4:	b141      	cbz	r1, 8007cb8 <_fseeko_r+0x94>
 8007ca6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007caa:	4299      	cmp	r1, r3
 8007cac:	d002      	beq.n	8007cb4 <_fseeko_r+0x90>
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f000 fba4 	bl	80083fc <_free_r>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cb8:	6923      	ldr	r3, [r4, #16]
 8007cba:	6023      	str	r3, [r4, #0]
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	2208      	movs	r2, #8
 8007cc8:	6061      	str	r1, [r4, #4]
 8007cca:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8007cce:	f000 fb19 	bl	8008304 <memset>
 8007cd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cd4:	07da      	lsls	r2, r3, #31
 8007cd6:	d405      	bmi.n	8007ce4 <_fseeko_r+0xc0>
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	059b      	lsls	r3, r3, #22
 8007cdc:	d402      	bmi.n	8007ce4 <_fseeko_r+0xc0>
 8007cde:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce0:	f000 fb8b 	bl	80083fa <__retarget_lock_release_recursive>
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cea:	4621      	mov	r1, r4
 8007cec:	4628      	mov	r0, r5
 8007cee:	f7ff fdcd 	bl	800788c <_fflush_r>
 8007cf2:	89a2      	ldrh	r2, [r4, #12]
 8007cf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007cf8:	d00d      	beq.n	8007d16 <_fseeko_r+0xf2>
 8007cfa:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8007cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d00:	075f      	lsls	r7, r3, #29
 8007d02:	d514      	bpl.n	8007d2e <_fseeko_r+0x10a>
 8007d04:	6863      	ldr	r3, [r4, #4]
 8007d06:	1ac0      	subs	r0, r0, r3
 8007d08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d0a:	b10b      	cbz	r3, 8007d10 <_fseeko_r+0xec>
 8007d0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d0e:	1ac0      	subs	r0, r0, r3
 8007d10:	4480      	add	r8, r0
 8007d12:	2600      	movs	r6, #0
 8007d14:	e7b1      	b.n	8007c7a <_fseeko_r+0x56>
 8007d16:	4633      	mov	r3, r6
 8007d18:	6a21      	ldr	r1, [r4, #32]
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	47c8      	blx	r9
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	d1ec      	bne.n	8007cfc <_fseeko_r+0xd8>
 8007d22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d24:	07d8      	lsls	r0, r3, #31
 8007d26:	d50d      	bpl.n	8007d44 <_fseeko_r+0x120>
 8007d28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007d2c:	e7da      	b.n	8007ce4 <_fseeko_r+0xc0>
 8007d2e:	071e      	lsls	r6, r3, #28
 8007d30:	d5ee      	bpl.n	8007d10 <_fseeko_r+0xec>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0eb      	beq.n	8007d10 <_fseeko_r+0xec>
 8007d38:	6922      	ldr	r2, [r4, #16]
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	4418      	add	r0, r3
 8007d3e:	e7e7      	b.n	8007d10 <_fseeko_r+0xec>
 8007d40:	2316      	movs	r3, #22
 8007d42:	e793      	b.n	8007c6c <_fseeko_r+0x48>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	0599      	lsls	r1, r3, #22
 8007d48:	d4ee      	bmi.n	8007d28 <_fseeko_r+0x104>
 8007d4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d4c:	f000 fb55 	bl	80083fa <__retarget_lock_release_recursive>
 8007d50:	e7ea      	b.n	8007d28 <_fseeko_r+0x104>

08007d52 <__swhatbuf_r>:
 8007d52:	b570      	push	{r4, r5, r6, lr}
 8007d54:	460c      	mov	r4, r1
 8007d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5a:	2900      	cmp	r1, #0
 8007d5c:	b096      	sub	sp, #88	@ 0x58
 8007d5e:	4615      	mov	r5, r2
 8007d60:	461e      	mov	r6, r3
 8007d62:	da0d      	bge.n	8007d80 <__swhatbuf_r+0x2e>
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d6a:	f04f 0100 	mov.w	r1, #0
 8007d6e:	bf14      	ite	ne
 8007d70:	2340      	movne	r3, #64	@ 0x40
 8007d72:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d76:	2000      	movs	r0, #0
 8007d78:	6031      	str	r1, [r6, #0]
 8007d7a:	602b      	str	r3, [r5, #0]
 8007d7c:	b016      	add	sp, #88	@ 0x58
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	466a      	mov	r2, sp
 8007d82:	f000 fac7 	bl	8008314 <_fstat_r>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	dbec      	blt.n	8007d64 <__swhatbuf_r+0x12>
 8007d8a:	9901      	ldr	r1, [sp, #4]
 8007d8c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d90:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d94:	4259      	negs	r1, r3
 8007d96:	4159      	adcs	r1, r3
 8007d98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d9c:	e7eb      	b.n	8007d76 <__swhatbuf_r+0x24>

08007d9e <__smakebuf_r>:
 8007d9e:	898b      	ldrh	r3, [r1, #12]
 8007da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007da2:	079d      	lsls	r5, r3, #30
 8007da4:	4606      	mov	r6, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	d507      	bpl.n	8007dba <__smakebuf_r+0x1c>
 8007daa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	6123      	str	r3, [r4, #16]
 8007db2:	2301      	movs	r3, #1
 8007db4:	6163      	str	r3, [r4, #20]
 8007db6:	b003      	add	sp, #12
 8007db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dba:	ab01      	add	r3, sp, #4
 8007dbc:	466a      	mov	r2, sp
 8007dbe:	f7ff ffc8 	bl	8007d52 <__swhatbuf_r>
 8007dc2:	9f00      	ldr	r7, [sp, #0]
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 fcdb 	bl	8008784 <_malloc_r>
 8007dce:	b948      	cbnz	r0, 8007de4 <__smakebuf_r+0x46>
 8007dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd4:	059a      	lsls	r2, r3, #22
 8007dd6:	d4ee      	bmi.n	8007db6 <__smakebuf_r+0x18>
 8007dd8:	f023 0303 	bic.w	r3, r3, #3
 8007ddc:	f043 0302 	orr.w	r3, r3, #2
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	e7e2      	b.n	8007daa <__smakebuf_r+0xc>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	6020      	str	r0, [r4, #0]
 8007de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007df4:	b15b      	cbz	r3, 8007e0e <__smakebuf_r+0x70>
 8007df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 fa9c 	bl	8008338 <_isatty_r>
 8007e00:	b128      	cbz	r0, 8007e0e <__smakebuf_r+0x70>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	f023 0303 	bic.w	r3, r3, #3
 8007e08:	f043 0301 	orr.w	r3, r3, #1
 8007e0c:	81a3      	strh	r3, [r4, #12]
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	431d      	orrs	r5, r3
 8007e12:	81a5      	strh	r5, [r4, #12]
 8007e14:	e7cf      	b.n	8007db6 <__smakebuf_r+0x18>
	...

08007e18 <_perror_r>:
 8007e18:	6a03      	ldr	r3, [r0, #32]
 8007e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e1c:	68c4      	ldr	r4, [r0, #12]
 8007e1e:	4605      	mov	r5, r0
 8007e20:	460e      	mov	r6, r1
 8007e22:	b90b      	cbnz	r3, 8007e28 <_perror_r+0x10>
 8007e24:	f7ff fe58 	bl	8007ad8 <__sinit>
 8007e28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e2a:	07d8      	lsls	r0, r3, #31
 8007e2c:	d405      	bmi.n	8007e3a <_perror_r+0x22>
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	0599      	lsls	r1, r3, #22
 8007e32:	d402      	bmi.n	8007e3a <_perror_r+0x22>
 8007e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e36:	f000 fadf 	bl	80083f8 <__retarget_lock_acquire_recursive>
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f7ff fd25 	bl	800788c <_fflush_r>
 8007e42:	bb1e      	cbnz	r6, 8007e8c <_perror_r+0x74>
 8007e44:	6829      	ldr	r1, [r5, #0]
 8007e46:	ab01      	add	r3, sp, #4
 8007e48:	2201      	movs	r2, #1
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f000 f872 	bl	8007f34 <_strerror_r>
 8007e50:	4607      	mov	r7, r0
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d145      	bne.n	8007ee2 <_perror_r+0xca>
 8007e56:	4831      	ldr	r0, [pc, #196]	@ (8007f1c <_perror_r+0x104>)
 8007e58:	4f30      	ldr	r7, [pc, #192]	@ (8007f1c <_perror_r+0x104>)
 8007e5a:	f7f8 fa41 	bl	80002e0 <strlen>
 8007e5e:	4606      	mov	r6, r0
 8007e60:	b156      	cbz	r6, 8007e78 <_perror_r+0x60>
 8007e62:	4620      	mov	r0, r4
 8007e64:	f001 fa24 	bl	80092b0 <fileno>
 8007e68:	4633      	mov	r3, r6
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	463a      	mov	r2, r7
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f000 fa84 	bl	800837c <_write_r>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	da47      	bge.n	8007f08 <_perror_r+0xf0>
 8007e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e80:	81a2      	strh	r2, [r4, #12]
 8007e82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e84:	07d2      	lsls	r2, r2, #31
 8007e86:	d542      	bpl.n	8007f0e <_perror_r+0xf6>
 8007e88:	b003      	add	sp, #12
 8007e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8c:	7833      	ldrb	r3, [r6, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0d8      	beq.n	8007e44 <_perror_r+0x2c>
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7f8 fa24 	bl	80002e0 <strlen>
 8007e98:	4607      	mov	r7, r0
 8007e9a:	b157      	cbz	r7, 8007eb2 <_perror_r+0x9a>
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f001 fa07 	bl	80092b0 <fileno>
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	4601      	mov	r1, r0
 8007ea6:	4632      	mov	r2, r6
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 fa67 	bl	800837c <_write_r>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	da14      	bge.n	8007edc <_perror_r+0xc4>
 8007eb2:	481b      	ldr	r0, [pc, #108]	@ (8007f20 <_perror_r+0x108>)
 8007eb4:	4f1a      	ldr	r7, [pc, #104]	@ (8007f20 <_perror_r+0x108>)
 8007eb6:	f7f8 fa13 	bl	80002e0 <strlen>
 8007eba:	4606      	mov	r6, r0
 8007ebc:	2e00      	cmp	r6, #0
 8007ebe:	d0c1      	beq.n	8007e44 <_perror_r+0x2c>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f001 f9f5 	bl	80092b0 <fileno>
 8007ec6:	4633      	mov	r3, r6
 8007ec8:	4601      	mov	r1, r0
 8007eca:	463a      	mov	r2, r7
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f000 fa55 	bl	800837c <_write_r>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	dbb6      	blt.n	8007e44 <_perror_r+0x2c>
 8007ed6:	1a36      	subs	r6, r6, r0
 8007ed8:	4407      	add	r7, r0
 8007eda:	e7ef      	b.n	8007ebc <_perror_r+0xa4>
 8007edc:	1a3f      	subs	r7, r7, r0
 8007ede:	4406      	add	r6, r0
 8007ee0:	e7db      	b.n	8007e9a <_perror_r+0x82>
 8007ee2:	f7f8 f9fd 	bl	80002e0 <strlen>
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	2e00      	cmp	r6, #0
 8007eea:	d0b4      	beq.n	8007e56 <_perror_r+0x3e>
 8007eec:	4620      	mov	r0, r4
 8007eee:	f001 f9df 	bl	80092b0 <fileno>
 8007ef2:	4633      	mov	r3, r6
 8007ef4:	4601      	mov	r1, r0
 8007ef6:	463a      	mov	r2, r7
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f000 fa3f 	bl	800837c <_write_r>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	dba9      	blt.n	8007e56 <_perror_r+0x3e>
 8007f02:	1a36      	subs	r6, r6, r0
 8007f04:	4407      	add	r7, r0
 8007f06:	e7ef      	b.n	8007ee8 <_perror_r+0xd0>
 8007f08:	1a36      	subs	r6, r6, r0
 8007f0a:	4407      	add	r7, r0
 8007f0c:	e7a8      	b.n	8007e60 <_perror_r+0x48>
 8007f0e:	059b      	lsls	r3, r3, #22
 8007f10:	d4ba      	bmi.n	8007e88 <_perror_r+0x70>
 8007f12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f14:	f000 fa71 	bl	80083fa <__retarget_lock_release_recursive>
 8007f18:	e7b6      	b.n	8007e88 <_perror_r+0x70>
 8007f1a:	bf00      	nop
 8007f1c:	08009bbf 	.word	0x08009bbf
 8007f20:	08009bbc 	.word	0x08009bbc

08007f24 <perror>:
 8007f24:	4b02      	ldr	r3, [pc, #8]	@ (8007f30 <perror+0xc>)
 8007f26:	4601      	mov	r1, r0
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	f7ff bf75 	b.w	8007e18 <_perror_r>
 8007f2e:	bf00      	nop
 8007f30:	2400001c 	.word	0x2400001c

08007f34 <_strerror_r>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	4604      	mov	r4, r0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	288e      	cmp	r0, #142	@ 0x8e
 8007f40:	f200 8130 	bhi.w	80081a4 <_strerror_r+0x270>
 8007f44:	e8df f010 	tbh	[pc, r0, lsl #1]
 8007f48:	0138008f 	.word	0x0138008f
 8007f4c:	00940092 	.word	0x00940092
 8007f50:	00980096 	.word	0x00980096
 8007f54:	009c009a 	.word	0x009c009a
 8007f58:	00a2009e 	.word	0x00a2009e
 8007f5c:	00a800a4 	.word	0x00a800a4
 8007f60:	00ac00aa 	.word	0x00ac00aa
 8007f64:	012e00ae 	.word	0x012e00ae
 8007f68:	00b200b0 	.word	0x00b200b0
 8007f6c:	00b600b4 	.word	0x00b600b4
 8007f70:	00be00b8 	.word	0x00be00b8
 8007f74:	00c600c0 	.word	0x00c600c0
 8007f78:	00ca00c8 	.word	0x00ca00c8
 8007f7c:	00ce00cc 	.word	0x00ce00cc
 8007f80:	00d600d2 	.word	0x00d600d2
 8007f84:	00da00d8 	.word	0x00da00d8
 8007f88:	00de00dc 	.word	0x00de00dc
 8007f8c:	00e200e0 	.word	0x00e200e0
 8007f90:	012e00e4 	.word	0x012e00e4
 8007f94:	012e012e 	.word	0x012e012e
 8007f98:	012e012e 	.word	0x012e012e
 8007f9c:	012e012e 	.word	0x012e012e
 8007fa0:	00e8012e 	.word	0x00e8012e
 8007fa4:	012e00ec 	.word	0x012e00ec
 8007fa8:	012e012e 	.word	0x012e012e
 8007fac:	012e012e 	.word	0x012e012e
 8007fb0:	012e012e 	.word	0x012e012e
 8007fb4:	012e012e 	.word	0x012e012e
 8007fb8:	012e012e 	.word	0x012e012e
 8007fbc:	012e012e 	.word	0x012e012e
 8007fc0:	010800ee 	.word	0x010800ee
 8007fc4:	00f200f0 	.word	0x00f200f0
 8007fc8:	012e012e 	.word	0x012e012e
 8007fcc:	00f4012e 	.word	0x00f4012e
 8007fd0:	012e012e 	.word	0x012e012e
 8007fd4:	00f6012e 	.word	0x00f6012e
 8007fd8:	012e012e 	.word	0x012e012e
 8007fdc:	012e00fa 	.word	0x012e00fa
 8007fe0:	00fc012e 	.word	0x00fc012e
 8007fe4:	012e012e 	.word	0x012e012e
 8007fe8:	012e012e 	.word	0x012e012e
 8007fec:	012e012e 	.word	0x012e012e
 8007ff0:	012e012e 	.word	0x012e012e
 8007ff4:	012e012e 	.word	0x012e012e
 8007ff8:	012e00fe 	.word	0x012e00fe
 8007ffc:	01020100 	.word	0x01020100
 8008000:	012e0104 	.word	0x012e0104
 8008004:	0126012e 	.word	0x0126012e
 8008008:	012e012e 	.word	0x012e012e
 800800c:	012e012e 	.word	0x012e012e
 8008010:	012e012e 	.word	0x012e012e
 8008014:	012e012e 	.word	0x012e012e
 8008018:	01060114 	.word	0x01060114
 800801c:	010c010a 	.word	0x010c010a
 8008020:	0110010e 	.word	0x0110010e
 8008024:	0112012e 	.word	0x0112012e
 8008028:	011a0116 	.word	0x011a0116
 800802c:	00c200ea 	.word	0x00c200ea
 8008030:	00ba012c 	.word	0x00ba012c
 8008034:	00bc00d0 	.word	0x00bc00d0
 8008038:	00a600a0 	.word	0x00a600a0
 800803c:	00f8012a 	.word	0x00f8012a
 8008040:	0118012e 	.word	0x0118012e
 8008044:	011e00c4 	.word	0x011e00c4
 8008048:	012e011c 	.word	0x012e011c
 800804c:	012e012e 	.word	0x012e012e
 8008050:	012e012e 	.word	0x012e012e
 8008054:	012e00d4 	.word	0x012e00d4
 8008058:	012e012e 	.word	0x012e012e
 800805c:	012800e6 	.word	0x012800e6
 8008060:	01220120 	.word	0x01220120
 8008064:	0124      	.short	0x0124
 8008066:	4b55      	ldr	r3, [pc, #340]	@ (80081bc <_strerror_r+0x288>)
 8008068:	4618      	mov	r0, r3
 800806a:	bd10      	pop	{r4, pc}
 800806c:	4b54      	ldr	r3, [pc, #336]	@ (80081c0 <_strerror_r+0x28c>)
 800806e:	e7fb      	b.n	8008068 <_strerror_r+0x134>
 8008070:	4b54      	ldr	r3, [pc, #336]	@ (80081c4 <_strerror_r+0x290>)
 8008072:	e7f9      	b.n	8008068 <_strerror_r+0x134>
 8008074:	4b54      	ldr	r3, [pc, #336]	@ (80081c8 <_strerror_r+0x294>)
 8008076:	e7f7      	b.n	8008068 <_strerror_r+0x134>
 8008078:	4b54      	ldr	r3, [pc, #336]	@ (80081cc <_strerror_r+0x298>)
 800807a:	e7f5      	b.n	8008068 <_strerror_r+0x134>
 800807c:	4b54      	ldr	r3, [pc, #336]	@ (80081d0 <_strerror_r+0x29c>)
 800807e:	e7f3      	b.n	8008068 <_strerror_r+0x134>
 8008080:	4b54      	ldr	r3, [pc, #336]	@ (80081d4 <_strerror_r+0x2a0>)
 8008082:	e7f1      	b.n	8008068 <_strerror_r+0x134>
 8008084:	4b54      	ldr	r3, [pc, #336]	@ (80081d8 <_strerror_r+0x2a4>)
 8008086:	e7ef      	b.n	8008068 <_strerror_r+0x134>
 8008088:	4b54      	ldr	r3, [pc, #336]	@ (80081dc <_strerror_r+0x2a8>)
 800808a:	e7ed      	b.n	8008068 <_strerror_r+0x134>
 800808c:	4b54      	ldr	r3, [pc, #336]	@ (80081e0 <_strerror_r+0x2ac>)
 800808e:	e7eb      	b.n	8008068 <_strerror_r+0x134>
 8008090:	4b54      	ldr	r3, [pc, #336]	@ (80081e4 <_strerror_r+0x2b0>)
 8008092:	e7e9      	b.n	8008068 <_strerror_r+0x134>
 8008094:	4b54      	ldr	r3, [pc, #336]	@ (80081e8 <_strerror_r+0x2b4>)
 8008096:	e7e7      	b.n	8008068 <_strerror_r+0x134>
 8008098:	4b54      	ldr	r3, [pc, #336]	@ (80081ec <_strerror_r+0x2b8>)
 800809a:	e7e5      	b.n	8008068 <_strerror_r+0x134>
 800809c:	4b54      	ldr	r3, [pc, #336]	@ (80081f0 <_strerror_r+0x2bc>)
 800809e:	e7e3      	b.n	8008068 <_strerror_r+0x134>
 80080a0:	4b54      	ldr	r3, [pc, #336]	@ (80081f4 <_strerror_r+0x2c0>)
 80080a2:	e7e1      	b.n	8008068 <_strerror_r+0x134>
 80080a4:	4b54      	ldr	r3, [pc, #336]	@ (80081f8 <_strerror_r+0x2c4>)
 80080a6:	e7df      	b.n	8008068 <_strerror_r+0x134>
 80080a8:	4b54      	ldr	r3, [pc, #336]	@ (80081fc <_strerror_r+0x2c8>)
 80080aa:	e7dd      	b.n	8008068 <_strerror_r+0x134>
 80080ac:	4b54      	ldr	r3, [pc, #336]	@ (8008200 <_strerror_r+0x2cc>)
 80080ae:	e7db      	b.n	8008068 <_strerror_r+0x134>
 80080b0:	4b54      	ldr	r3, [pc, #336]	@ (8008204 <_strerror_r+0x2d0>)
 80080b2:	e7d9      	b.n	8008068 <_strerror_r+0x134>
 80080b4:	4b54      	ldr	r3, [pc, #336]	@ (8008208 <_strerror_r+0x2d4>)
 80080b6:	e7d7      	b.n	8008068 <_strerror_r+0x134>
 80080b8:	4b54      	ldr	r3, [pc, #336]	@ (800820c <_strerror_r+0x2d8>)
 80080ba:	e7d5      	b.n	8008068 <_strerror_r+0x134>
 80080bc:	4b54      	ldr	r3, [pc, #336]	@ (8008210 <_strerror_r+0x2dc>)
 80080be:	e7d3      	b.n	8008068 <_strerror_r+0x134>
 80080c0:	4b54      	ldr	r3, [pc, #336]	@ (8008214 <_strerror_r+0x2e0>)
 80080c2:	e7d1      	b.n	8008068 <_strerror_r+0x134>
 80080c4:	4b54      	ldr	r3, [pc, #336]	@ (8008218 <_strerror_r+0x2e4>)
 80080c6:	e7cf      	b.n	8008068 <_strerror_r+0x134>
 80080c8:	4b54      	ldr	r3, [pc, #336]	@ (800821c <_strerror_r+0x2e8>)
 80080ca:	e7cd      	b.n	8008068 <_strerror_r+0x134>
 80080cc:	4b54      	ldr	r3, [pc, #336]	@ (8008220 <_strerror_r+0x2ec>)
 80080ce:	e7cb      	b.n	8008068 <_strerror_r+0x134>
 80080d0:	4b54      	ldr	r3, [pc, #336]	@ (8008224 <_strerror_r+0x2f0>)
 80080d2:	e7c9      	b.n	8008068 <_strerror_r+0x134>
 80080d4:	4b54      	ldr	r3, [pc, #336]	@ (8008228 <_strerror_r+0x2f4>)
 80080d6:	e7c7      	b.n	8008068 <_strerror_r+0x134>
 80080d8:	4b54      	ldr	r3, [pc, #336]	@ (800822c <_strerror_r+0x2f8>)
 80080da:	e7c5      	b.n	8008068 <_strerror_r+0x134>
 80080dc:	4b54      	ldr	r3, [pc, #336]	@ (8008230 <_strerror_r+0x2fc>)
 80080de:	e7c3      	b.n	8008068 <_strerror_r+0x134>
 80080e0:	4b54      	ldr	r3, [pc, #336]	@ (8008234 <_strerror_r+0x300>)
 80080e2:	e7c1      	b.n	8008068 <_strerror_r+0x134>
 80080e4:	4b54      	ldr	r3, [pc, #336]	@ (8008238 <_strerror_r+0x304>)
 80080e6:	e7bf      	b.n	8008068 <_strerror_r+0x134>
 80080e8:	4b54      	ldr	r3, [pc, #336]	@ (800823c <_strerror_r+0x308>)
 80080ea:	e7bd      	b.n	8008068 <_strerror_r+0x134>
 80080ec:	4b54      	ldr	r3, [pc, #336]	@ (8008240 <_strerror_r+0x30c>)
 80080ee:	e7bb      	b.n	8008068 <_strerror_r+0x134>
 80080f0:	4b54      	ldr	r3, [pc, #336]	@ (8008244 <_strerror_r+0x310>)
 80080f2:	e7b9      	b.n	8008068 <_strerror_r+0x134>
 80080f4:	4b54      	ldr	r3, [pc, #336]	@ (8008248 <_strerror_r+0x314>)
 80080f6:	e7b7      	b.n	8008068 <_strerror_r+0x134>
 80080f8:	4b54      	ldr	r3, [pc, #336]	@ (800824c <_strerror_r+0x318>)
 80080fa:	e7b5      	b.n	8008068 <_strerror_r+0x134>
 80080fc:	4b54      	ldr	r3, [pc, #336]	@ (8008250 <_strerror_r+0x31c>)
 80080fe:	e7b3      	b.n	8008068 <_strerror_r+0x134>
 8008100:	4b54      	ldr	r3, [pc, #336]	@ (8008254 <_strerror_r+0x320>)
 8008102:	e7b1      	b.n	8008068 <_strerror_r+0x134>
 8008104:	4b54      	ldr	r3, [pc, #336]	@ (8008258 <_strerror_r+0x324>)
 8008106:	e7af      	b.n	8008068 <_strerror_r+0x134>
 8008108:	4b54      	ldr	r3, [pc, #336]	@ (800825c <_strerror_r+0x328>)
 800810a:	e7ad      	b.n	8008068 <_strerror_r+0x134>
 800810c:	4b54      	ldr	r3, [pc, #336]	@ (8008260 <_strerror_r+0x32c>)
 800810e:	e7ab      	b.n	8008068 <_strerror_r+0x134>
 8008110:	4b54      	ldr	r3, [pc, #336]	@ (8008264 <_strerror_r+0x330>)
 8008112:	e7a9      	b.n	8008068 <_strerror_r+0x134>
 8008114:	4b54      	ldr	r3, [pc, #336]	@ (8008268 <_strerror_r+0x334>)
 8008116:	e7a7      	b.n	8008068 <_strerror_r+0x134>
 8008118:	4b54      	ldr	r3, [pc, #336]	@ (800826c <_strerror_r+0x338>)
 800811a:	e7a5      	b.n	8008068 <_strerror_r+0x134>
 800811c:	4b54      	ldr	r3, [pc, #336]	@ (8008270 <_strerror_r+0x33c>)
 800811e:	e7a3      	b.n	8008068 <_strerror_r+0x134>
 8008120:	4b54      	ldr	r3, [pc, #336]	@ (8008274 <_strerror_r+0x340>)
 8008122:	e7a1      	b.n	8008068 <_strerror_r+0x134>
 8008124:	4b54      	ldr	r3, [pc, #336]	@ (8008278 <_strerror_r+0x344>)
 8008126:	e79f      	b.n	8008068 <_strerror_r+0x134>
 8008128:	4b54      	ldr	r3, [pc, #336]	@ (800827c <_strerror_r+0x348>)
 800812a:	e79d      	b.n	8008068 <_strerror_r+0x134>
 800812c:	4b54      	ldr	r3, [pc, #336]	@ (8008280 <_strerror_r+0x34c>)
 800812e:	e79b      	b.n	8008068 <_strerror_r+0x134>
 8008130:	4b54      	ldr	r3, [pc, #336]	@ (8008284 <_strerror_r+0x350>)
 8008132:	e799      	b.n	8008068 <_strerror_r+0x134>
 8008134:	4b54      	ldr	r3, [pc, #336]	@ (8008288 <_strerror_r+0x354>)
 8008136:	e797      	b.n	8008068 <_strerror_r+0x134>
 8008138:	4b54      	ldr	r3, [pc, #336]	@ (800828c <_strerror_r+0x358>)
 800813a:	e795      	b.n	8008068 <_strerror_r+0x134>
 800813c:	4b54      	ldr	r3, [pc, #336]	@ (8008290 <_strerror_r+0x35c>)
 800813e:	e793      	b.n	8008068 <_strerror_r+0x134>
 8008140:	4b54      	ldr	r3, [pc, #336]	@ (8008294 <_strerror_r+0x360>)
 8008142:	e791      	b.n	8008068 <_strerror_r+0x134>
 8008144:	4b54      	ldr	r3, [pc, #336]	@ (8008298 <_strerror_r+0x364>)
 8008146:	e78f      	b.n	8008068 <_strerror_r+0x134>
 8008148:	4b54      	ldr	r3, [pc, #336]	@ (800829c <_strerror_r+0x368>)
 800814a:	e78d      	b.n	8008068 <_strerror_r+0x134>
 800814c:	4b54      	ldr	r3, [pc, #336]	@ (80082a0 <_strerror_r+0x36c>)
 800814e:	e78b      	b.n	8008068 <_strerror_r+0x134>
 8008150:	4b54      	ldr	r3, [pc, #336]	@ (80082a4 <_strerror_r+0x370>)
 8008152:	e789      	b.n	8008068 <_strerror_r+0x134>
 8008154:	4b54      	ldr	r3, [pc, #336]	@ (80082a8 <_strerror_r+0x374>)
 8008156:	e787      	b.n	8008068 <_strerror_r+0x134>
 8008158:	4b54      	ldr	r3, [pc, #336]	@ (80082ac <_strerror_r+0x378>)
 800815a:	e785      	b.n	8008068 <_strerror_r+0x134>
 800815c:	4b54      	ldr	r3, [pc, #336]	@ (80082b0 <_strerror_r+0x37c>)
 800815e:	e783      	b.n	8008068 <_strerror_r+0x134>
 8008160:	4b54      	ldr	r3, [pc, #336]	@ (80082b4 <_strerror_r+0x380>)
 8008162:	e781      	b.n	8008068 <_strerror_r+0x134>
 8008164:	4b54      	ldr	r3, [pc, #336]	@ (80082b8 <_strerror_r+0x384>)
 8008166:	e77f      	b.n	8008068 <_strerror_r+0x134>
 8008168:	4b54      	ldr	r3, [pc, #336]	@ (80082bc <_strerror_r+0x388>)
 800816a:	e77d      	b.n	8008068 <_strerror_r+0x134>
 800816c:	4b54      	ldr	r3, [pc, #336]	@ (80082c0 <_strerror_r+0x38c>)
 800816e:	e77b      	b.n	8008068 <_strerror_r+0x134>
 8008170:	4b54      	ldr	r3, [pc, #336]	@ (80082c4 <_strerror_r+0x390>)
 8008172:	e779      	b.n	8008068 <_strerror_r+0x134>
 8008174:	4b54      	ldr	r3, [pc, #336]	@ (80082c8 <_strerror_r+0x394>)
 8008176:	e777      	b.n	8008068 <_strerror_r+0x134>
 8008178:	4b54      	ldr	r3, [pc, #336]	@ (80082cc <_strerror_r+0x398>)
 800817a:	e775      	b.n	8008068 <_strerror_r+0x134>
 800817c:	4b54      	ldr	r3, [pc, #336]	@ (80082d0 <_strerror_r+0x39c>)
 800817e:	e773      	b.n	8008068 <_strerror_r+0x134>
 8008180:	4b54      	ldr	r3, [pc, #336]	@ (80082d4 <_strerror_r+0x3a0>)
 8008182:	e771      	b.n	8008068 <_strerror_r+0x134>
 8008184:	4b54      	ldr	r3, [pc, #336]	@ (80082d8 <_strerror_r+0x3a4>)
 8008186:	e76f      	b.n	8008068 <_strerror_r+0x134>
 8008188:	4b54      	ldr	r3, [pc, #336]	@ (80082dc <_strerror_r+0x3a8>)
 800818a:	e76d      	b.n	8008068 <_strerror_r+0x134>
 800818c:	4b54      	ldr	r3, [pc, #336]	@ (80082e0 <_strerror_r+0x3ac>)
 800818e:	e76b      	b.n	8008068 <_strerror_r+0x134>
 8008190:	4b54      	ldr	r3, [pc, #336]	@ (80082e4 <_strerror_r+0x3b0>)
 8008192:	e769      	b.n	8008068 <_strerror_r+0x134>
 8008194:	4b54      	ldr	r3, [pc, #336]	@ (80082e8 <_strerror_r+0x3b4>)
 8008196:	e767      	b.n	8008068 <_strerror_r+0x134>
 8008198:	4b54      	ldr	r3, [pc, #336]	@ (80082ec <_strerror_r+0x3b8>)
 800819a:	e765      	b.n	8008068 <_strerror_r+0x134>
 800819c:	4b54      	ldr	r3, [pc, #336]	@ (80082f0 <_strerror_r+0x3bc>)
 800819e:	e763      	b.n	8008068 <_strerror_r+0x134>
 80081a0:	4b54      	ldr	r3, [pc, #336]	@ (80082f4 <_strerror_r+0x3c0>)
 80081a2:	e761      	b.n	8008068 <_strerror_r+0x134>
 80081a4:	2a00      	cmp	r2, #0
 80081a6:	bf08      	it	eq
 80081a8:	4622      	moveq	r2, r4
 80081aa:	f000 f8a9 	bl	8008300 <_user_strerror>
 80081ae:	4b52      	ldr	r3, [pc, #328]	@ (80082f8 <_strerror_r+0x3c4>)
 80081b0:	2800      	cmp	r0, #0
 80081b2:	bf18      	it	ne
 80081b4:	4603      	movne	r3, r0
 80081b6:	e757      	b.n	8008068 <_strerror_r+0x134>
 80081b8:	4b50      	ldr	r3, [pc, #320]	@ (80082fc <_strerror_r+0x3c8>)
 80081ba:	e755      	b.n	8008068 <_strerror_r+0x134>
 80081bc:	08009bc1 	.word	0x08009bc1
 80081c0:	08009bd3 	.word	0x08009bd3
 80081c4:	08009bed 	.word	0x08009bed
 80081c8:	08009bfd 	.word	0x08009bfd
 80081cc:	08009c15 	.word	0x08009c15
 80081d0:	08009c1f 	.word	0x08009c1f
 80081d4:	08009c39 	.word	0x08009c39
 80081d8:	08009c4b 	.word	0x08009c4b
 80081dc:	08009c5d 	.word	0x08009c5d
 80081e0:	08009c76 	.word	0x08009c76
 80081e4:	08009c86 	.word	0x08009c86
 80081e8:	08009c92 	.word	0x08009c92
 80081ec:	08009caf 	.word	0x08009caf
 80081f0:	08009cc1 	.word	0x08009cc1
 80081f4:	08009cd2 	.word	0x08009cd2
 80081f8:	08009ce4 	.word	0x08009ce4
 80081fc:	08009cf0 	.word	0x08009cf0
 8008200:	08009d08 	.word	0x08009d08
 8008204:	08009d14 	.word	0x08009d14
 8008208:	08009d26 	.word	0x08009d26
 800820c:	08009d35 	.word	0x08009d35
 8008210:	08009d45 	.word	0x08009d45
 8008214:	08009d52 	.word	0x08009d52
 8008218:	08009d71 	.word	0x08009d71
 800821c:	08009d80 	.word	0x08009d80
 8008220:	08009d91 	.word	0x08009d91
 8008224:	08009db5 	.word	0x08009db5
 8008228:	08009dd3 	.word	0x08009dd3
 800822c:	08009df1 	.word	0x08009df1
 8008230:	08009e11 	.word	0x08009e11
 8008234:	08009e28 	.word	0x08009e28
 8008238:	08009e37 	.word	0x08009e37
 800823c:	08009e46 	.word	0x08009e46
 8008240:	08009e5a 	.word	0x08009e5a
 8008244:	08009e72 	.word	0x08009e72
 8008248:	08009e80 	.word	0x08009e80
 800824c:	08009e8d 	.word	0x08009e8d
 8008250:	08009ea3 	.word	0x08009ea3
 8008254:	08009eb2 	.word	0x08009eb2
 8008258:	08009ebe 	.word	0x08009ebe
 800825c:	08009eed 	.word	0x08009eed
 8008260:	08009efe 	.word	0x08009efe
 8008264:	08009f19 	.word	0x08009f19
 8008268:	08009f2c 	.word	0x08009f2c
 800826c:	08009f42 	.word	0x08009f42
 8008270:	08009f4b 	.word	0x08009f4b
 8008274:	08009f62 	.word	0x08009f62
 8008278:	08009f6a 	.word	0x08009f6a
 800827c:	08009f77 	.word	0x08009f77
 8008280:	08009f8c 	.word	0x08009f8c
 8008284:	08009fa0 	.word	0x08009fa0
 8008288:	08009fb8 	.word	0x08009fb8
 800828c:	08009fc7 	.word	0x08009fc7
 8008290:	08009fd8 	.word	0x08009fd8
 8008294:	08009feb 	.word	0x08009feb
 8008298:	08009ff7 	.word	0x08009ff7
 800829c:	0800a010 	.word	0x0800a010
 80082a0:	0800a024 	.word	0x0800a024
 80082a4:	0800a03f 	.word	0x0800a03f
 80082a8:	0800a057 	.word	0x0800a057
 80082ac:	0800a071 	.word	0x0800a071
 80082b0:	0800a079 	.word	0x0800a079
 80082b4:	0800a0a9 	.word	0x0800a0a9
 80082b8:	0800a0c8 	.word	0x0800a0c8
 80082bc:	0800a0e7 	.word	0x0800a0e7
 80082c0:	0800a0fe 	.word	0x0800a0fe
 80082c4:	0800a111 	.word	0x0800a111
 80082c8:	0800a12a 	.word	0x0800a12a
 80082cc:	0800a141 	.word	0x0800a141
 80082d0:	0800a157 	.word	0x0800a157
 80082d4:	0800a178 	.word	0x0800a178
 80082d8:	0800a190 	.word	0x0800a190
 80082dc:	0800a1ac 	.word	0x0800a1ac
 80082e0:	0800a1bf 	.word	0x0800a1bf
 80082e4:	0800a1d5 	.word	0x0800a1d5
 80082e8:	0800a1e9 	.word	0x0800a1e9
 80082ec:	0800a20b 	.word	0x0800a20b
 80082f0:	0800a231 	.word	0x0800a231
 80082f4:	0800a242 	.word	0x0800a242
 80082f8:	08009bc0 	.word	0x08009bc0
 80082fc:	08009bc9 	.word	0x08009bc9

08008300 <_user_strerror>:
 8008300:	2000      	movs	r0, #0
 8008302:	4770      	bx	lr

08008304 <memset>:
 8008304:	4402      	add	r2, r0
 8008306:	4603      	mov	r3, r0
 8008308:	4293      	cmp	r3, r2
 800830a:	d100      	bne.n	800830e <memset+0xa>
 800830c:	4770      	bx	lr
 800830e:	f803 1b01 	strb.w	r1, [r3], #1
 8008312:	e7f9      	b.n	8008308 <memset+0x4>

08008314 <_fstat_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d07      	ldr	r5, [pc, #28]	@ (8008334 <_fstat_r+0x20>)
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	4611      	mov	r1, r2
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	f7f8 fd98 	bl	8000e56 <_fstat>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	d102      	bne.n	8008330 <_fstat_r+0x1c>
 800832a:	682b      	ldr	r3, [r5, #0]
 800832c:	b103      	cbz	r3, 8008330 <_fstat_r+0x1c>
 800832e:	6023      	str	r3, [r4, #0]
 8008330:	bd38      	pop	{r3, r4, r5, pc}
 8008332:	bf00      	nop
 8008334:	240402d4 	.word	0x240402d4

08008338 <_isatty_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d06      	ldr	r5, [pc, #24]	@ (8008354 <_isatty_r+0x1c>)
 800833c:	2300      	movs	r3, #0
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	602b      	str	r3, [r5, #0]
 8008344:	f7f8 fd97 	bl	8000e76 <_isatty>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_isatty_r+0x1a>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_isatty_r+0x1a>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	240402d4 	.word	0x240402d4

08008358 <_open_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4d07      	ldr	r5, [pc, #28]	@ (8008378 <_open_r+0x20>)
 800835c:	4604      	mov	r4, r0
 800835e:	4608      	mov	r0, r1
 8008360:	4611      	mov	r1, r2
 8008362:	2200      	movs	r2, #0
 8008364:	602a      	str	r2, [r5, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	f7f8 fd9d 	bl	8000ea6 <_open>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d102      	bne.n	8008376 <_open_r+0x1e>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	b103      	cbz	r3, 8008376 <_open_r+0x1e>
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	240402d4 	.word	0x240402d4

0800837c <_write_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d07      	ldr	r5, [pc, #28]	@ (800839c <_write_r+0x20>)
 8008380:	4604      	mov	r4, r0
 8008382:	4608      	mov	r0, r1
 8008384:	4611      	mov	r1, r2
 8008386:	2200      	movs	r2, #0
 8008388:	602a      	str	r2, [r5, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	f7f8 fd3b 	bl	8000e06 <_write>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_write_r+0x1e>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_write_r+0x1e>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	240402d4 	.word	0x240402d4

080083a0 <__errno>:
 80083a0:	4b01      	ldr	r3, [pc, #4]	@ (80083a8 <__errno+0x8>)
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	2400001c 	.word	0x2400001c

080083ac <__libc_init_array>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	4d0d      	ldr	r5, [pc, #52]	@ (80083e4 <__libc_init_array+0x38>)
 80083b0:	4c0d      	ldr	r4, [pc, #52]	@ (80083e8 <__libc_init_array+0x3c>)
 80083b2:	1b64      	subs	r4, r4, r5
 80083b4:	10a4      	asrs	r4, r4, #2
 80083b6:	2600      	movs	r6, #0
 80083b8:	42a6      	cmp	r6, r4
 80083ba:	d109      	bne.n	80083d0 <__libc_init_array+0x24>
 80083bc:	4d0b      	ldr	r5, [pc, #44]	@ (80083ec <__libc_init_array+0x40>)
 80083be:	4c0c      	ldr	r4, [pc, #48]	@ (80083f0 <__libc_init_array+0x44>)
 80083c0:	f001 faa0 	bl	8009904 <_init>
 80083c4:	1b64      	subs	r4, r4, r5
 80083c6:	10a4      	asrs	r4, r4, #2
 80083c8:	2600      	movs	r6, #0
 80083ca:	42a6      	cmp	r6, r4
 80083cc:	d105      	bne.n	80083da <__libc_init_array+0x2e>
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d4:	4798      	blx	r3
 80083d6:	3601      	adds	r6, #1
 80083d8:	e7ee      	b.n	80083b8 <__libc_init_array+0xc>
 80083da:	f855 3b04 	ldr.w	r3, [r5], #4
 80083de:	4798      	blx	r3
 80083e0:	3601      	adds	r6, #1
 80083e2:	e7f2      	b.n	80083ca <__libc_init_array+0x1e>
 80083e4:	0800a3b0 	.word	0x0800a3b0
 80083e8:	0800a3b0 	.word	0x0800a3b0
 80083ec:	0800a3b0 	.word	0x0800a3b0
 80083f0:	0800a3b4 	.word	0x0800a3b4

080083f4 <__retarget_lock_init_recursive>:
 80083f4:	4770      	bx	lr

080083f6 <__retarget_lock_close_recursive>:
 80083f6:	4770      	bx	lr

080083f8 <__retarget_lock_acquire_recursive>:
 80083f8:	4770      	bx	lr

080083fa <__retarget_lock_release_recursive>:
 80083fa:	4770      	bx	lr

080083fc <_free_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4605      	mov	r5, r0
 8008400:	2900      	cmp	r1, #0
 8008402:	d041      	beq.n	8008488 <_free_r+0x8c>
 8008404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008408:	1f0c      	subs	r4, r1, #4
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfb8      	it	lt
 800840e:	18e4      	addlt	r4, r4, r3
 8008410:	f000 fefe 	bl	8009210 <__malloc_lock>
 8008414:	4a1d      	ldr	r2, [pc, #116]	@ (800848c <_free_r+0x90>)
 8008416:	6813      	ldr	r3, [r2, #0]
 8008418:	b933      	cbnz	r3, 8008428 <_free_r+0x2c>
 800841a:	6063      	str	r3, [r4, #4]
 800841c:	6014      	str	r4, [r2, #0]
 800841e:	4628      	mov	r0, r5
 8008420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008424:	f000 befa 	b.w	800921c <__malloc_unlock>
 8008428:	42a3      	cmp	r3, r4
 800842a:	d908      	bls.n	800843e <_free_r+0x42>
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	1821      	adds	r1, r4, r0
 8008430:	428b      	cmp	r3, r1
 8008432:	bf01      	itttt	eq
 8008434:	6819      	ldreq	r1, [r3, #0]
 8008436:	685b      	ldreq	r3, [r3, #4]
 8008438:	1809      	addeq	r1, r1, r0
 800843a:	6021      	streq	r1, [r4, #0]
 800843c:	e7ed      	b.n	800841a <_free_r+0x1e>
 800843e:	461a      	mov	r2, r3
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	b10b      	cbz	r3, 8008448 <_free_r+0x4c>
 8008444:	42a3      	cmp	r3, r4
 8008446:	d9fa      	bls.n	800843e <_free_r+0x42>
 8008448:	6811      	ldr	r1, [r2, #0]
 800844a:	1850      	adds	r0, r2, r1
 800844c:	42a0      	cmp	r0, r4
 800844e:	d10b      	bne.n	8008468 <_free_r+0x6c>
 8008450:	6820      	ldr	r0, [r4, #0]
 8008452:	4401      	add	r1, r0
 8008454:	1850      	adds	r0, r2, r1
 8008456:	4283      	cmp	r3, r0
 8008458:	6011      	str	r1, [r2, #0]
 800845a:	d1e0      	bne.n	800841e <_free_r+0x22>
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	6053      	str	r3, [r2, #4]
 8008462:	4408      	add	r0, r1
 8008464:	6010      	str	r0, [r2, #0]
 8008466:	e7da      	b.n	800841e <_free_r+0x22>
 8008468:	d902      	bls.n	8008470 <_free_r+0x74>
 800846a:	230c      	movs	r3, #12
 800846c:	602b      	str	r3, [r5, #0]
 800846e:	e7d6      	b.n	800841e <_free_r+0x22>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	1821      	adds	r1, r4, r0
 8008474:	428b      	cmp	r3, r1
 8008476:	bf04      	itt	eq
 8008478:	6819      	ldreq	r1, [r3, #0]
 800847a:	685b      	ldreq	r3, [r3, #4]
 800847c:	6063      	str	r3, [r4, #4]
 800847e:	bf04      	itt	eq
 8008480:	1809      	addeq	r1, r1, r0
 8008482:	6021      	streq	r1, [r4, #0]
 8008484:	6054      	str	r4, [r2, #4]
 8008486:	e7ca      	b.n	800841e <_free_r+0x22>
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	240402d0 	.word	0x240402d0

08008490 <__ssputs_r>:
 8008490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	688e      	ldr	r6, [r1, #8]
 8008496:	461f      	mov	r7, r3
 8008498:	42be      	cmp	r6, r7
 800849a:	680b      	ldr	r3, [r1, #0]
 800849c:	4682      	mov	sl, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	4690      	mov	r8, r2
 80084a2:	d82d      	bhi.n	8008500 <__ssputs_r+0x70>
 80084a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084ac:	d026      	beq.n	80084fc <__ssputs_r+0x6c>
 80084ae:	6965      	ldr	r5, [r4, #20]
 80084b0:	6909      	ldr	r1, [r1, #16]
 80084b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084b6:	eba3 0901 	sub.w	r9, r3, r1
 80084ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084be:	1c7b      	adds	r3, r7, #1
 80084c0:	444b      	add	r3, r9
 80084c2:	106d      	asrs	r5, r5, #1
 80084c4:	429d      	cmp	r5, r3
 80084c6:	bf38      	it	cc
 80084c8:	461d      	movcc	r5, r3
 80084ca:	0553      	lsls	r3, r2, #21
 80084cc:	d527      	bpl.n	800851e <__ssputs_r+0x8e>
 80084ce:	4629      	mov	r1, r5
 80084d0:	f000 f958 	bl	8008784 <_malloc_r>
 80084d4:	4606      	mov	r6, r0
 80084d6:	b360      	cbz	r0, 8008532 <__ssputs_r+0xa2>
 80084d8:	6921      	ldr	r1, [r4, #16]
 80084da:	464a      	mov	r2, r9
 80084dc:	f001 f9fc 	bl	80098d8 <memcpy>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ea:	81a3      	strh	r3, [r4, #12]
 80084ec:	6126      	str	r6, [r4, #16]
 80084ee:	6165      	str	r5, [r4, #20]
 80084f0:	444e      	add	r6, r9
 80084f2:	eba5 0509 	sub.w	r5, r5, r9
 80084f6:	6026      	str	r6, [r4, #0]
 80084f8:	60a5      	str	r5, [r4, #8]
 80084fa:	463e      	mov	r6, r7
 80084fc:	42be      	cmp	r6, r7
 80084fe:	d900      	bls.n	8008502 <__ssputs_r+0x72>
 8008500:	463e      	mov	r6, r7
 8008502:	6820      	ldr	r0, [r4, #0]
 8008504:	4632      	mov	r2, r6
 8008506:	4641      	mov	r1, r8
 8008508:	f001 f988 	bl	800981c <memmove>
 800850c:	68a3      	ldr	r3, [r4, #8]
 800850e:	1b9b      	subs	r3, r3, r6
 8008510:	60a3      	str	r3, [r4, #8]
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	4433      	add	r3, r6
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	2000      	movs	r0, #0
 800851a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851e:	462a      	mov	r2, r5
 8008520:	f000 ffdf 	bl	80094e2 <_realloc_r>
 8008524:	4606      	mov	r6, r0
 8008526:	2800      	cmp	r0, #0
 8008528:	d1e0      	bne.n	80084ec <__ssputs_r+0x5c>
 800852a:	6921      	ldr	r1, [r4, #16]
 800852c:	4650      	mov	r0, sl
 800852e:	f7ff ff65 	bl	80083fc <_free_r>
 8008532:	230c      	movs	r3, #12
 8008534:	f8ca 3000 	str.w	r3, [sl]
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800853e:	81a3      	strh	r3, [r4, #12]
 8008540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008544:	e7e9      	b.n	800851a <__ssputs_r+0x8a>
	...

08008548 <_svfiprintf_r>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	4698      	mov	r8, r3
 800854e:	898b      	ldrh	r3, [r1, #12]
 8008550:	061b      	lsls	r3, r3, #24
 8008552:	b09d      	sub	sp, #116	@ 0x74
 8008554:	4607      	mov	r7, r0
 8008556:	460d      	mov	r5, r1
 8008558:	4614      	mov	r4, r2
 800855a:	d510      	bpl.n	800857e <_svfiprintf_r+0x36>
 800855c:	690b      	ldr	r3, [r1, #16]
 800855e:	b973      	cbnz	r3, 800857e <_svfiprintf_r+0x36>
 8008560:	2140      	movs	r1, #64	@ 0x40
 8008562:	f000 f90f 	bl	8008784 <_malloc_r>
 8008566:	6028      	str	r0, [r5, #0]
 8008568:	6128      	str	r0, [r5, #16]
 800856a:	b930      	cbnz	r0, 800857a <_svfiprintf_r+0x32>
 800856c:	230c      	movs	r3, #12
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008574:	b01d      	add	sp, #116	@ 0x74
 8008576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857a:	2340      	movs	r3, #64	@ 0x40
 800857c:	616b      	str	r3, [r5, #20]
 800857e:	2300      	movs	r3, #0
 8008580:	9309      	str	r3, [sp, #36]	@ 0x24
 8008582:	2320      	movs	r3, #32
 8008584:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008588:	f8cd 800c 	str.w	r8, [sp, #12]
 800858c:	2330      	movs	r3, #48	@ 0x30
 800858e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800872c <_svfiprintf_r+0x1e4>
 8008592:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008596:	f04f 0901 	mov.w	r9, #1
 800859a:	4623      	mov	r3, r4
 800859c:	469a      	mov	sl, r3
 800859e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a2:	b10a      	cbz	r2, 80085a8 <_svfiprintf_r+0x60>
 80085a4:	2a25      	cmp	r2, #37	@ 0x25
 80085a6:	d1f9      	bne.n	800859c <_svfiprintf_r+0x54>
 80085a8:	ebba 0b04 	subs.w	fp, sl, r4
 80085ac:	d00b      	beq.n	80085c6 <_svfiprintf_r+0x7e>
 80085ae:	465b      	mov	r3, fp
 80085b0:	4622      	mov	r2, r4
 80085b2:	4629      	mov	r1, r5
 80085b4:	4638      	mov	r0, r7
 80085b6:	f7ff ff6b 	bl	8008490 <__ssputs_r>
 80085ba:	3001      	adds	r0, #1
 80085bc:	f000 80a7 	beq.w	800870e <_svfiprintf_r+0x1c6>
 80085c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c2:	445a      	add	r2, fp
 80085c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80085c6:	f89a 3000 	ldrb.w	r3, [sl]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 809f 	beq.w	800870e <_svfiprintf_r+0x1c6>
 80085d0:	2300      	movs	r3, #0
 80085d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085da:	f10a 0a01 	add.w	sl, sl, #1
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	9307      	str	r3, [sp, #28]
 80085e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80085e8:	4654      	mov	r4, sl
 80085ea:	2205      	movs	r2, #5
 80085ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f0:	484e      	ldr	r0, [pc, #312]	@ (800872c <_svfiprintf_r+0x1e4>)
 80085f2:	f7f7 fe7d 	bl	80002f0 <memchr>
 80085f6:	9a04      	ldr	r2, [sp, #16]
 80085f8:	b9d8      	cbnz	r0, 8008632 <_svfiprintf_r+0xea>
 80085fa:	06d0      	lsls	r0, r2, #27
 80085fc:	bf44      	itt	mi
 80085fe:	2320      	movmi	r3, #32
 8008600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008604:	0711      	lsls	r1, r2, #28
 8008606:	bf44      	itt	mi
 8008608:	232b      	movmi	r3, #43	@ 0x2b
 800860a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800860e:	f89a 3000 	ldrb.w	r3, [sl]
 8008612:	2b2a      	cmp	r3, #42	@ 0x2a
 8008614:	d015      	beq.n	8008642 <_svfiprintf_r+0xfa>
 8008616:	9a07      	ldr	r2, [sp, #28]
 8008618:	4654      	mov	r4, sl
 800861a:	2000      	movs	r0, #0
 800861c:	f04f 0c0a 	mov.w	ip, #10
 8008620:	4621      	mov	r1, r4
 8008622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008626:	3b30      	subs	r3, #48	@ 0x30
 8008628:	2b09      	cmp	r3, #9
 800862a:	d94b      	bls.n	80086c4 <_svfiprintf_r+0x17c>
 800862c:	b1b0      	cbz	r0, 800865c <_svfiprintf_r+0x114>
 800862e:	9207      	str	r2, [sp, #28]
 8008630:	e014      	b.n	800865c <_svfiprintf_r+0x114>
 8008632:	eba0 0308 	sub.w	r3, r0, r8
 8008636:	fa09 f303 	lsl.w	r3, r9, r3
 800863a:	4313      	orrs	r3, r2
 800863c:	9304      	str	r3, [sp, #16]
 800863e:	46a2      	mov	sl, r4
 8008640:	e7d2      	b.n	80085e8 <_svfiprintf_r+0xa0>
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	1d19      	adds	r1, r3, #4
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	9103      	str	r1, [sp, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	bfbb      	ittet	lt
 800864e:	425b      	neglt	r3, r3
 8008650:	f042 0202 	orrlt.w	r2, r2, #2
 8008654:	9307      	strge	r3, [sp, #28]
 8008656:	9307      	strlt	r3, [sp, #28]
 8008658:	bfb8      	it	lt
 800865a:	9204      	strlt	r2, [sp, #16]
 800865c:	7823      	ldrb	r3, [r4, #0]
 800865e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008660:	d10a      	bne.n	8008678 <_svfiprintf_r+0x130>
 8008662:	7863      	ldrb	r3, [r4, #1]
 8008664:	2b2a      	cmp	r3, #42	@ 0x2a
 8008666:	d132      	bne.n	80086ce <_svfiprintf_r+0x186>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	1d1a      	adds	r2, r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	9203      	str	r2, [sp, #12]
 8008670:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008674:	3402      	adds	r4, #2
 8008676:	9305      	str	r3, [sp, #20]
 8008678:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800873c <_svfiprintf_r+0x1f4>
 800867c:	7821      	ldrb	r1, [r4, #0]
 800867e:	2203      	movs	r2, #3
 8008680:	4650      	mov	r0, sl
 8008682:	f7f7 fe35 	bl	80002f0 <memchr>
 8008686:	b138      	cbz	r0, 8008698 <_svfiprintf_r+0x150>
 8008688:	9b04      	ldr	r3, [sp, #16]
 800868a:	eba0 000a 	sub.w	r0, r0, sl
 800868e:	2240      	movs	r2, #64	@ 0x40
 8008690:	4082      	lsls	r2, r0
 8008692:	4313      	orrs	r3, r2
 8008694:	3401      	adds	r4, #1
 8008696:	9304      	str	r3, [sp, #16]
 8008698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869c:	4824      	ldr	r0, [pc, #144]	@ (8008730 <_svfiprintf_r+0x1e8>)
 800869e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086a2:	2206      	movs	r2, #6
 80086a4:	f7f7 fe24 	bl	80002f0 <memchr>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d036      	beq.n	800871a <_svfiprintf_r+0x1d2>
 80086ac:	4b21      	ldr	r3, [pc, #132]	@ (8008734 <_svfiprintf_r+0x1ec>)
 80086ae:	bb1b      	cbnz	r3, 80086f8 <_svfiprintf_r+0x1b0>
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	3307      	adds	r3, #7
 80086b4:	f023 0307 	bic.w	r3, r3, #7
 80086b8:	3308      	adds	r3, #8
 80086ba:	9303      	str	r3, [sp, #12]
 80086bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086be:	4433      	add	r3, r6
 80086c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c2:	e76a      	b.n	800859a <_svfiprintf_r+0x52>
 80086c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80086c8:	460c      	mov	r4, r1
 80086ca:	2001      	movs	r0, #1
 80086cc:	e7a8      	b.n	8008620 <_svfiprintf_r+0xd8>
 80086ce:	2300      	movs	r3, #0
 80086d0:	3401      	adds	r4, #1
 80086d2:	9305      	str	r3, [sp, #20]
 80086d4:	4619      	mov	r1, r3
 80086d6:	f04f 0c0a 	mov.w	ip, #10
 80086da:	4620      	mov	r0, r4
 80086dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086e0:	3a30      	subs	r2, #48	@ 0x30
 80086e2:	2a09      	cmp	r2, #9
 80086e4:	d903      	bls.n	80086ee <_svfiprintf_r+0x1a6>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0c6      	beq.n	8008678 <_svfiprintf_r+0x130>
 80086ea:	9105      	str	r1, [sp, #20]
 80086ec:	e7c4      	b.n	8008678 <_svfiprintf_r+0x130>
 80086ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80086f2:	4604      	mov	r4, r0
 80086f4:	2301      	movs	r3, #1
 80086f6:	e7f0      	b.n	80086da <_svfiprintf_r+0x192>
 80086f8:	ab03      	add	r3, sp, #12
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	462a      	mov	r2, r5
 80086fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008738 <_svfiprintf_r+0x1f0>)
 8008700:	a904      	add	r1, sp, #16
 8008702:	4638      	mov	r0, r7
 8008704:	f3af 8000 	nop.w
 8008708:	1c42      	adds	r2, r0, #1
 800870a:	4606      	mov	r6, r0
 800870c:	d1d6      	bne.n	80086bc <_svfiprintf_r+0x174>
 800870e:	89ab      	ldrh	r3, [r5, #12]
 8008710:	065b      	lsls	r3, r3, #25
 8008712:	f53f af2d 	bmi.w	8008570 <_svfiprintf_r+0x28>
 8008716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008718:	e72c      	b.n	8008574 <_svfiprintf_r+0x2c>
 800871a:	ab03      	add	r3, sp, #12
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	462a      	mov	r2, r5
 8008720:	4b05      	ldr	r3, [pc, #20]	@ (8008738 <_svfiprintf_r+0x1f0>)
 8008722:	a904      	add	r1, sp, #16
 8008724:	4638      	mov	r0, r7
 8008726:	f000 f91b 	bl	8008960 <_printf_i>
 800872a:	e7ed      	b.n	8008708 <_svfiprintf_r+0x1c0>
 800872c:	0800a257 	.word	0x0800a257
 8008730:	0800a261 	.word	0x0800a261
 8008734:	00000000 	.word	0x00000000
 8008738:	08008491 	.word	0x08008491
 800873c:	0800a25d 	.word	0x0800a25d

08008740 <sbrk_aligned>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	4e0f      	ldr	r6, [pc, #60]	@ (8008780 <sbrk_aligned+0x40>)
 8008744:	460c      	mov	r4, r1
 8008746:	6831      	ldr	r1, [r6, #0]
 8008748:	4605      	mov	r5, r0
 800874a:	b911      	cbnz	r1, 8008752 <sbrk_aligned+0x12>
 800874c:	f001 f8b4 	bl	80098b8 <_sbrk_r>
 8008750:	6030      	str	r0, [r6, #0]
 8008752:	4621      	mov	r1, r4
 8008754:	4628      	mov	r0, r5
 8008756:	f001 f8af 	bl	80098b8 <_sbrk_r>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d103      	bne.n	8008766 <sbrk_aligned+0x26>
 800875e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008762:	4620      	mov	r0, r4
 8008764:	bd70      	pop	{r4, r5, r6, pc}
 8008766:	1cc4      	adds	r4, r0, #3
 8008768:	f024 0403 	bic.w	r4, r4, #3
 800876c:	42a0      	cmp	r0, r4
 800876e:	d0f8      	beq.n	8008762 <sbrk_aligned+0x22>
 8008770:	1a21      	subs	r1, r4, r0
 8008772:	4628      	mov	r0, r5
 8008774:	f001 f8a0 	bl	80098b8 <_sbrk_r>
 8008778:	3001      	adds	r0, #1
 800877a:	d1f2      	bne.n	8008762 <sbrk_aligned+0x22>
 800877c:	e7ef      	b.n	800875e <sbrk_aligned+0x1e>
 800877e:	bf00      	nop
 8008780:	240402cc 	.word	0x240402cc

08008784 <_malloc_r>:
 8008784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008788:	1ccd      	adds	r5, r1, #3
 800878a:	f025 0503 	bic.w	r5, r5, #3
 800878e:	3508      	adds	r5, #8
 8008790:	2d0c      	cmp	r5, #12
 8008792:	bf38      	it	cc
 8008794:	250c      	movcc	r5, #12
 8008796:	2d00      	cmp	r5, #0
 8008798:	4606      	mov	r6, r0
 800879a:	db01      	blt.n	80087a0 <_malloc_r+0x1c>
 800879c:	42a9      	cmp	r1, r5
 800879e:	d904      	bls.n	80087aa <_malloc_r+0x26>
 80087a0:	230c      	movs	r3, #12
 80087a2:	6033      	str	r3, [r6, #0]
 80087a4:	2000      	movs	r0, #0
 80087a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008880 <_malloc_r+0xfc>
 80087ae:	f000 fd2f 	bl	8009210 <__malloc_lock>
 80087b2:	f8d8 3000 	ldr.w	r3, [r8]
 80087b6:	461c      	mov	r4, r3
 80087b8:	bb44      	cbnz	r4, 800880c <_malloc_r+0x88>
 80087ba:	4629      	mov	r1, r5
 80087bc:	4630      	mov	r0, r6
 80087be:	f7ff ffbf 	bl	8008740 <sbrk_aligned>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	4604      	mov	r4, r0
 80087c6:	d158      	bne.n	800887a <_malloc_r+0xf6>
 80087c8:	f8d8 4000 	ldr.w	r4, [r8]
 80087cc:	4627      	mov	r7, r4
 80087ce:	2f00      	cmp	r7, #0
 80087d0:	d143      	bne.n	800885a <_malloc_r+0xd6>
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	d04b      	beq.n	800886e <_malloc_r+0xea>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	4639      	mov	r1, r7
 80087da:	4630      	mov	r0, r6
 80087dc:	eb04 0903 	add.w	r9, r4, r3
 80087e0:	f001 f86a 	bl	80098b8 <_sbrk_r>
 80087e4:	4581      	cmp	r9, r0
 80087e6:	d142      	bne.n	800886e <_malloc_r+0xea>
 80087e8:	6821      	ldr	r1, [r4, #0]
 80087ea:	1a6d      	subs	r5, r5, r1
 80087ec:	4629      	mov	r1, r5
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7ff ffa6 	bl	8008740 <sbrk_aligned>
 80087f4:	3001      	adds	r0, #1
 80087f6:	d03a      	beq.n	800886e <_malloc_r+0xea>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	442b      	add	r3, r5
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	bb62      	cbnz	r2, 8008860 <_malloc_r+0xdc>
 8008806:	f8c8 7000 	str.w	r7, [r8]
 800880a:	e00f      	b.n	800882c <_malloc_r+0xa8>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	1b52      	subs	r2, r2, r5
 8008810:	d420      	bmi.n	8008854 <_malloc_r+0xd0>
 8008812:	2a0b      	cmp	r2, #11
 8008814:	d917      	bls.n	8008846 <_malloc_r+0xc2>
 8008816:	1961      	adds	r1, r4, r5
 8008818:	42a3      	cmp	r3, r4
 800881a:	6025      	str	r5, [r4, #0]
 800881c:	bf18      	it	ne
 800881e:	6059      	strne	r1, [r3, #4]
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	bf08      	it	eq
 8008824:	f8c8 1000 	streq.w	r1, [r8]
 8008828:	5162      	str	r2, [r4, r5]
 800882a:	604b      	str	r3, [r1, #4]
 800882c:	4630      	mov	r0, r6
 800882e:	f000 fcf5 	bl	800921c <__malloc_unlock>
 8008832:	f104 000b 	add.w	r0, r4, #11
 8008836:	1d23      	adds	r3, r4, #4
 8008838:	f020 0007 	bic.w	r0, r0, #7
 800883c:	1ac2      	subs	r2, r0, r3
 800883e:	bf1c      	itt	ne
 8008840:	1a1b      	subne	r3, r3, r0
 8008842:	50a3      	strne	r3, [r4, r2]
 8008844:	e7af      	b.n	80087a6 <_malloc_r+0x22>
 8008846:	6862      	ldr	r2, [r4, #4]
 8008848:	42a3      	cmp	r3, r4
 800884a:	bf0c      	ite	eq
 800884c:	f8c8 2000 	streq.w	r2, [r8]
 8008850:	605a      	strne	r2, [r3, #4]
 8008852:	e7eb      	b.n	800882c <_malloc_r+0xa8>
 8008854:	4623      	mov	r3, r4
 8008856:	6864      	ldr	r4, [r4, #4]
 8008858:	e7ae      	b.n	80087b8 <_malloc_r+0x34>
 800885a:	463c      	mov	r4, r7
 800885c:	687f      	ldr	r7, [r7, #4]
 800885e:	e7b6      	b.n	80087ce <_malloc_r+0x4a>
 8008860:	461a      	mov	r2, r3
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	42a3      	cmp	r3, r4
 8008866:	d1fb      	bne.n	8008860 <_malloc_r+0xdc>
 8008868:	2300      	movs	r3, #0
 800886a:	6053      	str	r3, [r2, #4]
 800886c:	e7de      	b.n	800882c <_malloc_r+0xa8>
 800886e:	230c      	movs	r3, #12
 8008870:	6033      	str	r3, [r6, #0]
 8008872:	4630      	mov	r0, r6
 8008874:	f000 fcd2 	bl	800921c <__malloc_unlock>
 8008878:	e794      	b.n	80087a4 <_malloc_r+0x20>
 800887a:	6005      	str	r5, [r0, #0]
 800887c:	e7d6      	b.n	800882c <_malloc_r+0xa8>
 800887e:	bf00      	nop
 8008880:	240402d0 	.word	0x240402d0

08008884 <_printf_common>:
 8008884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	4616      	mov	r6, r2
 800888a:	4698      	mov	r8, r3
 800888c:	688a      	ldr	r2, [r1, #8]
 800888e:	690b      	ldr	r3, [r1, #16]
 8008890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008894:	4293      	cmp	r3, r2
 8008896:	bfb8      	it	lt
 8008898:	4613      	movlt	r3, r2
 800889a:	6033      	str	r3, [r6, #0]
 800889c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088a0:	4607      	mov	r7, r0
 80088a2:	460c      	mov	r4, r1
 80088a4:	b10a      	cbz	r2, 80088aa <_printf_common+0x26>
 80088a6:	3301      	adds	r3, #1
 80088a8:	6033      	str	r3, [r6, #0]
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	0699      	lsls	r1, r3, #26
 80088ae:	bf42      	ittt	mi
 80088b0:	6833      	ldrmi	r3, [r6, #0]
 80088b2:	3302      	addmi	r3, #2
 80088b4:	6033      	strmi	r3, [r6, #0]
 80088b6:	6825      	ldr	r5, [r4, #0]
 80088b8:	f015 0506 	ands.w	r5, r5, #6
 80088bc:	d106      	bne.n	80088cc <_printf_common+0x48>
 80088be:	f104 0a19 	add.w	sl, r4, #25
 80088c2:	68e3      	ldr	r3, [r4, #12]
 80088c4:	6832      	ldr	r2, [r6, #0]
 80088c6:	1a9b      	subs	r3, r3, r2
 80088c8:	42ab      	cmp	r3, r5
 80088ca:	dc26      	bgt.n	800891a <_printf_common+0x96>
 80088cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088d0:	6822      	ldr	r2, [r4, #0]
 80088d2:	3b00      	subs	r3, #0
 80088d4:	bf18      	it	ne
 80088d6:	2301      	movne	r3, #1
 80088d8:	0692      	lsls	r2, r2, #26
 80088da:	d42b      	bmi.n	8008934 <_printf_common+0xb0>
 80088dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088e0:	4641      	mov	r1, r8
 80088e2:	4638      	mov	r0, r7
 80088e4:	47c8      	blx	r9
 80088e6:	3001      	adds	r0, #1
 80088e8:	d01e      	beq.n	8008928 <_printf_common+0xa4>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	6922      	ldr	r2, [r4, #16]
 80088ee:	f003 0306 	and.w	r3, r3, #6
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	bf02      	ittt	eq
 80088f6:	68e5      	ldreq	r5, [r4, #12]
 80088f8:	6833      	ldreq	r3, [r6, #0]
 80088fa:	1aed      	subeq	r5, r5, r3
 80088fc:	68a3      	ldr	r3, [r4, #8]
 80088fe:	bf0c      	ite	eq
 8008900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008904:	2500      	movne	r5, #0
 8008906:	4293      	cmp	r3, r2
 8008908:	bfc4      	itt	gt
 800890a:	1a9b      	subgt	r3, r3, r2
 800890c:	18ed      	addgt	r5, r5, r3
 800890e:	2600      	movs	r6, #0
 8008910:	341a      	adds	r4, #26
 8008912:	42b5      	cmp	r5, r6
 8008914:	d11a      	bne.n	800894c <_printf_common+0xc8>
 8008916:	2000      	movs	r0, #0
 8008918:	e008      	b.n	800892c <_printf_common+0xa8>
 800891a:	2301      	movs	r3, #1
 800891c:	4652      	mov	r2, sl
 800891e:	4641      	mov	r1, r8
 8008920:	4638      	mov	r0, r7
 8008922:	47c8      	blx	r9
 8008924:	3001      	adds	r0, #1
 8008926:	d103      	bne.n	8008930 <_printf_common+0xac>
 8008928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800892c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008930:	3501      	adds	r5, #1
 8008932:	e7c6      	b.n	80088c2 <_printf_common+0x3e>
 8008934:	18e1      	adds	r1, r4, r3
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	2030      	movs	r0, #48	@ 0x30
 800893a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800893e:	4422      	add	r2, r4
 8008940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008948:	3302      	adds	r3, #2
 800894a:	e7c7      	b.n	80088dc <_printf_common+0x58>
 800894c:	2301      	movs	r3, #1
 800894e:	4622      	mov	r2, r4
 8008950:	4641      	mov	r1, r8
 8008952:	4638      	mov	r0, r7
 8008954:	47c8      	blx	r9
 8008956:	3001      	adds	r0, #1
 8008958:	d0e6      	beq.n	8008928 <_printf_common+0xa4>
 800895a:	3601      	adds	r6, #1
 800895c:	e7d9      	b.n	8008912 <_printf_common+0x8e>
	...

08008960 <_printf_i>:
 8008960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008964:	7e0f      	ldrb	r7, [r1, #24]
 8008966:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008968:	2f78      	cmp	r7, #120	@ 0x78
 800896a:	4691      	mov	r9, r2
 800896c:	4680      	mov	r8, r0
 800896e:	460c      	mov	r4, r1
 8008970:	469a      	mov	sl, r3
 8008972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008976:	d807      	bhi.n	8008988 <_printf_i+0x28>
 8008978:	2f62      	cmp	r7, #98	@ 0x62
 800897a:	d80a      	bhi.n	8008992 <_printf_i+0x32>
 800897c:	2f00      	cmp	r7, #0
 800897e:	f000 80d2 	beq.w	8008b26 <_printf_i+0x1c6>
 8008982:	2f58      	cmp	r7, #88	@ 0x58
 8008984:	f000 80b9 	beq.w	8008afa <_printf_i+0x19a>
 8008988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800898c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008990:	e03a      	b.n	8008a08 <_printf_i+0xa8>
 8008992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008996:	2b15      	cmp	r3, #21
 8008998:	d8f6      	bhi.n	8008988 <_printf_i+0x28>
 800899a:	a101      	add	r1, pc, #4	@ (adr r1, 80089a0 <_printf_i+0x40>)
 800899c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089a0:	080089f9 	.word	0x080089f9
 80089a4:	08008a0d 	.word	0x08008a0d
 80089a8:	08008989 	.word	0x08008989
 80089ac:	08008989 	.word	0x08008989
 80089b0:	08008989 	.word	0x08008989
 80089b4:	08008989 	.word	0x08008989
 80089b8:	08008a0d 	.word	0x08008a0d
 80089bc:	08008989 	.word	0x08008989
 80089c0:	08008989 	.word	0x08008989
 80089c4:	08008989 	.word	0x08008989
 80089c8:	08008989 	.word	0x08008989
 80089cc:	08008b0d 	.word	0x08008b0d
 80089d0:	08008a37 	.word	0x08008a37
 80089d4:	08008ac7 	.word	0x08008ac7
 80089d8:	08008989 	.word	0x08008989
 80089dc:	08008989 	.word	0x08008989
 80089e0:	08008b2f 	.word	0x08008b2f
 80089e4:	08008989 	.word	0x08008989
 80089e8:	08008a37 	.word	0x08008a37
 80089ec:	08008989 	.word	0x08008989
 80089f0:	08008989 	.word	0x08008989
 80089f4:	08008acf 	.word	0x08008acf
 80089f8:	6833      	ldr	r3, [r6, #0]
 80089fa:	1d1a      	adds	r2, r3, #4
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6032      	str	r2, [r6, #0]
 8008a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e09d      	b.n	8008b48 <_printf_i+0x1e8>
 8008a0c:	6833      	ldr	r3, [r6, #0]
 8008a0e:	6820      	ldr	r0, [r4, #0]
 8008a10:	1d19      	adds	r1, r3, #4
 8008a12:	6031      	str	r1, [r6, #0]
 8008a14:	0606      	lsls	r6, r0, #24
 8008a16:	d501      	bpl.n	8008a1c <_printf_i+0xbc>
 8008a18:	681d      	ldr	r5, [r3, #0]
 8008a1a:	e003      	b.n	8008a24 <_printf_i+0xc4>
 8008a1c:	0645      	lsls	r5, r0, #25
 8008a1e:	d5fb      	bpl.n	8008a18 <_printf_i+0xb8>
 8008a20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a24:	2d00      	cmp	r5, #0
 8008a26:	da03      	bge.n	8008a30 <_printf_i+0xd0>
 8008a28:	232d      	movs	r3, #45	@ 0x2d
 8008a2a:	426d      	negs	r5, r5
 8008a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a30:	4859      	ldr	r0, [pc, #356]	@ (8008b98 <_printf_i+0x238>)
 8008a32:	230a      	movs	r3, #10
 8008a34:	e011      	b.n	8008a5a <_printf_i+0xfa>
 8008a36:	6821      	ldr	r1, [r4, #0]
 8008a38:	6833      	ldr	r3, [r6, #0]
 8008a3a:	0608      	lsls	r0, r1, #24
 8008a3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a40:	d402      	bmi.n	8008a48 <_printf_i+0xe8>
 8008a42:	0649      	lsls	r1, r1, #25
 8008a44:	bf48      	it	mi
 8008a46:	b2ad      	uxthmi	r5, r5
 8008a48:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a4a:	4853      	ldr	r0, [pc, #332]	@ (8008b98 <_printf_i+0x238>)
 8008a4c:	6033      	str	r3, [r6, #0]
 8008a4e:	bf14      	ite	ne
 8008a50:	230a      	movne	r3, #10
 8008a52:	2308      	moveq	r3, #8
 8008a54:	2100      	movs	r1, #0
 8008a56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a5a:	6866      	ldr	r6, [r4, #4]
 8008a5c:	60a6      	str	r6, [r4, #8]
 8008a5e:	2e00      	cmp	r6, #0
 8008a60:	bfa2      	ittt	ge
 8008a62:	6821      	ldrge	r1, [r4, #0]
 8008a64:	f021 0104 	bicge.w	r1, r1, #4
 8008a68:	6021      	strge	r1, [r4, #0]
 8008a6a:	b90d      	cbnz	r5, 8008a70 <_printf_i+0x110>
 8008a6c:	2e00      	cmp	r6, #0
 8008a6e:	d04b      	beq.n	8008b08 <_printf_i+0x1a8>
 8008a70:	4616      	mov	r6, r2
 8008a72:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a76:	fb03 5711 	mls	r7, r3, r1, r5
 8008a7a:	5dc7      	ldrb	r7, [r0, r7]
 8008a7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a80:	462f      	mov	r7, r5
 8008a82:	42bb      	cmp	r3, r7
 8008a84:	460d      	mov	r5, r1
 8008a86:	d9f4      	bls.n	8008a72 <_printf_i+0x112>
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d10b      	bne.n	8008aa4 <_printf_i+0x144>
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	07df      	lsls	r7, r3, #31
 8008a90:	d508      	bpl.n	8008aa4 <_printf_i+0x144>
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	6861      	ldr	r1, [r4, #4]
 8008a96:	4299      	cmp	r1, r3
 8008a98:	bfde      	ittt	le
 8008a9a:	2330      	movle	r3, #48	@ 0x30
 8008a9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008aa0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008aa4:	1b92      	subs	r2, r2, r6
 8008aa6:	6122      	str	r2, [r4, #16]
 8008aa8:	f8cd a000 	str.w	sl, [sp]
 8008aac:	464b      	mov	r3, r9
 8008aae:	aa03      	add	r2, sp, #12
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	f7ff fee6 	bl	8008884 <_printf_common>
 8008ab8:	3001      	adds	r0, #1
 8008aba:	d14a      	bne.n	8008b52 <_printf_i+0x1f2>
 8008abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ac0:	b004      	add	sp, #16
 8008ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	f043 0320 	orr.w	r3, r3, #32
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	4833      	ldr	r0, [pc, #204]	@ (8008b9c <_printf_i+0x23c>)
 8008ad0:	2778      	movs	r7, #120	@ 0x78
 8008ad2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	6831      	ldr	r1, [r6, #0]
 8008ada:	061f      	lsls	r7, r3, #24
 8008adc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ae0:	d402      	bmi.n	8008ae8 <_printf_i+0x188>
 8008ae2:	065f      	lsls	r7, r3, #25
 8008ae4:	bf48      	it	mi
 8008ae6:	b2ad      	uxthmi	r5, r5
 8008ae8:	6031      	str	r1, [r6, #0]
 8008aea:	07d9      	lsls	r1, r3, #31
 8008aec:	bf44      	itt	mi
 8008aee:	f043 0320 	orrmi.w	r3, r3, #32
 8008af2:	6023      	strmi	r3, [r4, #0]
 8008af4:	b11d      	cbz	r5, 8008afe <_printf_i+0x19e>
 8008af6:	2310      	movs	r3, #16
 8008af8:	e7ac      	b.n	8008a54 <_printf_i+0xf4>
 8008afa:	4827      	ldr	r0, [pc, #156]	@ (8008b98 <_printf_i+0x238>)
 8008afc:	e7e9      	b.n	8008ad2 <_printf_i+0x172>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	f023 0320 	bic.w	r3, r3, #32
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	e7f6      	b.n	8008af6 <_printf_i+0x196>
 8008b08:	4616      	mov	r6, r2
 8008b0a:	e7bd      	b.n	8008a88 <_printf_i+0x128>
 8008b0c:	6833      	ldr	r3, [r6, #0]
 8008b0e:	6825      	ldr	r5, [r4, #0]
 8008b10:	6961      	ldr	r1, [r4, #20]
 8008b12:	1d18      	adds	r0, r3, #4
 8008b14:	6030      	str	r0, [r6, #0]
 8008b16:	062e      	lsls	r6, r5, #24
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	d501      	bpl.n	8008b20 <_printf_i+0x1c0>
 8008b1c:	6019      	str	r1, [r3, #0]
 8008b1e:	e002      	b.n	8008b26 <_printf_i+0x1c6>
 8008b20:	0668      	lsls	r0, r5, #25
 8008b22:	d5fb      	bpl.n	8008b1c <_printf_i+0x1bc>
 8008b24:	8019      	strh	r1, [r3, #0]
 8008b26:	2300      	movs	r3, #0
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	4616      	mov	r6, r2
 8008b2c:	e7bc      	b.n	8008aa8 <_printf_i+0x148>
 8008b2e:	6833      	ldr	r3, [r6, #0]
 8008b30:	1d1a      	adds	r2, r3, #4
 8008b32:	6032      	str	r2, [r6, #0]
 8008b34:	681e      	ldr	r6, [r3, #0]
 8008b36:	6862      	ldr	r2, [r4, #4]
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f7f7 fbd8 	bl	80002f0 <memchr>
 8008b40:	b108      	cbz	r0, 8008b46 <_printf_i+0x1e6>
 8008b42:	1b80      	subs	r0, r0, r6
 8008b44:	6060      	str	r0, [r4, #4]
 8008b46:	6863      	ldr	r3, [r4, #4]
 8008b48:	6123      	str	r3, [r4, #16]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b50:	e7aa      	b.n	8008aa8 <_printf_i+0x148>
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	4632      	mov	r2, r6
 8008b56:	4649      	mov	r1, r9
 8008b58:	4640      	mov	r0, r8
 8008b5a:	47d0      	blx	sl
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d0ad      	beq.n	8008abc <_printf_i+0x15c>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	079b      	lsls	r3, r3, #30
 8008b64:	d413      	bmi.n	8008b8e <_printf_i+0x22e>
 8008b66:	68e0      	ldr	r0, [r4, #12]
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	4298      	cmp	r0, r3
 8008b6c:	bfb8      	it	lt
 8008b6e:	4618      	movlt	r0, r3
 8008b70:	e7a6      	b.n	8008ac0 <_printf_i+0x160>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4632      	mov	r2, r6
 8008b76:	4649      	mov	r1, r9
 8008b78:	4640      	mov	r0, r8
 8008b7a:	47d0      	blx	sl
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d09d      	beq.n	8008abc <_printf_i+0x15c>
 8008b80:	3501      	adds	r5, #1
 8008b82:	68e3      	ldr	r3, [r4, #12]
 8008b84:	9903      	ldr	r1, [sp, #12]
 8008b86:	1a5b      	subs	r3, r3, r1
 8008b88:	42ab      	cmp	r3, r5
 8008b8a:	dcf2      	bgt.n	8008b72 <_printf_i+0x212>
 8008b8c:	e7eb      	b.n	8008b66 <_printf_i+0x206>
 8008b8e:	2500      	movs	r5, #0
 8008b90:	f104 0619 	add.w	r6, r4, #25
 8008b94:	e7f5      	b.n	8008b82 <_printf_i+0x222>
 8008b96:	bf00      	nop
 8008b98:	0800a268 	.word	0x0800a268
 8008b9c:	0800a279 	.word	0x0800a279

08008ba0 <__svfiscanf_r>:
 8008ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	461d      	mov	r5, r3
 8008ba6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8008ba8:	07df      	lsls	r7, r3, #31
 8008baa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008bae:	4606      	mov	r6, r0
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	4691      	mov	r9, r2
 8008bb4:	d405      	bmi.n	8008bc2 <__svfiscanf_r+0x22>
 8008bb6:	898b      	ldrh	r3, [r1, #12]
 8008bb8:	0598      	lsls	r0, r3, #22
 8008bba:	d402      	bmi.n	8008bc2 <__svfiscanf_r+0x22>
 8008bbc:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8008bbe:	f7ff fc1b 	bl	80083f8 <__retarget_lock_acquire_recursive>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8008bc8:	4ba7      	ldr	r3, [pc, #668]	@ (8008e68 <__svfiscanf_r+0x2c8>)
 8008bca:	93a0      	str	r3, [sp, #640]	@ 0x280
 8008bcc:	f10d 0804 	add.w	r8, sp, #4
 8008bd0:	4ba6      	ldr	r3, [pc, #664]	@ (8008e6c <__svfiscanf_r+0x2cc>)
 8008bd2:	4fa7      	ldr	r7, [pc, #668]	@ (8008e70 <__svfiscanf_r+0x2d0>)
 8008bd4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008bd8:	93a1      	str	r3, [sp, #644]	@ 0x284
 8008bda:	9500      	str	r5, [sp, #0]
 8008bdc:	f899 3000 	ldrb.w	r3, [r9]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 816c 	beq.w	8008ebe <__svfiscanf_r+0x31e>
 8008be6:	5cf9      	ldrb	r1, [r7, r3]
 8008be8:	f011 0108 	ands.w	r1, r1, #8
 8008bec:	f109 0501 	add.w	r5, r9, #1
 8008bf0:	d019      	beq.n	8008c26 <__svfiscanf_r+0x86>
 8008bf2:	6863      	ldr	r3, [r4, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd0f      	ble.n	8008c18 <__svfiscanf_r+0x78>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	781a      	ldrb	r2, [r3, #0]
 8008bfc:	5cba      	ldrb	r2, [r7, r2]
 8008bfe:	0711      	lsls	r1, r2, #28
 8008c00:	d401      	bmi.n	8008c06 <__svfiscanf_r+0x66>
 8008c02:	46a9      	mov	r9, r5
 8008c04:	e7ea      	b.n	8008bdc <__svfiscanf_r+0x3c>
 8008c06:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008c08:	3201      	adds	r2, #1
 8008c0a:	9245      	str	r2, [sp, #276]	@ 0x114
 8008c0c:	6862      	ldr	r2, [r4, #4]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	3a01      	subs	r2, #1
 8008c12:	6062      	str	r2, [r4, #4]
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	e7ec      	b.n	8008bf2 <__svfiscanf_r+0x52>
 8008c18:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	4798      	blx	r3
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d0e9      	beq.n	8008bf8 <__svfiscanf_r+0x58>
 8008c24:	e7ed      	b.n	8008c02 <__svfiscanf_r+0x62>
 8008c26:	2b25      	cmp	r3, #37	@ 0x25
 8008c28:	d012      	beq.n	8008c50 <__svfiscanf_r+0xb0>
 8008c2a:	4699      	mov	r9, r3
 8008c2c:	6863      	ldr	r3, [r4, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f340 8095 	ble.w	8008d5e <__svfiscanf_r+0x1be>
 8008c34:	6822      	ldr	r2, [r4, #0]
 8008c36:	7813      	ldrb	r3, [r2, #0]
 8008c38:	454b      	cmp	r3, r9
 8008c3a:	f040 8140 	bne.w	8008ebe <__svfiscanf_r+0x31e>
 8008c3e:	6863      	ldr	r3, [r4, #4]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	6063      	str	r3, [r4, #4]
 8008c44:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008c46:	3201      	adds	r2, #1
 8008c48:	3301      	adds	r3, #1
 8008c4a:	6022      	str	r2, [r4, #0]
 8008c4c:	9345      	str	r3, [sp, #276]	@ 0x114
 8008c4e:	e7d8      	b.n	8008c02 <__svfiscanf_r+0x62>
 8008c50:	9141      	str	r1, [sp, #260]	@ 0x104
 8008c52:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008c54:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c5a:	bf02      	ittt	eq
 8008c5c:	2310      	moveq	r3, #16
 8008c5e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008c60:	f109 0502 	addeq.w	r5, r9, #2
 8008c64:	220a      	movs	r2, #10
 8008c66:	46a9      	mov	r9, r5
 8008c68:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008c6c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008c70:	2b09      	cmp	r3, #9
 8008c72:	d91f      	bls.n	8008cb4 <__svfiscanf_r+0x114>
 8008c74:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8008e74 <__svfiscanf_r+0x2d4>
 8008c78:	2203      	movs	r2, #3
 8008c7a:	4650      	mov	r0, sl
 8008c7c:	f7f7 fb38 	bl	80002f0 <memchr>
 8008c80:	b138      	cbz	r0, 8008c92 <__svfiscanf_r+0xf2>
 8008c82:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008c84:	eba0 000a 	sub.w	r0, r0, sl
 8008c88:	2301      	movs	r3, #1
 8008c8a:	4083      	lsls	r3, r0
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	9341      	str	r3, [sp, #260]	@ 0x104
 8008c90:	464d      	mov	r5, r9
 8008c92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c96:	2b78      	cmp	r3, #120	@ 0x78
 8008c98:	d807      	bhi.n	8008caa <__svfiscanf_r+0x10a>
 8008c9a:	2b57      	cmp	r3, #87	@ 0x57
 8008c9c:	d811      	bhi.n	8008cc2 <__svfiscanf_r+0x122>
 8008c9e:	2b25      	cmp	r3, #37	@ 0x25
 8008ca0:	d0c3      	beq.n	8008c2a <__svfiscanf_r+0x8a>
 8008ca2:	d857      	bhi.n	8008d54 <__svfiscanf_r+0x1b4>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 80c1 	beq.w	8008e2c <__svfiscanf_r+0x28c>
 8008caa:	2303      	movs	r3, #3
 8008cac:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008cae:	230a      	movs	r3, #10
 8008cb0:	9342      	str	r3, [sp, #264]	@ 0x108
 8008cb2:	e07e      	b.n	8008db2 <__svfiscanf_r+0x212>
 8008cb4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008cb6:	fb02 1103 	mla	r1, r2, r3, r1
 8008cba:	3930      	subs	r1, #48	@ 0x30
 8008cbc:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008cbe:	464d      	mov	r5, r9
 8008cc0:	e7d1      	b.n	8008c66 <__svfiscanf_r+0xc6>
 8008cc2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008cc6:	2a20      	cmp	r2, #32
 8008cc8:	d8ef      	bhi.n	8008caa <__svfiscanf_r+0x10a>
 8008cca:	a101      	add	r1, pc, #4	@ (adr r1, 8008cd0 <__svfiscanf_r+0x130>)
 8008ccc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008cd0:	08008d91 	.word	0x08008d91
 8008cd4:	08008cab 	.word	0x08008cab
 8008cd8:	08008cab 	.word	0x08008cab
 8008cdc:	08008deb 	.word	0x08008deb
 8008ce0:	08008cab 	.word	0x08008cab
 8008ce4:	08008cab 	.word	0x08008cab
 8008ce8:	08008cab 	.word	0x08008cab
 8008cec:	08008cab 	.word	0x08008cab
 8008cf0:	08008cab 	.word	0x08008cab
 8008cf4:	08008cab 	.word	0x08008cab
 8008cf8:	08008cab 	.word	0x08008cab
 8008cfc:	08008e01 	.word	0x08008e01
 8008d00:	08008de7 	.word	0x08008de7
 8008d04:	08008d5b 	.word	0x08008d5b
 8008d08:	08008d5b 	.word	0x08008d5b
 8008d0c:	08008d5b 	.word	0x08008d5b
 8008d10:	08008cab 	.word	0x08008cab
 8008d14:	08008da3 	.word	0x08008da3
 8008d18:	08008cab 	.word	0x08008cab
 8008d1c:	08008cab 	.word	0x08008cab
 8008d20:	08008cab 	.word	0x08008cab
 8008d24:	08008cab 	.word	0x08008cab
 8008d28:	08008e11 	.word	0x08008e11
 8008d2c:	08008dab 	.word	0x08008dab
 8008d30:	08008d89 	.word	0x08008d89
 8008d34:	08008cab 	.word	0x08008cab
 8008d38:	08008cab 	.word	0x08008cab
 8008d3c:	08008e0d 	.word	0x08008e0d
 8008d40:	08008cab 	.word	0x08008cab
 8008d44:	08008de7 	.word	0x08008de7
 8008d48:	08008cab 	.word	0x08008cab
 8008d4c:	08008cab 	.word	0x08008cab
 8008d50:	08008d91 	.word	0x08008d91
 8008d54:	3b45      	subs	r3, #69	@ 0x45
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d8a7      	bhi.n	8008caa <__svfiscanf_r+0x10a>
 8008d5a:	2305      	movs	r3, #5
 8008d5c:	e028      	b.n	8008db0 <__svfiscanf_r+0x210>
 8008d5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008d60:	4621      	mov	r1, r4
 8008d62:	4630      	mov	r0, r6
 8008d64:	4798      	blx	r3
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f43f af64 	beq.w	8008c34 <__svfiscanf_r+0x94>
 8008d6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d6e:	07da      	lsls	r2, r3, #31
 8008d70:	f140 809d 	bpl.w	8008eae <__svfiscanf_r+0x30e>
 8008d74:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d061      	beq.n	8008e3e <__svfiscanf_r+0x29e>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	0659      	lsls	r1, r3, #25
 8008d7e:	d45e      	bmi.n	8008e3e <__svfiscanf_r+0x29e>
 8008d80:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d88:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008d8a:	f042 0220 	orr.w	r2, r2, #32
 8008d8e:	9241      	str	r2, [sp, #260]	@ 0x104
 8008d90:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d96:	9241      	str	r2, [sp, #260]	@ 0x104
 8008d98:	2210      	movs	r2, #16
 8008d9a:	2b6e      	cmp	r3, #110	@ 0x6e
 8008d9c:	9242      	str	r2, [sp, #264]	@ 0x108
 8008d9e:	d902      	bls.n	8008da6 <__svfiscanf_r+0x206>
 8008da0:	e005      	b.n	8008dae <__svfiscanf_r+0x20e>
 8008da2:	2300      	movs	r3, #0
 8008da4:	9342      	str	r3, [sp, #264]	@ 0x108
 8008da6:	2303      	movs	r3, #3
 8008da8:	e002      	b.n	8008db0 <__svfiscanf_r+0x210>
 8008daa:	2308      	movs	r3, #8
 8008dac:	9342      	str	r3, [sp, #264]	@ 0x108
 8008dae:	2304      	movs	r3, #4
 8008db0:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008db2:	6863      	ldr	r3, [r4, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dd45      	ble.n	8008e44 <__svfiscanf_r+0x2a4>
 8008db8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008dba:	0659      	lsls	r1, r3, #25
 8008dbc:	d404      	bmi.n	8008dc8 <__svfiscanf_r+0x228>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	781a      	ldrb	r2, [r3, #0]
 8008dc2:	5cba      	ldrb	r2, [r7, r2]
 8008dc4:	0712      	lsls	r2, r2, #28
 8008dc6:	d444      	bmi.n	8008e52 <__svfiscanf_r+0x2b2>
 8008dc8:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	dc5b      	bgt.n	8008e86 <__svfiscanf_r+0x2e6>
 8008dce:	466b      	mov	r3, sp
 8008dd0:	4622      	mov	r2, r4
 8008dd2:	a941      	add	r1, sp, #260	@ 0x104
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f893 	bl	8008f00 <_scanf_chars>
 8008dda:	2801      	cmp	r0, #1
 8008ddc:	d06f      	beq.n	8008ebe <__svfiscanf_r+0x31e>
 8008dde:	2802      	cmp	r0, #2
 8008de0:	f47f af0f 	bne.w	8008c02 <__svfiscanf_r+0x62>
 8008de4:	e7c2      	b.n	8008d6c <__svfiscanf_r+0x1cc>
 8008de6:	220a      	movs	r2, #10
 8008de8:	e7d7      	b.n	8008d9a <__svfiscanf_r+0x1fa>
 8008dea:	4629      	mov	r1, r5
 8008dec:	4640      	mov	r0, r8
 8008dee:	f000 f9d5 	bl	800919c <__sccl>
 8008df2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008df8:	9341      	str	r3, [sp, #260]	@ 0x104
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e7d7      	b.n	8008db0 <__svfiscanf_r+0x210>
 8008e00:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e06:	9341      	str	r3, [sp, #260]	@ 0x104
 8008e08:	2300      	movs	r3, #0
 8008e0a:	e7d1      	b.n	8008db0 <__svfiscanf_r+0x210>
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e7cf      	b.n	8008db0 <__svfiscanf_r+0x210>
 8008e10:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008e12:	06c3      	lsls	r3, r0, #27
 8008e14:	f53f aef5 	bmi.w	8008c02 <__svfiscanf_r+0x62>
 8008e18:	9b00      	ldr	r3, [sp, #0]
 8008e1a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008e1c:	1d19      	adds	r1, r3, #4
 8008e1e:	9100      	str	r1, [sp, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	07c0      	lsls	r0, r0, #31
 8008e24:	bf4c      	ite	mi
 8008e26:	801a      	strhmi	r2, [r3, #0]
 8008e28:	601a      	strpl	r2, [r3, #0]
 8008e2a:	e6ea      	b.n	8008c02 <__svfiscanf_r+0x62>
 8008e2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e2e:	07de      	lsls	r6, r3, #31
 8008e30:	d405      	bmi.n	8008e3e <__svfiscanf_r+0x29e>
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	059d      	lsls	r5, r3, #22
 8008e36:	d402      	bmi.n	8008e3e <__svfiscanf_r+0x29e>
 8008e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e3a:	f7ff fade 	bl	80083fa <__retarget_lock_release_recursive>
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e42:	e79d      	b.n	8008d80 <__svfiscanf_r+0x1e0>
 8008e44:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008e46:	4621      	mov	r1, r4
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4798      	blx	r3
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d0b3      	beq.n	8008db8 <__svfiscanf_r+0x218>
 8008e50:	e78c      	b.n	8008d6c <__svfiscanf_r+0x1cc>
 8008e52:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008e54:	3201      	adds	r2, #1
 8008e56:	9245      	str	r2, [sp, #276]	@ 0x114
 8008e58:	6862      	ldr	r2, [r4, #4]
 8008e5a:	3a01      	subs	r2, #1
 8008e5c:	2a00      	cmp	r2, #0
 8008e5e:	6062      	str	r2, [r4, #4]
 8008e60:	dd0a      	ble.n	8008e78 <__svfiscanf_r+0x2d8>
 8008e62:	3301      	adds	r3, #1
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	e7aa      	b.n	8008dbe <__svfiscanf_r+0x21e>
 8008e68:	080093e5 	.word	0x080093e5
 8008e6c:	08009735 	.word	0x08009735
 8008e70:	0800a2a6 	.word	0x0800a2a6
 8008e74:	0800a25d 	.word	0x0800a25d
 8008e78:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	4798      	blx	r3
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d09c      	beq.n	8008dbe <__svfiscanf_r+0x21e>
 8008e84:	e772      	b.n	8008d6c <__svfiscanf_r+0x1cc>
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	dc06      	bgt.n	8008e98 <__svfiscanf_r+0x2f8>
 8008e8a:	466b      	mov	r3, sp
 8008e8c:	4622      	mov	r2, r4
 8008e8e:	a941      	add	r1, sp, #260	@ 0x104
 8008e90:	4630      	mov	r0, r6
 8008e92:	f000 f88f 	bl	8008fb4 <_scanf_i>
 8008e96:	e7a0      	b.n	8008dda <__svfiscanf_r+0x23a>
 8008e98:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed4 <__svfiscanf_r+0x334>)
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f43f aeb1 	beq.w	8008c02 <__svfiscanf_r+0x62>
 8008ea0:	466b      	mov	r3, sp
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	a941      	add	r1, sp, #260	@ 0x104
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f3af 8000 	nop.w
 8008eac:	e795      	b.n	8008dda <__svfiscanf_r+0x23a>
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	0598      	lsls	r0, r3, #22
 8008eb2:	f53f af5f 	bmi.w	8008d74 <__svfiscanf_r+0x1d4>
 8008eb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eb8:	f7ff fa9f 	bl	80083fa <__retarget_lock_release_recursive>
 8008ebc:	e75a      	b.n	8008d74 <__svfiscanf_r+0x1d4>
 8008ebe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ec0:	07da      	lsls	r2, r3, #31
 8008ec2:	d405      	bmi.n	8008ed0 <__svfiscanf_r+0x330>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	059b      	lsls	r3, r3, #22
 8008ec8:	d402      	bmi.n	8008ed0 <__svfiscanf_r+0x330>
 8008eca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ecc:	f7ff fa95 	bl	80083fa <__retarget_lock_release_recursive>
 8008ed0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008ed2:	e755      	b.n	8008d80 <__svfiscanf_r+0x1e0>
 8008ed4:	00000000 	.word	0x00000000

08008ed8 <_vfiscanf_r>:
 8008ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008edc:	460d      	mov	r5, r1
 8008ede:	4616      	mov	r6, r2
 8008ee0:	461f      	mov	r7, r3
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	b118      	cbz	r0, 8008eee <_vfiscanf_r+0x16>
 8008ee6:	6a03      	ldr	r3, [r0, #32]
 8008ee8:	b90b      	cbnz	r3, 8008eee <_vfiscanf_r+0x16>
 8008eea:	f7fe fdf5 	bl	8007ad8 <__sinit>
 8008eee:	463b      	mov	r3, r7
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008efa:	f7ff be51 	b.w	8008ba0 <__svfiscanf_r>
	...

08008f00 <_scanf_chars>:
 8008f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f04:	4615      	mov	r5, r2
 8008f06:	688a      	ldr	r2, [r1, #8]
 8008f08:	4680      	mov	r8, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	b932      	cbnz	r2, 8008f1c <_scanf_chars+0x1c>
 8008f0e:	698a      	ldr	r2, [r1, #24]
 8008f10:	2a00      	cmp	r2, #0
 8008f12:	bf14      	ite	ne
 8008f14:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008f18:	2201      	moveq	r2, #1
 8008f1a:	608a      	str	r2, [r1, #8]
 8008f1c:	6822      	ldr	r2, [r4, #0]
 8008f1e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008fb0 <_scanf_chars+0xb0>
 8008f22:	06d1      	lsls	r1, r2, #27
 8008f24:	bf5f      	itttt	pl
 8008f26:	681a      	ldrpl	r2, [r3, #0]
 8008f28:	1d11      	addpl	r1, r2, #4
 8008f2a:	6019      	strpl	r1, [r3, #0]
 8008f2c:	6816      	ldrpl	r6, [r2, #0]
 8008f2e:	2700      	movs	r7, #0
 8008f30:	69a0      	ldr	r0, [r4, #24]
 8008f32:	b188      	cbz	r0, 8008f58 <_scanf_chars+0x58>
 8008f34:	2801      	cmp	r0, #1
 8008f36:	d107      	bne.n	8008f48 <_scanf_chars+0x48>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	781a      	ldrb	r2, [r3, #0]
 8008f3c:	6963      	ldr	r3, [r4, #20]
 8008f3e:	5c9b      	ldrb	r3, [r3, r2]
 8008f40:	b953      	cbnz	r3, 8008f58 <_scanf_chars+0x58>
 8008f42:	2f00      	cmp	r7, #0
 8008f44:	d031      	beq.n	8008faa <_scanf_chars+0xaa>
 8008f46:	e022      	b.n	8008f8e <_scanf_chars+0x8e>
 8008f48:	2802      	cmp	r0, #2
 8008f4a:	d120      	bne.n	8008f8e <_scanf_chars+0x8e>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008f54:	071b      	lsls	r3, r3, #28
 8008f56:	d41a      	bmi.n	8008f8e <_scanf_chars+0x8e>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	06da      	lsls	r2, r3, #27
 8008f5c:	bf5e      	ittt	pl
 8008f5e:	682b      	ldrpl	r3, [r5, #0]
 8008f60:	781b      	ldrbpl	r3, [r3, #0]
 8008f62:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008f66:	682a      	ldr	r2, [r5, #0]
 8008f68:	686b      	ldr	r3, [r5, #4]
 8008f6a:	3201      	adds	r2, #1
 8008f6c:	602a      	str	r2, [r5, #0]
 8008f6e:	68a2      	ldr	r2, [r4, #8]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	3a01      	subs	r2, #1
 8008f74:	606b      	str	r3, [r5, #4]
 8008f76:	3701      	adds	r7, #1
 8008f78:	60a2      	str	r2, [r4, #8]
 8008f7a:	b142      	cbz	r2, 8008f8e <_scanf_chars+0x8e>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dcd7      	bgt.n	8008f30 <_scanf_chars+0x30>
 8008f80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008f84:	4629      	mov	r1, r5
 8008f86:	4640      	mov	r0, r8
 8008f88:	4798      	blx	r3
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d0d0      	beq.n	8008f30 <_scanf_chars+0x30>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	f013 0310 	ands.w	r3, r3, #16
 8008f94:	d105      	bne.n	8008fa2 <_scanf_chars+0xa2>
 8008f96:	68e2      	ldr	r2, [r4, #12]
 8008f98:	3201      	adds	r2, #1
 8008f9a:	60e2      	str	r2, [r4, #12]
 8008f9c:	69a2      	ldr	r2, [r4, #24]
 8008f9e:	b102      	cbz	r2, 8008fa2 <_scanf_chars+0xa2>
 8008fa0:	7033      	strb	r3, [r6, #0]
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	443b      	add	r3, r7
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	2000      	movs	r0, #0
 8008faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fae:	bf00      	nop
 8008fb0:	0800a2a6 	.word	0x0800a2a6

08008fb4 <_scanf_i>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	4698      	mov	r8, r3
 8008fba:	4b74      	ldr	r3, [pc, #464]	@ (800918c <_scanf_i+0x1d8>)
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	4682      	mov	sl, r0
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	ab03      	add	r3, sp, #12
 8008fca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008fce:	4b70      	ldr	r3, [pc, #448]	@ (8009190 <_scanf_i+0x1dc>)
 8008fd0:	69a1      	ldr	r1, [r4, #24]
 8008fd2:	4a70      	ldr	r2, [pc, #448]	@ (8009194 <_scanf_i+0x1e0>)
 8008fd4:	2903      	cmp	r1, #3
 8008fd6:	bf08      	it	eq
 8008fd8:	461a      	moveq	r2, r3
 8008fda:	68a3      	ldr	r3, [r4, #8]
 8008fdc:	9201      	str	r2, [sp, #4]
 8008fde:	1e5a      	subs	r2, r3, #1
 8008fe0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008fe4:	bf88      	it	hi
 8008fe6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008fea:	4627      	mov	r7, r4
 8008fec:	bf82      	ittt	hi
 8008fee:	eb03 0905 	addhi.w	r9, r3, r5
 8008ff2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008ff6:	60a3      	strhi	r3, [r4, #8]
 8008ff8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008ffc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009000:	bf98      	it	ls
 8009002:	f04f 0900 	movls.w	r9, #0
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	463d      	mov	r5, r7
 800900a:	f04f 0b00 	mov.w	fp, #0
 800900e:	6831      	ldr	r1, [r6, #0]
 8009010:	ab03      	add	r3, sp, #12
 8009012:	7809      	ldrb	r1, [r1, #0]
 8009014:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009018:	2202      	movs	r2, #2
 800901a:	f7f7 f969 	bl	80002f0 <memchr>
 800901e:	b328      	cbz	r0, 800906c <_scanf_i+0xb8>
 8009020:	f1bb 0f01 	cmp.w	fp, #1
 8009024:	d159      	bne.n	80090da <_scanf_i+0x126>
 8009026:	6862      	ldr	r2, [r4, #4]
 8009028:	b92a      	cbnz	r2, 8009036 <_scanf_i+0x82>
 800902a:	6822      	ldr	r2, [r4, #0]
 800902c:	2108      	movs	r1, #8
 800902e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009032:	6061      	str	r1, [r4, #4]
 8009034:	6022      	str	r2, [r4, #0]
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800903c:	6022      	str	r2, [r4, #0]
 800903e:	68a2      	ldr	r2, [r4, #8]
 8009040:	1e51      	subs	r1, r2, #1
 8009042:	60a1      	str	r1, [r4, #8]
 8009044:	b192      	cbz	r2, 800906c <_scanf_i+0xb8>
 8009046:	6832      	ldr	r2, [r6, #0]
 8009048:	1c51      	adds	r1, r2, #1
 800904a:	6031      	str	r1, [r6, #0]
 800904c:	7812      	ldrb	r2, [r2, #0]
 800904e:	f805 2b01 	strb.w	r2, [r5], #1
 8009052:	6872      	ldr	r2, [r6, #4]
 8009054:	3a01      	subs	r2, #1
 8009056:	2a00      	cmp	r2, #0
 8009058:	6072      	str	r2, [r6, #4]
 800905a:	dc07      	bgt.n	800906c <_scanf_i+0xb8>
 800905c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009060:	4631      	mov	r1, r6
 8009062:	4650      	mov	r0, sl
 8009064:	4790      	blx	r2
 8009066:	2800      	cmp	r0, #0
 8009068:	f040 8085 	bne.w	8009176 <_scanf_i+0x1c2>
 800906c:	f10b 0b01 	add.w	fp, fp, #1
 8009070:	f1bb 0f03 	cmp.w	fp, #3
 8009074:	d1cb      	bne.n	800900e <_scanf_i+0x5a>
 8009076:	6863      	ldr	r3, [r4, #4]
 8009078:	b90b      	cbnz	r3, 800907e <_scanf_i+0xca>
 800907a:	230a      	movs	r3, #10
 800907c:	6063      	str	r3, [r4, #4]
 800907e:	6863      	ldr	r3, [r4, #4]
 8009080:	4945      	ldr	r1, [pc, #276]	@ (8009198 <_scanf_i+0x1e4>)
 8009082:	6960      	ldr	r0, [r4, #20]
 8009084:	1ac9      	subs	r1, r1, r3
 8009086:	f000 f889 	bl	800919c <__sccl>
 800908a:	f04f 0b00 	mov.w	fp, #0
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	6822      	ldr	r2, [r4, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d03d      	beq.n	8009112 <_scanf_i+0x15e>
 8009096:	6831      	ldr	r1, [r6, #0]
 8009098:	6960      	ldr	r0, [r4, #20]
 800909a:	f891 c000 	ldrb.w	ip, [r1]
 800909e:	f810 000c 	ldrb.w	r0, [r0, ip]
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d035      	beq.n	8009112 <_scanf_i+0x15e>
 80090a6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80090aa:	d124      	bne.n	80090f6 <_scanf_i+0x142>
 80090ac:	0510      	lsls	r0, r2, #20
 80090ae:	d522      	bpl.n	80090f6 <_scanf_i+0x142>
 80090b0:	f10b 0b01 	add.w	fp, fp, #1
 80090b4:	f1b9 0f00 	cmp.w	r9, #0
 80090b8:	d003      	beq.n	80090c2 <_scanf_i+0x10e>
 80090ba:	3301      	adds	r3, #1
 80090bc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80090c0:	60a3      	str	r3, [r4, #8]
 80090c2:	6873      	ldr	r3, [r6, #4]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	6073      	str	r3, [r6, #4]
 80090ca:	dd1b      	ble.n	8009104 <_scanf_i+0x150>
 80090cc:	6833      	ldr	r3, [r6, #0]
 80090ce:	3301      	adds	r3, #1
 80090d0:	6033      	str	r3, [r6, #0]
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	60a3      	str	r3, [r4, #8]
 80090d8:	e7d9      	b.n	800908e <_scanf_i+0xda>
 80090da:	f1bb 0f02 	cmp.w	fp, #2
 80090de:	d1ae      	bne.n	800903e <_scanf_i+0x8a>
 80090e0:	6822      	ldr	r2, [r4, #0]
 80090e2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80090e6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80090ea:	d1bf      	bne.n	800906c <_scanf_i+0xb8>
 80090ec:	2110      	movs	r1, #16
 80090ee:	6061      	str	r1, [r4, #4]
 80090f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090f4:	e7a2      	b.n	800903c <_scanf_i+0x88>
 80090f6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80090fa:	6022      	str	r2, [r4, #0]
 80090fc:	780b      	ldrb	r3, [r1, #0]
 80090fe:	f805 3b01 	strb.w	r3, [r5], #1
 8009102:	e7de      	b.n	80090c2 <_scanf_i+0x10e>
 8009104:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009108:	4631      	mov	r1, r6
 800910a:	4650      	mov	r0, sl
 800910c:	4798      	blx	r3
 800910e:	2800      	cmp	r0, #0
 8009110:	d0df      	beq.n	80090d2 <_scanf_i+0x11e>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	05d9      	lsls	r1, r3, #23
 8009116:	d50d      	bpl.n	8009134 <_scanf_i+0x180>
 8009118:	42bd      	cmp	r5, r7
 800911a:	d909      	bls.n	8009130 <_scanf_i+0x17c>
 800911c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009120:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009124:	4632      	mov	r2, r6
 8009126:	4650      	mov	r0, sl
 8009128:	4798      	blx	r3
 800912a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800912e:	464d      	mov	r5, r9
 8009130:	42bd      	cmp	r5, r7
 8009132:	d028      	beq.n	8009186 <_scanf_i+0x1d2>
 8009134:	6822      	ldr	r2, [r4, #0]
 8009136:	f012 0210 	ands.w	r2, r2, #16
 800913a:	d113      	bne.n	8009164 <_scanf_i+0x1b0>
 800913c:	702a      	strb	r2, [r5, #0]
 800913e:	6863      	ldr	r3, [r4, #4]
 8009140:	9e01      	ldr	r6, [sp, #4]
 8009142:	4639      	mov	r1, r7
 8009144:	4650      	mov	r0, sl
 8009146:	47b0      	blx	r6
 8009148:	f8d8 3000 	ldr.w	r3, [r8]
 800914c:	6821      	ldr	r1, [r4, #0]
 800914e:	1d1a      	adds	r2, r3, #4
 8009150:	f8c8 2000 	str.w	r2, [r8]
 8009154:	f011 0f20 	tst.w	r1, #32
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	d00f      	beq.n	800917c <_scanf_i+0x1c8>
 800915c:	6018      	str	r0, [r3, #0]
 800915e:	68e3      	ldr	r3, [r4, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	60e3      	str	r3, [r4, #12]
 8009164:	6923      	ldr	r3, [r4, #16]
 8009166:	1bed      	subs	r5, r5, r7
 8009168:	445d      	add	r5, fp
 800916a:	442b      	add	r3, r5
 800916c:	6123      	str	r3, [r4, #16]
 800916e:	2000      	movs	r0, #0
 8009170:	b007      	add	sp, #28
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	f04f 0b00 	mov.w	fp, #0
 800917a:	e7ca      	b.n	8009112 <_scanf_i+0x15e>
 800917c:	07ca      	lsls	r2, r1, #31
 800917e:	bf4c      	ite	mi
 8009180:	8018      	strhmi	r0, [r3, #0]
 8009182:	6018      	strpl	r0, [r3, #0]
 8009184:	e7eb      	b.n	800915e <_scanf_i+0x1aa>
 8009186:	2001      	movs	r0, #1
 8009188:	e7f2      	b.n	8009170 <_scanf_i+0x1bc>
 800918a:	bf00      	nop
 800918c:	08009958 	.word	0x08009958
 8009190:	08009635 	.word	0x08009635
 8009194:	08009715 	.word	0x08009715
 8009198:	0800a29a 	.word	0x0800a29a

0800919c <__sccl>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	780b      	ldrb	r3, [r1, #0]
 80091a0:	4604      	mov	r4, r0
 80091a2:	2b5e      	cmp	r3, #94	@ 0x5e
 80091a4:	bf0b      	itete	eq
 80091a6:	784b      	ldrbeq	r3, [r1, #1]
 80091a8:	1c4a      	addne	r2, r1, #1
 80091aa:	1c8a      	addeq	r2, r1, #2
 80091ac:	2100      	movne	r1, #0
 80091ae:	bf08      	it	eq
 80091b0:	2101      	moveq	r1, #1
 80091b2:	3801      	subs	r0, #1
 80091b4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80091b8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80091bc:	42a8      	cmp	r0, r5
 80091be:	d1fb      	bne.n	80091b8 <__sccl+0x1c>
 80091c0:	b90b      	cbnz	r3, 80091c6 <__sccl+0x2a>
 80091c2:	1e50      	subs	r0, r2, #1
 80091c4:	bd70      	pop	{r4, r5, r6, pc}
 80091c6:	f081 0101 	eor.w	r1, r1, #1
 80091ca:	54e1      	strb	r1, [r4, r3]
 80091cc:	4610      	mov	r0, r2
 80091ce:	4602      	mov	r2, r0
 80091d0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80091d4:	2d2d      	cmp	r5, #45	@ 0x2d
 80091d6:	d005      	beq.n	80091e4 <__sccl+0x48>
 80091d8:	2d5d      	cmp	r5, #93	@ 0x5d
 80091da:	d016      	beq.n	800920a <__sccl+0x6e>
 80091dc:	2d00      	cmp	r5, #0
 80091de:	d0f1      	beq.n	80091c4 <__sccl+0x28>
 80091e0:	462b      	mov	r3, r5
 80091e2:	e7f2      	b.n	80091ca <__sccl+0x2e>
 80091e4:	7846      	ldrb	r6, [r0, #1]
 80091e6:	2e5d      	cmp	r6, #93	@ 0x5d
 80091e8:	d0fa      	beq.n	80091e0 <__sccl+0x44>
 80091ea:	42b3      	cmp	r3, r6
 80091ec:	dcf8      	bgt.n	80091e0 <__sccl+0x44>
 80091ee:	3002      	adds	r0, #2
 80091f0:	461a      	mov	r2, r3
 80091f2:	3201      	adds	r2, #1
 80091f4:	4296      	cmp	r6, r2
 80091f6:	54a1      	strb	r1, [r4, r2]
 80091f8:	dcfb      	bgt.n	80091f2 <__sccl+0x56>
 80091fa:	1af2      	subs	r2, r6, r3
 80091fc:	3a01      	subs	r2, #1
 80091fe:	1c5d      	adds	r5, r3, #1
 8009200:	42b3      	cmp	r3, r6
 8009202:	bfa8      	it	ge
 8009204:	2200      	movge	r2, #0
 8009206:	18ab      	adds	r3, r5, r2
 8009208:	e7e1      	b.n	80091ce <__sccl+0x32>
 800920a:	4610      	mov	r0, r2
 800920c:	e7da      	b.n	80091c4 <__sccl+0x28>
	...

08009210 <__malloc_lock>:
 8009210:	4801      	ldr	r0, [pc, #4]	@ (8009218 <__malloc_lock+0x8>)
 8009212:	f7ff b8f1 	b.w	80083f8 <__retarget_lock_acquire_recursive>
 8009216:	bf00      	nop
 8009218:	240402c8 	.word	0x240402c8

0800921c <__malloc_unlock>:
 800921c:	4801      	ldr	r0, [pc, #4]	@ (8009224 <__malloc_unlock+0x8>)
 800921e:	f7ff b8ec 	b.w	80083fa <__retarget_lock_release_recursive>
 8009222:	bf00      	nop
 8009224:	240402c8 	.word	0x240402c8

08009228 <__sread>:
 8009228:	b510      	push	{r4, lr}
 800922a:	460c      	mov	r4, r1
 800922c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009230:	f000 fb30 	bl	8009894 <_read_r>
 8009234:	2800      	cmp	r0, #0
 8009236:	bfab      	itete	ge
 8009238:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800923a:	89a3      	ldrhlt	r3, [r4, #12]
 800923c:	181b      	addge	r3, r3, r0
 800923e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009242:	bfac      	ite	ge
 8009244:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009246:	81a3      	strhlt	r3, [r4, #12]
 8009248:	bd10      	pop	{r4, pc}

0800924a <__swrite>:
 800924a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924e:	461f      	mov	r7, r3
 8009250:	898b      	ldrh	r3, [r1, #12]
 8009252:	05db      	lsls	r3, r3, #23
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	4616      	mov	r6, r2
 800925a:	d505      	bpl.n	8009268 <__swrite+0x1e>
 800925c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009260:	2302      	movs	r3, #2
 8009262:	2200      	movs	r2, #0
 8009264:	f000 fb04 	bl	8009870 <_lseek_r>
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800926e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	4632      	mov	r2, r6
 8009276:	463b      	mov	r3, r7
 8009278:	4628      	mov	r0, r5
 800927a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800927e:	f7ff b87d 	b.w	800837c <_write_r>

08009282 <__sseek>:
 8009282:	b510      	push	{r4, lr}
 8009284:	460c      	mov	r4, r1
 8009286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928a:	f000 faf1 	bl	8009870 <_lseek_r>
 800928e:	1c43      	adds	r3, r0, #1
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	bf15      	itete	ne
 8009294:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009296:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800929a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800929e:	81a3      	strheq	r3, [r4, #12]
 80092a0:	bf18      	it	ne
 80092a2:	81a3      	strhne	r3, [r4, #12]
 80092a4:	bd10      	pop	{r4, pc}

080092a6 <__sclose>:
 80092a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092aa:	f000 bad1 	b.w	8009850 <_close_r>
	...

080092b0 <fileno>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d13      	ldr	r5, [pc, #76]	@ (8009300 <fileno+0x50>)
 80092b4:	4604      	mov	r4, r0
 80092b6:	6828      	ldr	r0, [r5, #0]
 80092b8:	b118      	cbz	r0, 80092c2 <fileno+0x12>
 80092ba:	6a03      	ldr	r3, [r0, #32]
 80092bc:	b90b      	cbnz	r3, 80092c2 <fileno+0x12>
 80092be:	f7fe fc0b 	bl	8007ad8 <__sinit>
 80092c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092c4:	07d8      	lsls	r0, r3, #31
 80092c6:	d405      	bmi.n	80092d4 <fileno+0x24>
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	0599      	lsls	r1, r3, #22
 80092cc:	d402      	bmi.n	80092d4 <fileno+0x24>
 80092ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092d0:	f7ff f892 	bl	80083f8 <__retarget_lock_acquire_recursive>
 80092d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d8:	b15b      	cbz	r3, 80092f2 <fileno+0x42>
 80092da:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 80092de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092e0:	07d2      	lsls	r2, r2, #31
 80092e2:	d404      	bmi.n	80092ee <fileno+0x3e>
 80092e4:	059b      	lsls	r3, r3, #22
 80092e6:	d402      	bmi.n	80092ee <fileno+0x3e>
 80092e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ea:	f7ff f886 	bl	80083fa <__retarget_lock_release_recursive>
 80092ee:	4628      	mov	r0, r5
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	682a      	ldr	r2, [r5, #0]
 80092f4:	2109      	movs	r1, #9
 80092f6:	6011      	str	r1, [r2, #0]
 80092f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80092fc:	e7ef      	b.n	80092de <fileno+0x2e>
 80092fe:	bf00      	nop
 8009300:	2400001c 	.word	0x2400001c

08009304 <__sflags>:
 8009304:	780b      	ldrb	r3, [r1, #0]
 8009306:	2b72      	cmp	r3, #114	@ 0x72
 8009308:	b530      	push	{r4, r5, lr}
 800930a:	d022      	beq.n	8009352 <__sflags+0x4e>
 800930c:	2b77      	cmp	r3, #119	@ 0x77
 800930e:	d024      	beq.n	800935a <__sflags+0x56>
 8009310:	2b61      	cmp	r3, #97	@ 0x61
 8009312:	d027      	beq.n	8009364 <__sflags+0x60>
 8009314:	2316      	movs	r3, #22
 8009316:	6003      	str	r3, [r0, #0]
 8009318:	2000      	movs	r0, #0
 800931a:	bd30      	pop	{r4, r5, pc}
 800931c:	2d62      	cmp	r5, #98	@ 0x62
 800931e:	d012      	beq.n	8009346 <__sflags+0x42>
 8009320:	2d78      	cmp	r5, #120	@ 0x78
 8009322:	d013      	beq.n	800934c <__sflags+0x48>
 8009324:	2d2b      	cmp	r5, #43	@ 0x2b
 8009326:	d107      	bne.n	8009338 <__sflags+0x34>
 8009328:	f020 001c 	bic.w	r0, r0, #28
 800932c:	f023 0303 	bic.w	r3, r3, #3
 8009330:	f040 0010 	orr.w	r0, r0, #16
 8009334:	f043 0302 	orr.w	r3, r3, #2
 8009338:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800933c:	2d00      	cmp	r5, #0
 800933e:	d1ed      	bne.n	800931c <__sflags+0x18>
 8009340:	4323      	orrs	r3, r4
 8009342:	6013      	str	r3, [r2, #0]
 8009344:	e7e9      	b.n	800931a <__sflags+0x16>
 8009346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800934a:	e7f5      	b.n	8009338 <__sflags+0x34>
 800934c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009350:	e7f2      	b.n	8009338 <__sflags+0x34>
 8009352:	2400      	movs	r4, #0
 8009354:	4623      	mov	r3, r4
 8009356:	2004      	movs	r0, #4
 8009358:	e7ee      	b.n	8009338 <__sflags+0x34>
 800935a:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 800935e:	2301      	movs	r3, #1
 8009360:	2008      	movs	r0, #8
 8009362:	e7e9      	b.n	8009338 <__sflags+0x34>
 8009364:	f44f 7402 	mov.w	r4, #520	@ 0x208
 8009368:	2301      	movs	r3, #1
 800936a:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800936e:	e7e3      	b.n	8009338 <__sflags+0x34>

08009370 <__submore>:
 8009370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009374:	460c      	mov	r4, r1
 8009376:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009378:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800937c:	4299      	cmp	r1, r3
 800937e:	d11d      	bne.n	80093bc <__submore+0x4c>
 8009380:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009384:	f7ff f9fe 	bl	8008784 <_malloc_r>
 8009388:	b918      	cbnz	r0, 8009392 <__submore+0x22>
 800938a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800938e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009396:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009398:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800939c:	6360      	str	r0, [r4, #52]	@ 0x34
 800939e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80093a2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80093a6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80093aa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80093ae:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80093b2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80093b6:	6020      	str	r0, [r4, #0]
 80093b8:	2000      	movs	r0, #0
 80093ba:	e7e8      	b.n	800938e <__submore+0x1e>
 80093bc:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80093be:	0077      	lsls	r7, r6, #1
 80093c0:	463a      	mov	r2, r7
 80093c2:	f000 f88e 	bl	80094e2 <_realloc_r>
 80093c6:	4605      	mov	r5, r0
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d0de      	beq.n	800938a <__submore+0x1a>
 80093cc:	eb00 0806 	add.w	r8, r0, r6
 80093d0:	4601      	mov	r1, r0
 80093d2:	4632      	mov	r2, r6
 80093d4:	4640      	mov	r0, r8
 80093d6:	f000 fa7f 	bl	80098d8 <memcpy>
 80093da:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80093de:	f8c4 8000 	str.w	r8, [r4]
 80093e2:	e7e9      	b.n	80093b8 <__submore+0x48>

080093e4 <_ungetc_r>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	460d      	mov	r5, r1
 80093e8:	1c69      	adds	r1, r5, #1
 80093ea:	4606      	mov	r6, r0
 80093ec:	4614      	mov	r4, r2
 80093ee:	d01e      	beq.n	800942e <_ungetc_r+0x4a>
 80093f0:	b118      	cbz	r0, 80093fa <_ungetc_r+0x16>
 80093f2:	6a03      	ldr	r3, [r0, #32]
 80093f4:	b90b      	cbnz	r3, 80093fa <_ungetc_r+0x16>
 80093f6:	f7fe fb6f 	bl	8007ad8 <__sinit>
 80093fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093fc:	07da      	lsls	r2, r3, #31
 80093fe:	d405      	bmi.n	800940c <_ungetc_r+0x28>
 8009400:	89a3      	ldrh	r3, [r4, #12]
 8009402:	059b      	lsls	r3, r3, #22
 8009404:	d402      	bmi.n	800940c <_ungetc_r+0x28>
 8009406:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009408:	f7fe fff6 	bl	80083f8 <__retarget_lock_acquire_recursive>
 800940c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009410:	f023 0220 	bic.w	r2, r3, #32
 8009414:	0758      	lsls	r0, r3, #29
 8009416:	81a2      	strh	r2, [r4, #12]
 8009418:	d422      	bmi.n	8009460 <_ungetc_r+0x7c>
 800941a:	06d9      	lsls	r1, r3, #27
 800941c:	d40a      	bmi.n	8009434 <_ungetc_r+0x50>
 800941e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009420:	07d2      	lsls	r2, r2, #31
 8009422:	d404      	bmi.n	800942e <_ungetc_r+0x4a>
 8009424:	0599      	lsls	r1, r3, #22
 8009426:	d402      	bmi.n	800942e <_ungetc_r+0x4a>
 8009428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800942a:	f7fe ffe6 	bl	80083fa <__retarget_lock_release_recursive>
 800942e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009432:	e046      	b.n	80094c2 <_ungetc_r+0xde>
 8009434:	071b      	lsls	r3, r3, #28
 8009436:	d50f      	bpl.n	8009458 <_ungetc_r+0x74>
 8009438:	4621      	mov	r1, r4
 800943a:	4630      	mov	r0, r6
 800943c:	f7fe fa26 	bl	800788c <_fflush_r>
 8009440:	b120      	cbz	r0, 800944c <_ungetc_r+0x68>
 8009442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009444:	07d8      	lsls	r0, r3, #31
 8009446:	d4f2      	bmi.n	800942e <_ungetc_r+0x4a>
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	e7eb      	b.n	8009424 <_ungetc_r+0x40>
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	60a0      	str	r0, [r4, #8]
 8009450:	f023 0308 	bic.w	r3, r3, #8
 8009454:	81a3      	strh	r3, [r4, #12]
 8009456:	61a0      	str	r0, [r4, #24]
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	f043 0304 	orr.w	r3, r3, #4
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009462:	6862      	ldr	r2, [r4, #4]
 8009464:	b2ed      	uxtb	r5, r5
 8009466:	b1d3      	cbz	r3, 800949e <_ungetc_r+0xba>
 8009468:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800946a:	4293      	cmp	r3, r2
 800946c:	dc05      	bgt.n	800947a <_ungetc_r+0x96>
 800946e:	4621      	mov	r1, r4
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff ff7d 	bl	8009370 <__submore>
 8009476:	2800      	cmp	r0, #0
 8009478:	d1e3      	bne.n	8009442 <_ungetc_r+0x5e>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	1e5a      	subs	r2, r3, #1
 800947e:	6022      	str	r2, [r4, #0]
 8009480:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009484:	6863      	ldr	r3, [r4, #4]
 8009486:	3301      	adds	r3, #1
 8009488:	6063      	str	r3, [r4, #4]
 800948a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800948c:	07da      	lsls	r2, r3, #31
 800948e:	d418      	bmi.n	80094c2 <_ungetc_r+0xde>
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	059b      	lsls	r3, r3, #22
 8009494:	d415      	bmi.n	80094c2 <_ungetc_r+0xde>
 8009496:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009498:	f7fe ffaf 	bl	80083fa <__retarget_lock_release_recursive>
 800949c:	e011      	b.n	80094c2 <_ungetc_r+0xde>
 800949e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80094a0:	6920      	ldr	r0, [r4, #16]
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	f001 0101 	and.w	r1, r1, #1
 80094a8:	b168      	cbz	r0, 80094c6 <_ungetc_r+0xe2>
 80094aa:	4298      	cmp	r0, r3
 80094ac:	d20b      	bcs.n	80094c6 <_ungetc_r+0xe2>
 80094ae:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80094b2:	42a8      	cmp	r0, r5
 80094b4:	d107      	bne.n	80094c6 <_ungetc_r+0xe2>
 80094b6:	3b01      	subs	r3, #1
 80094b8:	3201      	adds	r2, #1
 80094ba:	6023      	str	r3, [r4, #0]
 80094bc:	6062      	str	r2, [r4, #4]
 80094be:	2900      	cmp	r1, #0
 80094c0:	d0e6      	beq.n	8009490 <_ungetc_r+0xac>
 80094c2:	4628      	mov	r0, r5
 80094c4:	bd70      	pop	{r4, r5, r6, pc}
 80094c6:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80094ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80094d0:	2303      	movs	r3, #3
 80094d2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80094d4:	4623      	mov	r3, r4
 80094d6:	f803 5f46 	strb.w	r5, [r3, #70]!
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	2301      	movs	r3, #1
 80094de:	6063      	str	r3, [r4, #4]
 80094e0:	e7ed      	b.n	80094be <_ungetc_r+0xda>

080094e2 <_realloc_r>:
 80094e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e6:	4680      	mov	r8, r0
 80094e8:	4615      	mov	r5, r2
 80094ea:	460c      	mov	r4, r1
 80094ec:	b921      	cbnz	r1, 80094f8 <_realloc_r+0x16>
 80094ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094f2:	4611      	mov	r1, r2
 80094f4:	f7ff b946 	b.w	8008784 <_malloc_r>
 80094f8:	b92a      	cbnz	r2, 8009506 <_realloc_r+0x24>
 80094fa:	f7fe ff7f 	bl	80083fc <_free_r>
 80094fe:	2400      	movs	r4, #0
 8009500:	4620      	mov	r0, r4
 8009502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009506:	f000 f9f5 	bl	80098f4 <_malloc_usable_size_r>
 800950a:	4285      	cmp	r5, r0
 800950c:	4606      	mov	r6, r0
 800950e:	d802      	bhi.n	8009516 <_realloc_r+0x34>
 8009510:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009514:	d8f4      	bhi.n	8009500 <_realloc_r+0x1e>
 8009516:	4629      	mov	r1, r5
 8009518:	4640      	mov	r0, r8
 800951a:	f7ff f933 	bl	8008784 <_malloc_r>
 800951e:	4607      	mov	r7, r0
 8009520:	2800      	cmp	r0, #0
 8009522:	d0ec      	beq.n	80094fe <_realloc_r+0x1c>
 8009524:	42b5      	cmp	r5, r6
 8009526:	462a      	mov	r2, r5
 8009528:	4621      	mov	r1, r4
 800952a:	bf28      	it	cs
 800952c:	4632      	movcs	r2, r6
 800952e:	f000 f9d3 	bl	80098d8 <memcpy>
 8009532:	4621      	mov	r1, r4
 8009534:	4640      	mov	r0, r8
 8009536:	f7fe ff61 	bl	80083fc <_free_r>
 800953a:	463c      	mov	r4, r7
 800953c:	e7e0      	b.n	8009500 <_realloc_r+0x1e>
	...

08009540 <_strtol_l.constprop.0>:
 8009540:	2b24      	cmp	r3, #36	@ 0x24
 8009542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009546:	4686      	mov	lr, r0
 8009548:	4690      	mov	r8, r2
 800954a:	d801      	bhi.n	8009550 <_strtol_l.constprop.0+0x10>
 800954c:	2b01      	cmp	r3, #1
 800954e:	d106      	bne.n	800955e <_strtol_l.constprop.0+0x1e>
 8009550:	f7fe ff26 	bl	80083a0 <__errno>
 8009554:	2316      	movs	r3, #22
 8009556:	6003      	str	r3, [r0, #0]
 8009558:	2000      	movs	r0, #0
 800955a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955e:	4834      	ldr	r0, [pc, #208]	@ (8009630 <_strtol_l.constprop.0+0xf0>)
 8009560:	460d      	mov	r5, r1
 8009562:	462a      	mov	r2, r5
 8009564:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009568:	5d06      	ldrb	r6, [r0, r4]
 800956a:	f016 0608 	ands.w	r6, r6, #8
 800956e:	d1f8      	bne.n	8009562 <_strtol_l.constprop.0+0x22>
 8009570:	2c2d      	cmp	r4, #45	@ 0x2d
 8009572:	d12d      	bne.n	80095d0 <_strtol_l.constprop.0+0x90>
 8009574:	782c      	ldrb	r4, [r5, #0]
 8009576:	2601      	movs	r6, #1
 8009578:	1c95      	adds	r5, r2, #2
 800957a:	f033 0210 	bics.w	r2, r3, #16
 800957e:	d109      	bne.n	8009594 <_strtol_l.constprop.0+0x54>
 8009580:	2c30      	cmp	r4, #48	@ 0x30
 8009582:	d12a      	bne.n	80095da <_strtol_l.constprop.0+0x9a>
 8009584:	782a      	ldrb	r2, [r5, #0]
 8009586:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800958a:	2a58      	cmp	r2, #88	@ 0x58
 800958c:	d125      	bne.n	80095da <_strtol_l.constprop.0+0x9a>
 800958e:	786c      	ldrb	r4, [r5, #1]
 8009590:	2310      	movs	r3, #16
 8009592:	3502      	adds	r5, #2
 8009594:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009598:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800959c:	2200      	movs	r2, #0
 800959e:	fbbc f9f3 	udiv	r9, ip, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	fb03 ca19 	mls	sl, r3, r9, ip
 80095a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80095ac:	2f09      	cmp	r7, #9
 80095ae:	d81b      	bhi.n	80095e8 <_strtol_l.constprop.0+0xa8>
 80095b0:	463c      	mov	r4, r7
 80095b2:	42a3      	cmp	r3, r4
 80095b4:	dd27      	ble.n	8009606 <_strtol_l.constprop.0+0xc6>
 80095b6:	1c57      	adds	r7, r2, #1
 80095b8:	d007      	beq.n	80095ca <_strtol_l.constprop.0+0x8a>
 80095ba:	4581      	cmp	r9, r0
 80095bc:	d320      	bcc.n	8009600 <_strtol_l.constprop.0+0xc0>
 80095be:	d101      	bne.n	80095c4 <_strtol_l.constprop.0+0x84>
 80095c0:	45a2      	cmp	sl, r4
 80095c2:	db1d      	blt.n	8009600 <_strtol_l.constprop.0+0xc0>
 80095c4:	fb00 4003 	mla	r0, r0, r3, r4
 80095c8:	2201      	movs	r2, #1
 80095ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ce:	e7eb      	b.n	80095a8 <_strtol_l.constprop.0+0x68>
 80095d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80095d2:	bf04      	itt	eq
 80095d4:	782c      	ldrbeq	r4, [r5, #0]
 80095d6:	1c95      	addeq	r5, r2, #2
 80095d8:	e7cf      	b.n	800957a <_strtol_l.constprop.0+0x3a>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1da      	bne.n	8009594 <_strtol_l.constprop.0+0x54>
 80095de:	2c30      	cmp	r4, #48	@ 0x30
 80095e0:	bf0c      	ite	eq
 80095e2:	2308      	moveq	r3, #8
 80095e4:	230a      	movne	r3, #10
 80095e6:	e7d5      	b.n	8009594 <_strtol_l.constprop.0+0x54>
 80095e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80095ec:	2f19      	cmp	r7, #25
 80095ee:	d801      	bhi.n	80095f4 <_strtol_l.constprop.0+0xb4>
 80095f0:	3c37      	subs	r4, #55	@ 0x37
 80095f2:	e7de      	b.n	80095b2 <_strtol_l.constprop.0+0x72>
 80095f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80095f8:	2f19      	cmp	r7, #25
 80095fa:	d804      	bhi.n	8009606 <_strtol_l.constprop.0+0xc6>
 80095fc:	3c57      	subs	r4, #87	@ 0x57
 80095fe:	e7d8      	b.n	80095b2 <_strtol_l.constprop.0+0x72>
 8009600:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009604:	e7e1      	b.n	80095ca <_strtol_l.constprop.0+0x8a>
 8009606:	1c53      	adds	r3, r2, #1
 8009608:	d108      	bne.n	800961c <_strtol_l.constprop.0+0xdc>
 800960a:	2322      	movs	r3, #34	@ 0x22
 800960c:	f8ce 3000 	str.w	r3, [lr]
 8009610:	4660      	mov	r0, ip
 8009612:	f1b8 0f00 	cmp.w	r8, #0
 8009616:	d0a0      	beq.n	800955a <_strtol_l.constprop.0+0x1a>
 8009618:	1e69      	subs	r1, r5, #1
 800961a:	e006      	b.n	800962a <_strtol_l.constprop.0+0xea>
 800961c:	b106      	cbz	r6, 8009620 <_strtol_l.constprop.0+0xe0>
 800961e:	4240      	negs	r0, r0
 8009620:	f1b8 0f00 	cmp.w	r8, #0
 8009624:	d099      	beq.n	800955a <_strtol_l.constprop.0+0x1a>
 8009626:	2a00      	cmp	r2, #0
 8009628:	d1f6      	bne.n	8009618 <_strtol_l.constprop.0+0xd8>
 800962a:	f8c8 1000 	str.w	r1, [r8]
 800962e:	e794      	b.n	800955a <_strtol_l.constprop.0+0x1a>
 8009630:	0800a2a6 	.word	0x0800a2a6

08009634 <_strtol_r>:
 8009634:	f7ff bf84 	b.w	8009540 <_strtol_l.constprop.0>

08009638 <_strtoul_l.constprop.0>:
 8009638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800963c:	4e34      	ldr	r6, [pc, #208]	@ (8009710 <_strtoul_l.constprop.0+0xd8>)
 800963e:	4686      	mov	lr, r0
 8009640:	460d      	mov	r5, r1
 8009642:	4628      	mov	r0, r5
 8009644:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009648:	5d37      	ldrb	r7, [r6, r4]
 800964a:	f017 0708 	ands.w	r7, r7, #8
 800964e:	d1f8      	bne.n	8009642 <_strtoul_l.constprop.0+0xa>
 8009650:	2c2d      	cmp	r4, #45	@ 0x2d
 8009652:	d12f      	bne.n	80096b4 <_strtoul_l.constprop.0+0x7c>
 8009654:	782c      	ldrb	r4, [r5, #0]
 8009656:	2701      	movs	r7, #1
 8009658:	1c85      	adds	r5, r0, #2
 800965a:	f033 0010 	bics.w	r0, r3, #16
 800965e:	d109      	bne.n	8009674 <_strtoul_l.constprop.0+0x3c>
 8009660:	2c30      	cmp	r4, #48	@ 0x30
 8009662:	d12c      	bne.n	80096be <_strtoul_l.constprop.0+0x86>
 8009664:	7828      	ldrb	r0, [r5, #0]
 8009666:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800966a:	2858      	cmp	r0, #88	@ 0x58
 800966c:	d127      	bne.n	80096be <_strtoul_l.constprop.0+0x86>
 800966e:	786c      	ldrb	r4, [r5, #1]
 8009670:	2310      	movs	r3, #16
 8009672:	3502      	adds	r5, #2
 8009674:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8009678:	2600      	movs	r6, #0
 800967a:	fbb8 f8f3 	udiv	r8, r8, r3
 800967e:	fb03 f908 	mul.w	r9, r3, r8
 8009682:	ea6f 0909 	mvn.w	r9, r9
 8009686:	4630      	mov	r0, r6
 8009688:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800968c:	f1bc 0f09 	cmp.w	ip, #9
 8009690:	d81c      	bhi.n	80096cc <_strtoul_l.constprop.0+0x94>
 8009692:	4664      	mov	r4, ip
 8009694:	42a3      	cmp	r3, r4
 8009696:	dd2a      	ble.n	80096ee <_strtoul_l.constprop.0+0xb6>
 8009698:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800969c:	d007      	beq.n	80096ae <_strtoul_l.constprop.0+0x76>
 800969e:	4580      	cmp	r8, r0
 80096a0:	d322      	bcc.n	80096e8 <_strtoul_l.constprop.0+0xb0>
 80096a2:	d101      	bne.n	80096a8 <_strtoul_l.constprop.0+0x70>
 80096a4:	45a1      	cmp	r9, r4
 80096a6:	db1f      	blt.n	80096e8 <_strtoul_l.constprop.0+0xb0>
 80096a8:	fb00 4003 	mla	r0, r0, r3, r4
 80096ac:	2601      	movs	r6, #1
 80096ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096b2:	e7e9      	b.n	8009688 <_strtoul_l.constprop.0+0x50>
 80096b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80096b6:	bf04      	itt	eq
 80096b8:	782c      	ldrbeq	r4, [r5, #0]
 80096ba:	1c85      	addeq	r5, r0, #2
 80096bc:	e7cd      	b.n	800965a <_strtoul_l.constprop.0+0x22>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1d8      	bne.n	8009674 <_strtoul_l.constprop.0+0x3c>
 80096c2:	2c30      	cmp	r4, #48	@ 0x30
 80096c4:	bf0c      	ite	eq
 80096c6:	2308      	moveq	r3, #8
 80096c8:	230a      	movne	r3, #10
 80096ca:	e7d3      	b.n	8009674 <_strtoul_l.constprop.0+0x3c>
 80096cc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80096d0:	f1bc 0f19 	cmp.w	ip, #25
 80096d4:	d801      	bhi.n	80096da <_strtoul_l.constprop.0+0xa2>
 80096d6:	3c37      	subs	r4, #55	@ 0x37
 80096d8:	e7dc      	b.n	8009694 <_strtoul_l.constprop.0+0x5c>
 80096da:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80096de:	f1bc 0f19 	cmp.w	ip, #25
 80096e2:	d804      	bhi.n	80096ee <_strtoul_l.constprop.0+0xb6>
 80096e4:	3c57      	subs	r4, #87	@ 0x57
 80096e6:	e7d5      	b.n	8009694 <_strtoul_l.constprop.0+0x5c>
 80096e8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80096ec:	e7df      	b.n	80096ae <_strtoul_l.constprop.0+0x76>
 80096ee:	1c73      	adds	r3, r6, #1
 80096f0:	d106      	bne.n	8009700 <_strtoul_l.constprop.0+0xc8>
 80096f2:	2322      	movs	r3, #34	@ 0x22
 80096f4:	f8ce 3000 	str.w	r3, [lr]
 80096f8:	4630      	mov	r0, r6
 80096fa:	b932      	cbnz	r2, 800970a <_strtoul_l.constprop.0+0xd2>
 80096fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009700:	b107      	cbz	r7, 8009704 <_strtoul_l.constprop.0+0xcc>
 8009702:	4240      	negs	r0, r0
 8009704:	2a00      	cmp	r2, #0
 8009706:	d0f9      	beq.n	80096fc <_strtoul_l.constprop.0+0xc4>
 8009708:	b106      	cbz	r6, 800970c <_strtoul_l.constprop.0+0xd4>
 800970a:	1e69      	subs	r1, r5, #1
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	e7f5      	b.n	80096fc <_strtoul_l.constprop.0+0xc4>
 8009710:	0800a2a6 	.word	0x0800a2a6

08009714 <_strtoul_r>:
 8009714:	f7ff bf90 	b.w	8009638 <_strtoul_l.constprop.0>

08009718 <lflush>:
 8009718:	898b      	ldrh	r3, [r1, #12]
 800971a:	f003 0309 	and.w	r3, r3, #9
 800971e:	2b09      	cmp	r3, #9
 8009720:	d103      	bne.n	800972a <lflush+0x12>
 8009722:	4b03      	ldr	r3, [pc, #12]	@ (8009730 <lflush+0x18>)
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	f7fe b8b1 	b.w	800788c <_fflush_r>
 800972a:	2000      	movs	r0, #0
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	2400001c 	.word	0x2400001c

08009734 <__srefill_r>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	460c      	mov	r4, r1
 8009738:	4605      	mov	r5, r0
 800973a:	b118      	cbz	r0, 8009744 <__srefill_r+0x10>
 800973c:	6a03      	ldr	r3, [r0, #32]
 800973e:	b90b      	cbnz	r3, 8009744 <__srefill_r+0x10>
 8009740:	f7fe f9ca 	bl	8007ad8 <__sinit>
 8009744:	2300      	movs	r3, #0
 8009746:	6063      	str	r3, [r4, #4]
 8009748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800974c:	069e      	lsls	r6, r3, #26
 800974e:	d408      	bmi.n	8009762 <__srefill_r+0x2e>
 8009750:	0758      	lsls	r0, r3, #29
 8009752:	d445      	bmi.n	80097e0 <__srefill_r+0xac>
 8009754:	06d9      	lsls	r1, r3, #27
 8009756:	d407      	bmi.n	8009768 <__srefill_r+0x34>
 8009758:	2209      	movs	r2, #9
 800975a:	602a      	str	r2, [r5, #0]
 800975c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009760:	81a3      	strh	r3, [r4, #12]
 8009762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	071a      	lsls	r2, r3, #28
 800976a:	d50b      	bpl.n	8009784 <__srefill_r+0x50>
 800976c:	4621      	mov	r1, r4
 800976e:	4628      	mov	r0, r5
 8009770:	f7fe f88c 	bl	800788c <_fflush_r>
 8009774:	2800      	cmp	r0, #0
 8009776:	d1f4      	bne.n	8009762 <__srefill_r+0x2e>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	60a0      	str	r0, [r4, #8]
 800977c:	f023 0308 	bic.w	r3, r3, #8
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	61a0      	str	r0, [r4, #24]
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	f043 0304 	orr.w	r3, r3, #4
 800978a:	81a3      	strh	r3, [r4, #12]
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	b91b      	cbnz	r3, 8009798 <__srefill_r+0x64>
 8009790:	4621      	mov	r1, r4
 8009792:	4628      	mov	r0, r5
 8009794:	f7fe fb03 	bl	8007d9e <__smakebuf_r>
 8009798:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800979c:	07b3      	lsls	r3, r6, #30
 800979e:	d00f      	beq.n	80097c0 <__srefill_r+0x8c>
 80097a0:	2301      	movs	r3, #1
 80097a2:	4a1b      	ldr	r2, [pc, #108]	@ (8009810 <__srefill_r+0xdc>)
 80097a4:	491b      	ldr	r1, [pc, #108]	@ (8009814 <__srefill_r+0xe0>)
 80097a6:	481c      	ldr	r0, [pc, #112]	@ (8009818 <__srefill_r+0xe4>)
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	f7fe fa1d 	bl	8007be8 <_fwalk_sglue>
 80097ae:	81a6      	strh	r6, [r4, #12]
 80097b0:	f006 0609 	and.w	r6, r6, #9
 80097b4:	2e09      	cmp	r6, #9
 80097b6:	d103      	bne.n	80097c0 <__srefill_r+0x8c>
 80097b8:	4621      	mov	r1, r4
 80097ba:	4628      	mov	r0, r5
 80097bc:	f7fd ffe2 	bl	8007784 <__sflush_r>
 80097c0:	6922      	ldr	r2, [r4, #16]
 80097c2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80097c4:	6963      	ldr	r3, [r4, #20]
 80097c6:	6a21      	ldr	r1, [r4, #32]
 80097c8:	6022      	str	r2, [r4, #0]
 80097ca:	4628      	mov	r0, r5
 80097cc:	47b0      	blx	r6
 80097ce:	2800      	cmp	r0, #0
 80097d0:	6060      	str	r0, [r4, #4]
 80097d2:	dc17      	bgt.n	8009804 <__srefill_r+0xd0>
 80097d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d8:	d116      	bne.n	8009808 <__srefill_r+0xd4>
 80097da:	f043 0320 	orr.w	r3, r3, #32
 80097de:	e7bf      	b.n	8009760 <__srefill_r+0x2c>
 80097e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097e2:	2900      	cmp	r1, #0
 80097e4:	d0d2      	beq.n	800978c <__srefill_r+0x58>
 80097e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097ea:	4299      	cmp	r1, r3
 80097ec:	d002      	beq.n	80097f4 <__srefill_r+0xc0>
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7fe fe04 	bl	80083fc <_free_r>
 80097f4:	2300      	movs	r3, #0
 80097f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80097f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097fa:	6063      	str	r3, [r4, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0c5      	beq.n	800978c <__srefill_r+0x58>
 8009800:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009802:	6023      	str	r3, [r4, #0]
 8009804:	2000      	movs	r0, #0
 8009806:	e7ae      	b.n	8009766 <__srefill_r+0x32>
 8009808:	2200      	movs	r2, #0
 800980a:	6062      	str	r2, [r4, #4]
 800980c:	e7a6      	b.n	800975c <__srefill_r+0x28>
 800980e:	bf00      	nop
 8009810:	24000010 	.word	0x24000010
 8009814:	08009719 	.word	0x08009719
 8009818:	24000020 	.word	0x24000020

0800981c <memmove>:
 800981c:	4288      	cmp	r0, r1
 800981e:	b510      	push	{r4, lr}
 8009820:	eb01 0402 	add.w	r4, r1, r2
 8009824:	d902      	bls.n	800982c <memmove+0x10>
 8009826:	4284      	cmp	r4, r0
 8009828:	4623      	mov	r3, r4
 800982a:	d807      	bhi.n	800983c <memmove+0x20>
 800982c:	1e43      	subs	r3, r0, #1
 800982e:	42a1      	cmp	r1, r4
 8009830:	d008      	beq.n	8009844 <memmove+0x28>
 8009832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800983a:	e7f8      	b.n	800982e <memmove+0x12>
 800983c:	4402      	add	r2, r0
 800983e:	4601      	mov	r1, r0
 8009840:	428a      	cmp	r2, r1
 8009842:	d100      	bne.n	8009846 <memmove+0x2a>
 8009844:	bd10      	pop	{r4, pc}
 8009846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800984a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800984e:	e7f7      	b.n	8009840 <memmove+0x24>

08009850 <_close_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4d06      	ldr	r5, [pc, #24]	@ (800986c <_close_r+0x1c>)
 8009854:	2300      	movs	r3, #0
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	f7f7 faef 	bl	8000e3e <_close>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_close_r+0x1a>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_close_r+0x1a>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	240402d4 	.word	0x240402d4

08009870 <_lseek_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4d07      	ldr	r5, [pc, #28]	@ (8009890 <_lseek_r+0x20>)
 8009874:	4604      	mov	r4, r0
 8009876:	4608      	mov	r0, r1
 8009878:	4611      	mov	r1, r2
 800987a:	2200      	movs	r2, #0
 800987c:	602a      	str	r2, [r5, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	f7f7 fb04 	bl	8000e8c <_lseek>
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	d102      	bne.n	800988e <_lseek_r+0x1e>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	b103      	cbz	r3, 800988e <_lseek_r+0x1e>
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	240402d4 	.word	0x240402d4

08009894 <_read_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	4d07      	ldr	r5, [pc, #28]	@ (80098b4 <_read_r+0x20>)
 8009898:	4604      	mov	r4, r0
 800989a:	4608      	mov	r0, r1
 800989c:	4611      	mov	r1, r2
 800989e:	2200      	movs	r2, #0
 80098a0:	602a      	str	r2, [r5, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f7f7 fa92 	bl	8000dcc <_read>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_read_r+0x1e>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_read_r+0x1e>
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	240402d4 	.word	0x240402d4

080098b8 <_sbrk_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4d06      	ldr	r5, [pc, #24]	@ (80098d4 <_sbrk_r+0x1c>)
 80098bc:	2300      	movs	r3, #0
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	f7f7 fafe 	bl	8000ec4 <_sbrk>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_sbrk_r+0x1a>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_sbrk_r+0x1a>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	240402d4 	.word	0x240402d4

080098d8 <memcpy>:
 80098d8:	440a      	add	r2, r1
 80098da:	4291      	cmp	r1, r2
 80098dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80098e0:	d100      	bne.n	80098e4 <memcpy+0xc>
 80098e2:	4770      	bx	lr
 80098e4:	b510      	push	{r4, lr}
 80098e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ee:	4291      	cmp	r1, r2
 80098f0:	d1f9      	bne.n	80098e6 <memcpy+0xe>
 80098f2:	bd10      	pop	{r4, pc}

080098f4 <_malloc_usable_size_r>:
 80098f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f8:	1f18      	subs	r0, r3, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	bfbc      	itt	lt
 80098fe:	580b      	ldrlt	r3, [r1, r0]
 8009900:	18c0      	addlt	r0, r0, r3
 8009902:	4770      	bx	lr

08009904 <_init>:
 8009904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009906:	bf00      	nop
 8009908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800990a:	bc08      	pop	{r3}
 800990c:	469e      	mov	lr, r3
 800990e:	4770      	bx	lr

08009910 <_fini>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	bf00      	nop
 8009914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009916:	bc08      	pop	{r3}
 8009918:	469e      	mov	lr, r3
 800991a:	4770      	bx	lr
